<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
    <TriggerPackage>
        <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>svo Magi limbcounter</name>
            <script></script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#ff0000</mFgColor>
            <mBgColor>#ffff00</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList/>
            <regexCodePropertyList/>
            <Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>svoml Don't register</name>
                <script>-- it's OK, the trigger is supposed to be off by default
svo.ml_ignore()</script>
                <triggerType>0</triggerType>
                <conditonLineDelta>99</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList>
                    <string>^\w+ dodges nimbly out of the way\.$</string>
                    <string>^\w+ twists (?:his|her) body out of harm's way\.$</string>
                    <string>^\w+ parries the attack with a deft manoeuvre\.$</string>
                    <string>^\w+ steps into the attack, grabs your arm, and throws you violently to the ground\.$</string>
                    <string>^\w+ quickly jumps back, avoiding the attack\.$</string>
                    <string>^A chaos orb intercepts the attack against \w+ and renders it harmless\.$</string>
                    <string>The attack rebounds onto you!</string>
                    <string>^A reflection of \w+ blinks out of existence\.$</string>
                    <string>The attack rebounds back onto you!</string>
                    <string>^\w+ moves into your attack, knocking your blow aside before viciously countering with a strike to your head\.$</string>
                </regexCodeList>
                <regexCodePropertyList>
                    <integer>1</integer>
                    <integer>1</integer>
                    <integer>1</integer>
                    <integer>1</integer>
                    <integer>1</integer>
                    <integer>1</integer>
                    <integer>3</integer>
                    <integer>1</integer>
                    <integer>3</integer>
                    <integer>1</integer>
                </regexCodePropertyList>
            </Trigger>
            <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Strike</name>
                <script>svo.ml_hit(multimatches[2][3], multimatches[2][4], (multimatches[2][2] == &quot;Whiirh&quot; and .5 or 1))</script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList>
                    <string>You call upon</string>
                    <string>^You call upon (\w+) and unleash a forceful blow towards (\w+)'s (.+) with your trusty staff\.$</string>
                </regexCodeList>
                <regexCodePropertyList>
                    <integer>2</integer>
                    <integer>1</integer>
                </regexCodePropertyList>
            </Trigger>
        </TriggerGroup>
    </TriggerPackage>
    <TimerPackage/>
    <AliasPackage>
        <AliasGroup isActive="yes" isFolder="yes">
            <name>svo Magi limbcounter</name>
            <script></script>
            <command></command>
            <packageName></packageName>
            <regex></regex>
            <Alias isActive="yes" isFolder="no">
                <name>Reset</name>
                <script>svo.ml_reset(matches[2])</script>
                <command></command>
                <packageName></packageName>
                <regex>^nn ?(.+)?$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Check status</name>
                <script>if svo.ml_show then svo.ml_show() end</script>
                <command></command>
                <packageName></packageName>
                <regex>^vsl$</regex>
            </Alias>
        </AliasGroup>
    </AliasPackage>
    <ActionPackage/>
    <ScriptPackage>
        <ScriptGroup isActive="yes" isFolder="yes">
            <name>svo Magi limbcounter</name>
            <packageName></packageName>
            <script>-- Svof (c) 2011-2018 by Vadim Peretokin

-- Svof is licensed under a
-- Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.

-- You should have received a copy of the license along with this
-- work. If not, see &lt;http://creativecommons.org/licenses/by-nc-sa/4.0/&gt;.

svo = svo or {}; svo.loader = svo.loader or {}
svo.loader.magilimbcounter = function()
if svo.me.class ~= &quot;Magi&quot; then return end

local sk = svo.sk

svo.ml_version = &quot;1.0&quot;

svo.ml_list = {}
local limbs = {'head', 'torso', 'rightarm', 'leftarm', 'rightleg', 'leftleg'}
local hittable = {}
svo.ml_prep_at = 4
svo.ml_break_at = 5

enableTrigger(&quot;svo Magi limbcounter&quot;)
enableAlias(&quot;svo Magi limbcounter&quot;)

-- Their blah, blah, blah are also prepped.
local function get_other_prepped(t, limbhit)
  local s = {}
  for i = 1, #limbs do
    if limbs[i] ~= limbhit and t[limbs[i]] == svo.ml_prep_at then s[#s+1] = limbs[i] end
  end

  if #s == 0 then return &quot;&quot;
  else return string.format(&quot; Their %s %s also prepped.&quot;, svo.concatand(s), (#s == 1 and 'is' or 'are')) end
end

function svo.ml_ignore()
  table.remove(select(2, next(hittable)))
end


function sk.ml_checklimbcounter()
  -- make the announces work with a singleprompt
  local echof = svo.itf
  moveCursor(0, getLineNumber())

  -- we'll only ever have one name here so far
  local s,m = pcall(function()
    local who, t = next(hittable)
    local where
    for i = 1, #t do
      local dmg
      where, dmg = next(t[i])
      svo.ml_list[who][where] = svo.ml_list[who][where] + dmg
      raiseEvent(&quot;svo limbcounter hit&quot;, who, where)
    end

    if not where then
      echof(&quot;Failed to connect.%s&quot;, get_other_prepped(svo.ml_list[who], &quot;&quot;))
    else
      if svo.ml_list[who][where] &gt;= svo.ml_break_at then
        echof(&quot;%s's %s broke.%s&quot;, who, where, get_other_prepped(svo.ml_list[who], where))
        svo.ml_list[who][where] = 0
      elseif svo.ml_list[who][where] &gt;= svo.ml_prep_at then
        echof(&quot;%s's %s is prepped.%s&quot;, who, where, get_other_prepped(svo.ml_list[who], where))
      else
        echof(&quot;%s's %s is now at %s/%s.%s&quot;, who, where, svo.ml_list[who][where], svo.ml_break_at, get_other_prepped(svo.ml_list[who], where))
      end
    end
  end)
  if not s then
    echoLink(&quot;(e!)&quot;, [[echo(&quot;The problem was: ']]..tostring(m)..[['&quot;)]], 'Oy - there was a problem. Click on this link and submit a bug report with what it says along with a copy/paste of what you saw.')
  end

  hittable = {}
  disableTrigger(&quot;svoml Don't register&quot;)
  svo.signals.before_prompt_processing:disconnect(sk.ml_checklimbcounter)
end

function svo.ml_hit(who, where, howmuch)
  svo.ml_list[who] = svo.ml_list[who] or {head = 0, torso = 0, rightarm = 0, leftarm = 0, rightleg = 0, leftleg = 0}
  where = where:gsub(&quot; &quot;, &quot;&quot;)
  svo.lasthit = who

  hittable[who] = hittable[who] or {}
  hittable[who][#hittable[who] + 1] = {[where] = (howmuch and howmuch or 1)}
  svo.signals.before_prompt_processing:connect(sk.ml_checklimbcounter)
  enableTrigger(&quot;svoml Don't register&quot;)
end

function svo.ml_reset(whom)
  if svo.defc.dragonform then return end

  if whom then whom = string.title(whom) end

  local t = {
    h = 'head',
    t = 'torso',
    rl = 'rightleg',
    ll = 'leftleg',
    ra = 'rightarm',
    la = 'leftarm',
  }

  if whom == 'All' then
    svo.ml_list = {}
    svo.echof(&quot;Reset everyone's limb status.&quot;)
  elseif not whom and svo.lasthit then
    svo.ml_list[svo.lasthit] = {head = 0, torso = 0, rightarm = 0, leftarm = 0, rightleg = 0, leftleg = 0, ml_break_at = svo.ml_break_at}
    svo.echof(&quot;Reset %s's limb status.&quot;, svo.lasthit)
  elseif t[whom:lower()] then
    if not svo.lasthit or not svo.ml_list[svo.lasthit] then
      svo.echof(&quot;Not keeping track of anyone yet to reset their limb.&quot;)
    else
      svo.ml_list[svo.lasthit][t[whom:lower()]] = 0
      svo.echof(&quot;Reset %s %s's status.&quot;, svo.lasthit, t[whom:lower()])
    end
  elseif whom then
    if svo.ml_list[whom] then
      svo.ml_list[whom] = nil
      svo.echof(&quot;Reset %s's limb status.&quot;, whom)
    else
      svo.echof(&quot;Weren't keeping track of %s anyway.&quot;, whom)
    end
  else
    svo.echof(&quot;Not keeping track of anyone to reset them anyway.&quot;)
  end
  raiseEvent(&quot;svo limbcounter reset&quot;)
end

function svo.ml_show()
  if svo.defc.dragonform then return end

  if not next(svo.ml_list) then svo.echof(&quot;magi limbcounter: Not keeping track of anyone yet.&quot;); return end

  setFgColor(unpack(svo.getDefaultColorNums))
  for person, limbt in pairs(svo.ml_list) do
    echo(&quot;---&quot;..person..&quot; &quot;) fg('a_darkgrey')
    echoLink(&quot;(reset)&quot;, 'svo.ml_reset&quot;'..person..'&quot;', &quot;Reset limb status for &quot;..person, true)
    setFgColor(unpack(svo.getDefaultColorNums))
    echo(string.format(&quot; -- prep at %s -- break at %s --&quot;, svo.ml_prep_at, svo.ml_break_at))
    echo(string.rep(&quot;-&quot;, (52-#person-#tostring(svo.ml_prep_at)-#tostring(svo.ml_break_at))))
    echo&quot;\n|&quot;
    for i = 1, #limbs do
      if limbt[limbs[i]] &gt;= svo.ml_break_at - 1 then fg('green') end
      echo(string.format(&quot;%14s&quot;, (limbt[limbs[i]] &gt;= svo.ml_break_at - 1 and limbs[i]..&quot; prep&quot; or limbs[i].. &quot; &quot;..limbt[limbs[i]])))
      if limbt[limbs[i]] &gt;= svo.ml_break_at - 1 then setFgColor(unpack(svo.getDefaultColorNums)) end
      echo&quot;|&quot;
    end
    echo&quot;\n&quot;
  end
  echo(string.rep(&quot;-&quot;, 91))
end

-- limbcounters prompt tag is defined here
-- feel free to tinker with it, but move it out into a script of its own,
-- so your changes don't get erased on an update!
function svo.ml_prompttag2()
  if svo.defc.dragonform or not svo.lasthit or not svo.ml_list or not svo.ml_list[svo.lasthit] then return &quot;&quot; end
  local t = svo.ml_list[svo.lasthit]
  return string.format(&quot;%s: h %s|t %s|ra %s|la %s|rl %s|ll %s&quot;, svo.lasthit, t.head, t.torso, t.rightarm, t.leftarm, t.rightleg, t.leftleg)
end
svo.adddefinition(&quot;@ml_prompttag2&quot;, &quot;svo.ml_prompttag2()&quot;)



function svo.ml_prompttag()
  if svo.defc.dragonform or not svo.lasthit or not svo.ml_list or not svo.ml_list[svo.lasthit] then return &quot;&quot; end
  local t = svo.ml_list[svo.lasthit]
  local prep = 1
  return string.format(&quot;%s%s&lt;a_white&gt;/%s%s&lt;a_white&gt;|%s%s&lt;a_white&gt;/%s%s&lt;a_white&gt;|%s%s&lt;a_white&gt;/%s%s&lt;a_white&gt;|%s&quot;,
                   ((svo.ml_break_at - t.leftarm) &lt;= prep) and &quot;&lt;a_red&gt;&quot; or &quot;&lt;a_darkyellow&gt;&quot;, t.leftarm,
                   ((svo.ml_break_at - t.rightarm) &lt;= prep) and &quot;&lt;a_red&gt;&quot; or &quot;&lt;a_darkyellow&gt;&quot;, t.rightarm,
                   ((svo.ml_break_at - t.leftleg) &lt;= prep) and &quot;&lt;a_red&gt;&quot; or &quot;&lt;a_darkyellow&gt;&quot;, t.leftleg,
                   ((svo.ml_break_at - t.rightleg) &lt;= prep) and &quot;&lt;a_red&gt;&quot; or &quot;&lt;a_darkyellow&gt;&quot;, t.rightleg,
                   ((svo.ml_break_at - t.head) &lt;= prep) and &quot;&lt;a_red&gt;&quot; or &quot;&lt;a_darkyellow&gt;&quot;, t.head,
                   ((svo.ml_break_at - t.torso) &lt;= prep) and &quot;&lt;a_red&gt;&quot; or &quot;&lt;a_darkyellow&gt;&quot;, t.torso, svo.ml_break_at)
end
svo.adddefinition(&quot;@ml_prompttag&quot;, &quot;svo.ml_prompttag()&quot;)


function svo.ml_prompttag3()
  if svo.defc.dragonform or not svo.lasthit or not svo.ml_list or not svo.ml_list[svo.lasthit] then return &quot;&quot; end
  local t = svo.ml_list[svo.lasthit]
  local prep = 1
  return string.format(&quot;&lt;a_darkgrey&gt;(%s%s&lt;a_darkgrey&gt;:%s%s&lt;a_darkgrey&gt;:%s%s&lt;a_darkgrey&gt;:%s%s&lt;a_darkgrey&gt;:%s%s&lt;a_darkgrey&gt;:%s%s&lt;a_darkgrey&gt;:%s)&quot;,
                   ((svo.ml_break_at - t.leftarm) &lt;= prep) and &quot;&lt;a_red&gt;&quot; or &quot;&lt;a_darkyellow&gt;&quot;, t.leftarm,
                   ((svo.ml_break_at - t.rightarm) &lt;= prep) and &quot;&lt;a_red&gt;&quot; or &quot;&lt;a_darkyellow&gt;&quot;, t.rightarm,
                   ((svo.ml_break_at - t.leftleg) &lt;= prep) and &quot;&lt;a_red&gt;&quot; or &quot;&lt;a_darkyellow&gt;&quot;, t.leftleg,
                   ((svo.ml_break_at - t.rightleg) &lt;= prep) and &quot;&lt;a_red&gt;&quot; or &quot;&lt;a_darkyellow&gt;&quot;, t.rightleg,
                   ((svo.ml_break_at - t.head) &lt;= prep) and &quot;&lt;a_red&gt;&quot; or &quot;&lt;a_darkyellow&gt;&quot;, t.head,
                   ((svo.ml_break_at - t.torso) &lt;= prep) and &quot;&lt;a_red&gt;&quot; or &quot;&lt;a_darkyellow&gt;&quot;, t.torso, svo.ml_break_at)
end
svo.adddefinition(&quot;@ml_prompttag3&quot;, &quot;svo.ml_prompttag3()&quot;)

svo.echof(&quot;Loaded svo Magi limbcounter, version %s.&quot;, tostring(svo.ml_version))
end -- end of svo magi limbcounter loader

if svo.systemloaded then svo.loader.magilimbcounter() end
</script>
            <eventHandlerList/>
        </ScriptGroup>
    </ScriptPackage>
    <KeyPackage/>
    <HelpPackage>
        <helpURL></helpURL>
    </HelpPackage>
</MudletPackage>
