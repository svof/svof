<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
    <TriggerPackage/>
    <TimerPackage/>
    <AliasPackage/>
    <ActionPackage/>
    <ScriptPackage>
        <Script isActive="yes" isFolder="no">
            <name>Install system</name>
            <packageName></packageName>
            <script>-- Svof (c) 2011-2018 by Vadim Peretokin

-- Svof is licensed under a
-- Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.

-- You should have received a copy of the license along with this
-- work. If not, see &lt;http://creativecommons.org/licenses/by-nc-sa/4.0/&gt;.

svo = svo or {}; svo.loader = svo.loader or {}
svo.loader.install = function()

local sys, signals = svo.sys, svo.signals
local conf, sk = svo.conf, svo.sk
local pipes, install = svo.pipes, svo.install

install.ids = install.ids or {}

-- same name as conf
-- function to say have/don't have
local installdata = {
  thirdeye = {
    gmcp = {group = 'vision', name = 'thirdeye'},
  },
  deathsight = {
    gmcp = {group = 'vision', name = 'deathsight'},
  },
  focus = {
    gmcp = {group = 'survival', name = 'focusing'},
  },
  efficiency = {
    gmcp = {group = 'survival', name = 'efficiency'}
  },
  restore = {
    gmcp = {group = 'survival', name = 'restoration'},
  },
  breath = {
    gmcp = {group = 'survival', name = 'breathing'},
  },
  pipes = {
    command = &quot;ii pipe&quot;,
    item = true,
    other = {
      pattern = [[^You are wielding:$]],
      script = [[
        svo.deleteAllP()
        svo.pipetrig = tempRegexTrigger([=[^ +pipe(\d+)]=],
          [=[
            tempTimer(0.02, [==[
              local r = svo.pipe_assignid(]==]..matches[2]..[==[)
              killTrigger(svo.pipetrig)
              if r then send(&quot;empty &quot;..r, false) svo.echof(&quot;Set the %s pipe id to %d.&quot;, r, ]==]..matches[2]..[==[) end
            ]==])
          ]=])
      ]]
    }
  },
  insomnia = {
    gmcp = {group = 'survival', name = 'insomnia'},
  },
  clot = {
    gmcp = {group = 'survival', name = 'clotting'},
  }
}

if svo.haveskillset('chivalry') then
  installdata.fitness = {
    command = &quot;ab chivalry fitness&quot;,
    gmcp = {group = 'chivalry', name = 'fitness'}}
elseif svo.haveskillset('kaido') then
  installdata.fitness = {
    command = &quot;ab kaido fitness&quot;,
    gmcp = {group = 'kaido', name = 'fitness'}}
elseif svo.haveskillset('shindo') then
  installdata.fitness = {
    command = &quot;ab striking fitness&quot;,
    gmcp = {group = 'striking', name = 'fitness'}}
end

if svo.haveskillset('venom') then
  installdata.shrugging = {
    gmcp = {group = 'venom', name = 'shrugging'}
  }
end
if svo.haveskillset('voicecraft') then
  installdata.dwinnu = {
    gmcp = {group = 'voicecraft', name = 'dwinnu'},
  }
end
if not svo.haveskillset('tekura') then
  installdata.parry = {
    gmcp = {group = 'weaponry', name = 'parrying'},
  }
else
  installdata.parry = {
    gmcp = {group = 'tekura', name = 'guarding'},
  }
end
if svo.haveskillset('chivalry') then
  installdata.rage = {
    gmcp = {group = 'chivalry', name = 'rage'},
  }
end
if svo.haveskillset('shindo') then
  installdata.shindodeaf = {
    gmcp = {group = 'shindo', name = 'deaf'},
  }
  installdata.shindoblind = {
    gmcp = {group = 'shindo', name = 'blind'},
  }
end
if svo.haveskillset('weaponmastery') then
  installdata.recoverfooting = {
    gmcp = {group = 'weaponmastery', name = 'recover'},
  }
end

function svo.installclear(what)
  if type(install.ids[what]) == 'table' then

    for _, id in pairs(install.ids[what]) do
      killTrigger(id)
      install.ids[what][_] = nil
    end
    install.ids[what] = nil

  else
    install.ids[what] = nil
  end

  if svo.installtimer then killTimer(svo.installtimer) end
  tempTimer(5+getNetworkLatency(), function ()
    if next(install.ids) then
      for thing, _ in pairs(install.ids) do
        if svo.config_dict[thing] and svo.config_dict[thing].type == 'boolean' then
          svo.config.set(thing, false, true)
        end

        svo.installclear(thing)
      end
    end

    svo.installtimer = nil

    if not next(install.ids) and not install.installing_system then
      echo&quot;\n&quot;
      svo.echof(&quot;auto-configuration done. :) question time!&quot;)
      echo&quot;\n&quot;
      install.ask_install_questions()
    end
  end)
end

function svo.installstart(fresh)
  if fresh and not sk.installwarning then
    svo.echof(&quot;Are you really sure you want to wipe everything (all remove all non-default defence modes, clear basic+combat defup/keepup to blank, remove all configuration options)? If yes, do vinstall fresh again.&quot;)
    if selectString('really', 1) ~= -1 then setUnderline(true) resetFormat() end
    svo.sk.installwarning = true
    return
  elseif fresh and sk.installwarning then
    local s, m = os.remove(getMudletHomeDir() .. &quot;/svo&quot;)
    if not s then svo.echof(&quot;Couldn't remove svo folder because of: %s&quot;, m) end

    svo.defdefup = {
      basic = {},
      combat = {},
    }

    svo.defkeepup = {
      basic = {},
      combat = {},
    }

    svo.echof(&quot;Vacuumed everything up!&quot;)
    svo.sk.installwarning = nil
  end

  for _, skill in pairs(install.ids) do
    if type(skill) == 'table' then
      for _, id in pairs(skill) do
        svo.installclear(id)
      end
    end
  end

  install.ids = {}
  local ids = install.ids

    for skill, skilldata in pairs(installdata) do
      if skilldata.gmcp then
        sendGMCP(&quot;Char.Skills.Get &quot;..yajl.to_string(skilldata.gmcp))
        ids[skill] = true
      end
    end

    sendGMCP(&quot;Char.Skills.Get &quot;..yajl.to_string{group = 'survival'})
    sendGMCP(&quot;Char.Items.Inv&quot;)
if svo.haveskillset('metamorphosis') then
    sendGMCP(&quot;Char.Skills.Get &quot;..yajl.to_string{group = 'metamorphosis'})
end
    signals.gmcpcharskillsinfo:unblock(install.checkskillgmcp)
    signals.gmcpcharitemslist:unblock(install.checkinvgmcp)
    signals.gmcpcharskillslist:unblock(install.checkskilllist)


  if sys.enabledgmcp then
    svo.echof(&quot;Starting auto-configuration - going to detect which skills and pipes you've got. Please wait 5 seconds for the questions to start.&quot;)
    printCmdLine(&quot;Please wait, doing auto-configuration...&quot;)
    echo&quot;\n&quot;
  else
    svo.echof(&quot;Please enable GMCP in Mudlet settings and restart before installing.&quot;)

    signals.gmcpcharskillsinfo:block(install.checkskillgmcp)
    signals.gmcpcharitemslist:block(install.checkinvgmcp)
    signals.gmcpcharskillslist:block(install.checkskilllist)

    for _, skill in pairs(install.ids) do
      if type(skill) == 'table' then
        for _, id in pairs(skill) do
          svo.installclear(id)
        end
      end
    end

    install.ids = {}

    return
  end

  send(&quot;config screenwidth 0&quot;, true)
  -- some newbies don't have the full prompt, just a -, which does not have the required info for the system
  -- for priests, make the balance show on the prompt - as healing others of blind/deaf takes no balance, while other other similar-looking lines do
  -- anyone else can see the class balance
  send(sys.ingamecustomprompt, false)

  -- defaults/reset
  for name, tbl in svo.config_dict:iter() do
    if tbl.installstart then tbl.installstart(); raiseEvent(&quot;svo config changed&quot;, name) end
  end
  pipes.elm.id, pipes.skullcap.id, pipes.valerian.id = 0,0,0

  if sys.enabledgmcp then
    local city = gmcp.Char.Status.city:match(&quot;^(%w+)&quot;)
    if city then svo.config.set('org', city, true) end

    if gmcp.Char.Status.level and tonumber(gmcp.Char.Status.level:match(&quot;^(%d+)&quot;)) &gt;= 99 then
      svo.config.set('dragonflex', true, true)
      svo.config.set('dragonheal', true, true)
    else
      svo.config.set('dragonflex', false, true)
      svo.config.set('dragonheal', false, true)
    end
  end
end

-- logic: set relevant conf's to nil, go through a table of specific ones - if one is nil, ask the relevant question for it. inside alias to toggle it, call install again.

svo.install.ask_install_questions = function ()
  if install.installing_system then return end

  install.installing_system = true
  install.check_install_step()
end

svo.install.check_install_step = function()
  for name, tbl in svo.config_dict:iter() do
    if conf[name] == nil and tbl.installcheck then
      echo &quot;\n&quot;
      tbl.installcheck()
      svo.conf_printinstallhint(name)

      if printCmdLine then
        printCmdLine(&quot;vconfig &quot;..name..&quot; &quot;)
      end

      return
    end
  end

  install.installing_system = false
  signals.gmcpcharskillsinfo:block(install.checkskillgmcp)
  signals.gmcpcharitemslist:block(install.checkinvgmcp)
  signals.gmcpcharskillslist:block(install.checkskilllist)
  echo&quot;\n&quot;
  svo.echof(&quot;All done installing! Congrats.&quot;)
  signals.saveconfig:emit()

  decho(svo.getDefaultColor()..&quot;If you'd like, you can also optionally setup the &quot;)
  echoLink('parry', 'svo.sp.setup()', 'parry')
  decho(svo.getDefaultColor()..&quot; system and the &quot;)
  echoLink(&quot;herb precache&quot;, 'svo.showprecache()', 'herb precache')
  decho(svo.getDefaultColor()..&quot; system. You can adjust the &quot;)
  echoLink(&quot;echo colours&quot;, 'svo.config.showcolours()', 'echo colours')
  decho(svo.getDefaultColor()..&quot; as well!&quot;)
  echo &quot;\n&quot;
  svo.echof(&quot;I'd recommend that you at least glimpse through my docs as well so you sort of know what are you doing :)&quot;)

  if not conf.customprompt and not conf.setdefaultprompt then
    svo.conf.setdefaultprompt = true
    svo.setdefaultprompt()
    echo&quot;\n&quot; svo.echof(&quot;I've setup a custom prompt for you that mimics the normal Achaean one, but also displays which afflictions have you got. See http://doc.svo.vadisystems.com/#setting-a-custom-prompt on how to customize it if you'd like, or if you don't like it, do 'vconfig customprompt off' to disable it.&quot;)
  end

  tempTimer(math.random(1,2), function ()
    echo&quot;\n&quot;
    svo.echof(&quot;Oh, and one last thing - QQ, restart Mudlet and login again, so all changes can take effect properly.&quot;)
  end)
end

function svo.install.checkskillgmcp()
  local t = _G.gmcp.Char.Skills.Info
  if not t then return end

  if t.skill == 'clotting' then t.skill = 'clot' end
  if t.skill == 'parrying' then t.skill = 'parry' end

  if conf[t.skill] == nil and (t.info == &quot;&quot; or t.info:find(&quot;You have not yet learned this ability&quot;)) then
    conf[t.skill] = false
    svo.echof(&quot;Don't have %s, so &lt;250,0,0&gt;won't%s be using it whenever possible.&quot;, t.skill, svo.getDefaultColor())
    raiseEvent(&quot;svo config changed&quot;, t.skill)
  elseif conf[t.skill] == nil then
    conf[t.skill] = true
    svo.echof(&quot;Have %s, so &lt;0,250,0&gt;will%s be using it whenever possible.&quot;, t.skill, svo.getDefaultColor())
    raiseEvent(&quot;svo config changed&quot;, t.skill)
  end

  svo.installclear(t.skill)
end
signals.gmcpcharskillsinfo:connect(install.checkskillgmcp, 'checkskillgmcp')
signals.gmcpcharskillsinfo:block(install.checkskillgmcp)

function svo.install.checkinvgmcp()
  local t = _G.gmcp.Char.Items.List
  if not t.location == 'inv' then return end

  -- feh! Easier to hardcode it for such a miniscule amount of items.
  -- If list enlarges, fix appopriately.
  for _, it in pairs(t.items) do
    if string.find(it.name, &quot;%f[%a]pipe%f[%A]&quot;) then
      local r = svo.pipe_assignid(it.id)
      if r then svo.echof(&quot;Set the %s pipe id to %d.&quot;, r, it.id) end
    end
  end

end
signals.gmcpcharitemslist:connect(install.checkinvgmcp, 'checkinvgmcp')
signals.gmcpcharitemslist:block(install.checkinvgmcp)


function svo.install.checkskilllist()
  local t = _G.gmcp.Char.Skills.List
  if t.group == 'survival' then
    for _, k in ipairs{{'focus', 'focusing'}, {'restore', 'restoration'}, {'insomnia', 'insomnia'}, {'clot', 'clotting'}, {'breath', 'breathing'}, {'efficiency', 'efficiency'}} do
      if svo.contains(t.list, k[2]:title()) then
        svo.config.set(k[1], true, true)
        svo.installclear(k[1])
      end
    end
  end

if svo.haveskillset('metamorphosis') then
  if t.group == 'metamorphosis' then
    for _, k in ipairs{'truemorph', 'hydra', 'wyvern', 'affinity', 'icewyrm', 'gorilla', 'eagle', 'jaguar', 'wolverine', 'transmorph', 'elephant', 'nightingale', 'bonding', 'bear', 'basilisk', 'sloth', 'gopher', 'condor', 'hyena', 'owl', 'cheetah', 'jackdaw', 'turtle', 'wolf', 'wildcat', 'powers', 'squirrel'} do
    if svo.contains(t.list, k:title()) then
      svo.config.set('morphskill', k, true)
      break
    end
  end

  svo.installclear('morphskill')
end
  end
end
signals.gmcpcharskillslist:connect(install.checkskilllist, 'checkskilllist')
signals.gmcpcharskillslist:block(install.checkskilllist)

end -- end of svo install loader

if svo.systemloaded then svo.loader.install() end</script>
            <eventHandlerList/>
        </Script>
        <Script isActive="yes" isFolder="no">
            <name>Config system</name>
            <packageName></packageName>
            <script>-- Svof (c) 2011-2018 by Vadim Peretokin

-- Svof is licensed under a
-- Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.

-- You should have received a copy of the license along with this
-- work. If not, see &lt;http://creativecommons.org/licenses/by-nc-sa/4.0/&gt;.

svo = svo or {}; svo.loader = svo.loader or {}
svo.loader.config = function()

local sys, defdefup, signals = svo.sys, svo.defdefup, svo.signals
local conf, sk, me, defs = svo.conf, svo.sk, svo.me, svo.defs
local defences, cnrl, rift = svo.defences, svo.cnrl, svo.rift
local pipes = svo.pipes

svo.pl.dir.makepath(getMudletHomeDir() .. &quot;/svo/config&quot;)

-- conf has actual values, config data for them

svo.wait_tbl = {
  [0] = {n = 0.7, m = &quot;Systems lag tolerance level set to normal.&quot;},
  [1] = {n = 1.1, m = &quot;The lag level was set to \&quot;decent\&quot; - make sure to set it to normal when it clears up.&quot;},
  [2] = {n = 1.9, m = &quot;The lag level was set to \&quot;severe\&quot; - make sure to set it to normal when it clears up.&quot;},
  [3] = {n = 3.5, m = &quot;The lag level was set to \&quot;awfully terrible\&quot; - make sure to set it to normal when it clears up. Don't even think about fighting in this lag.&quot;},
  [4] = {n = 3.5, m = &quot;The lag level was set to \&quot;you're on a mobile in the middle of nowhere\&quot; - make sure to set it to normal when it clears up. Don't even think about fighting in this lag. Don't use this for bashing with dor either - use 3 instead. This is more useful for scripts that rely on do - enchanting and etc.&quot;}
}

svo.conf_printinstallhint = function (which)
  svo.assert(svo.config_dict[which] and svo.config_dict[which].type, which..&quot; is missing a type&quot;)

  if svo.config_dict[which].type == 'boolean' then
    svo.echof(&quot;Use %s to answer.&quot;, tostring(svo.green(&quot;vconfig &quot;..which..&quot; yep/nope&quot;)))
  elseif svo.config_dict[which].type == 'string' then
    svo.echof(&quot;Use %s to answer.&quot;, tostring(svo.green(&quot;vconfig &quot;..which..&quot; (option)&quot;)))
  elseif svo.config_dict[which].type == 'number' and svo.config_dict[which].percentage then
    svo.echof(&quot;Use %s to answer.&quot;, tostring(svo.green(&quot;vconfig &quot;..which..&quot; (percent)&quot;)))
  elseif svo.config_dict[which].type == 'number' then
    svo.echof(&quot;Use %s to answer.&quot;, tostring(svo.green(&quot;vconfig &quot;..which..&quot; (number)&quot;)))
  end
end

local conf_installhint = function (which)
  svo.assert(svo.config_dict[which] and svo.config_dict[which].type, which..&quot; is missing a type&quot;)

  if svo.config_dict[which].type == 'boolean' then
    return &quot;Use vconfig &quot;..which..&quot; yep/nope to answer.&quot;
  elseif svo.config_dict[which].type == 'string' then
    return &quot;Use vconfig &quot;..which..&quot; (option) to answer.&quot;
  elseif svo.config_dict[which].type == 'number' and svo.config_dict[which].percentage then
    return &quot;Use vconfig &quot;..which..&quot; (percent) to answer.&quot;
  elseif svo.config_dict[which].type == 'number' then
    return &quot;Use vconfig &quot;..which..&quot; (number) to answer.&quot;
  else return &quot;&quot;
  end
end

svo.config_dict = svo.pl.OrderedMap {
  {blockcommands = {
    vconfig2 = true,
    type = 'boolean',
    onenabled = function ()
      svo.echof(&quot;&lt;0,250,0&gt;Will%s block your commands in slow curing mode (aeon/retardation) if the system is doing something.&quot;, svo.getDefaultColor())
      if not denyCurrentSend then svo.echof(&quot;Warning: your version of Mudlet doesn't support this, so blockcommands won't actually work. Update to 1.2.0+&quot;) end
    end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s block your commands in slow curing mode, but instead allow them to override what the system is doing.&quot;, svo.getDefaultColor())
    if not denyCurrentSend then svo.echof(&quot;Warning: your version of Mudlet doesn't support this, so blockcommands won't actually work.&quot;) end end,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      if denyCurrentSend then
        echo &quot;Override commands in slow-curing mode.\n&quot; return
      else
        echo &quot;Override commands in slow-curing mode (requires Mudlet 1.2.0+).\n&quot; return end
    end,
    installstart = function () conf.blockcommands = true end,
  }},
  {autoslick = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Automatically prioritise slickness&quot;,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s automatically swap asthma herb priority in times of danger - when you have paralysis or impatience above asthma in prios, and you have asthma+slickness on you, getting hit with a herbstack.&quot;, svo.getDefaultColor()) end,
    ondisabled = function ()
      if svo.swapped_asthma then
        svo.prio_swap('asthma', 'herb', svo.swapped_asthma)
        svo.swapped_asthma = nil
        svo.echof(&quot;Swapped asthma priority back down.&quot;)
      end

      svo.echof(&quot;&lt;250,0,0&gt;Won't%s automatically swap asthma herb priority in times of danger.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.autoslick = true end
  }},
  {focus = {
    type = 'boolean',
    vconfig1 = 'focus',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use Focus to cure.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use Focus to cure.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.focus = nil end,
    installcheck = function () svo.echof(&quot;Can you make use of the Focus skill?&quot;) end
  }},
  {siprandom = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s sip by random vial IDs of a potion - note that this requires the elist sorter to know which vial IDs have which potions - and you'll need to check 'elist' after a vial runs out.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s make use of random vials - will be sipping the first available one by name.&quot;, svo.getDefaultColor()) end,
  }},
  {autoclasses = {
      type = 'boolean',
      onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s automatically enable the classes you seem to be fighting (used for class tricks).&quot;, svo.getDefaultColor()) end,
      ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s automatically enable classes that you seem to be fighting (you can use tn/tf class instead).&quot;, svo.getDefaultColor()) end,

      vconfig2 = true,
      onshow = function (defaultcolour)
        fg(defaultcolour)
        if conf.autoclasses then
          echo &quot;Will auto-enable classes.\n&quot;
        else
          echo &quot;Won't auto-enable classes.\n&quot;
        end
      end,
    }},
  {havelifevision = {
    type = 'boolean',
    onenabled = function () defences.enablelifevision() svo.echof(&quot;&lt;0,250,0&gt;Have%s Lifevision mask - added it to defup/keepup.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Don't%s have Lifevision mask - won't be adding it to defup/keepup.&quot;, svo.getDefaultColor()) end,
  }},
  {autoarena = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s automatically enable/disable arena mode as you enter into the arena.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s automatically enable/disable arena mode as you enter/leave the arena..&quot;, svo.getDefaultColor()) end,
  }},
  {haveshroud = {
    type = 'boolean',
    onenabled = function () defences.enableshroud() svo.echof(&quot;&lt;0,250,0&gt;Have%s a Shroudcloak - added it to defup/keepup.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Don't%s have a Shroudcloak - won't be adding it to defup/keepup.&quot;, svo.getDefaultColor()) end,
  }},
  {focuswithcadmus = {
    type = 'boolean',
    vconfig2 = true,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo &quot;Use Focus while you have cadmus&quot;
      if conf.focuswithcadmus then
        echo&quot;    (&quot;
        echoLink(&quot;adjust affs&quot;, &quot;svo.config.set'cadmusaffs'&quot;, &quot;View, enable and disable afflictions for which focus is allowed to be used while you've got cadmus&quot;)
        fg(defaultcolour) echo &quot;)&quot;
      end
      echo&quot;\n&quot;
      resetFormat()
    end,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s focus for mental afflictions when you've got cadmus (this'll give you a physical affliction when you do).&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s focus when you've got cadmus.&quot;, svo.getDefaultColor()) end,
  }},
  {cadmusaffs = {
    type = 'custom',
    onmenu = function ()
      local underline = setUnderline; _G.setUnderline = function () end

      svo.echofn(&quot;Afflictions for which we will use focus even though we have &quot;)
      underline(true)
      setFgColor(unpack(svo.getDefaultColorNums))
      echoLink('cadmus', '', &quot;Cadmus will give you a physical affliction if you focus with it (and still cure the mental one)&quot;, true)
      underline(false)
      echo(&quot;:\n&quot;)

      local temp = svo.prio.getlist('focus')

      -- clear gaps so we can sort and display in 2 columns
      local t = {}
      for _, focusaff in ipairs(temp) do t[#t+1] = focusaff end

      table.sort(t) -- display alphabetically

      for i = 1, #t, 2 do
        local focusaff, nextaff = t[i], t[i+1]

        if me.cadmusaffs[focusaff] then
          dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt;X&lt;153,204,204&gt;]&quot;, [[svo.me.cadmusaffs[&quot;]]..focusaff..[[&quot;] = false; svo.config.set'cadmusaffs']], &quot;Click to stop focusing for &quot;..focusaff..&quot; when you have camus&quot;, true)
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %s&quot;, focusaff))
        else
          dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt; &lt;153,204,204&gt;]&quot;, [[svo.me.cadmusaffs[&quot;]]..focusaff..[[&quot;] = true; svo.config.set'cadmusaffs']], &quot;Click to start focusing for &quot;..focusaff..&quot; when you have camus and are able to focus&quot;, true)
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %s&quot;, focusaff))
        end

        -- equal out the spacing on the second column
        echo((&quot; &quot;):rep(30-#focusaff))

        if nextaff and me.cadmusaffs[nextaff] then
          dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt;X&lt;153,204,204&gt;]&quot;, [[svo.me.cadmusaffs[&quot;]]..nextaff..[[&quot;] = false; svo.config.set'cadmusaffs']], &quot;Click to stop focusing for &quot;..nextaff..&quot; when you have camus&quot;, true)
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %s\n&quot;, nextaff))
        elseif nextaff then
          dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt; &lt;153,204,204&gt;]&quot;, [[svo.me.cadmusaffs[&quot;]]..nextaff..[[&quot;] = true; svo.config.set'cadmusaffs']], &quot;Click to start focusing for &quot;..nextaff..&quot; when you have camus and are able to focus&quot;, true)
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %s\n&quot;, nextaff))
        end
      end

      _G.setUnderline = underline
      echo'\n'
    end
  }},
  {lyre = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Lyre mode&quot;,
    onenabled = function () defs.keepup('lyre', 'on') svo.echof(&quot;Lyre mode &lt;0,250,0&gt;ON%s.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () defs.keepup('lyre', 'off') svo.app('off', true) svo.echof(&quot;Lyre mode &lt;250,0,0&gt;OFF%s.&quot;, svo.getDefaultColor()) end,
  }},
  {ninkharsag = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Experimental Nin'kharsag tracking&quot;,
    onenabled = function () svo.echof(&quot;Experimental Nin'kharsag tracking &lt;0,250,0&gt;enabled%s - will attempt to work out which affs Nin'kharsag hides, and diagnose otherwise.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;Experimental Nin'kharsag &lt;250,0,0&gt;disabled%s.&quot;, svo.getDefaultColor()) end,
  }},
  {shipmode = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Ship mode&quot;,
    onenabled = function () signals.newroom:connect(sk.check_shipmode, 'check shipmode on room move') svo.echof(&quot;Ship mode &lt;0,250,0&gt;enabled%s - this will allow the system to work properly with the 2-3 line prompts.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () signals.newroom:disconnect(sk.check_shipmode) svo.echof(&quot;Ship mode &lt;250,0,0&gt;disabled%s.&quot;, svo.getDefaultColor()) end,
  }},
  {lyrecmd = {
    type = 'string',
    onset = function ()
      svo.dict.lyre.physical.action = conf.lyrecmd
      svo.echof(&quot;Will use the '%s' for the Lyre mode.&quot;, tostring(conf.lyrecmd))
    end
  }},
  {commandseparator = {
    type = 'string',
    onset = function ()
      svo.echof(&quot;Will use &lt;0,250,0&gt;%s%s as the in-game command separator.&quot;, tostring(conf.commandseparator), svo.getDefaultColor())
    end
  }},
  {buckawns = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Have buckawns&quot;,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Do%s have buckawns.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Don't%s have buckawns.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.buckawns = nil end,
    installcheck = function () svo.echof(&quot;Have you got the buckawns artifact?&quot;) end
  }},
  {burrowpause = {
    type = 'boolean',
    onenabled = function () signals.gmcproominfo:connect(sk.check_burrow_pause, 'check if we need to pause for burrow') svo.echof(&quot;&lt;0,250,0&gt;Will%s auto-pause when we burrow.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () signals.gmcproominfo:disconnect(sk.check_burrow_pause) svo.echof(&quot;&lt;250,0,0&gt;Won't%s auto-pause when we burrow.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.burrowpause = true end,
  }},
  {freevault = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Vaulting doesn't take balance&quot;,
    onenabled = function ()
      if conf.freevault and svo.dict.riding.physical.balanceful_act then
        svo.dict.riding.physical.balanceless_act = true
        svo.dict.riding.physical.balanceful_act = nil
        signals.dragonform:emit()
      elseif not conf.freevault and svo.dict.riding.physical.balanceless_act then
        svo.dict.riding.physical.balanceless_act = nil
        svo.dict.riding.physical.balanceful_act = true
        signals.dragonform:emit()
      end
      svo.echof(&quot;&lt;0,250,0&gt;Do%s have balanceless vaulting.&quot;, svo.getDefaultColor())
    end,
    ondisabled = function ()
      if conf.freevault and svo.dict.riding.physical.balanceful_act then
        svo.dict.riding.physical.balanceless_act = true
        svo.dict.riding.physical.balanceful_act = nil
        signals.dragonform:emit()
      elseif not conf.freevault and svo.dict.riding.physical.balanceless_act then
        svo.dict.riding.physical.balanceless_act = nil
        svo.dict.riding.physical.balanceful_act = true
        signals.dragonform:emit()
      end
      svo.echof(&quot;&lt;250,0,0&gt;Don't%s have balanceless vaulting.&quot;, svo.getDefaultColor())
    end,
  }},
  {deathsight = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Have deathsight&quot;,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Do%s have deathsight.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Don't%s have deathsight.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.deathsight = nil end,
    installcheck = function () svo.echof(&quot;Have you got the deathsight skill?&quot;) end
  }},
  {tree = {
    type = 'boolean',
    vconfig2 = true,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo &quot;Use tree       (&quot;
      echoLink(&quot;view scenarios&quot;, &quot;svo.config.set'treefunc'&quot;, &quot;View, enable and disable scenarios in which tree will be used&quot;)
      fg(defaultcolour) echo &quot;)\n&quot;
      resetFormat()
    end,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use of tree.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use of tree.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.tree = nil end,
    installcheck = function () svo.echof(&quot;Do you have a Tree tattoo?&quot;) end
  }},
  {treebalance = {
    type = 'number',
    min = 0,
    max = 100000,
    onset = function ()
      if conf.treebalance == 0 then
        svo.echof(&quot;Will use the default settings for tree balance length.&quot;)
      else
        svo.echof(&quot;Set tree balance to be %ds - if it doesn't come back after that, I'll reset it.&quot;, conf.treebalance)
      end
    end,
    installstart = function () conf.treebalance = 0 end
  }},
  {restore = {
    type = 'boolean',
    vconfig2 = true,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo &quot;Use restore    (&quot;
      echoLink(&quot;view scenarios&quot;, &quot;svo.config.set'restorefunc'&quot;, &quot;View, enable and disable scenarios in which restore will be used&quot;)
      fg(defaultcolour) echo &quot;)\n&quot;
      resetFormat()
    end,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use Restore to cure limbs when necessary.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use Restore to cure.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.restore = nil end,
    installcheck = function () svo.echof(&quot;Can you make use of the Restore skill?&quot;) end
  }},
  {dragonheal = {
    type = 'boolean',
    vconfig2 = true,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo &quot;Use dragonheal (&quot;
      echoLink(&quot;view scenarios&quot;, &quot;svo.config.set'dragonhealfunc'&quot;, &quot;View, enable and disable scenarios in which dragonheal will be used&quot;)
      fg(defaultcolour) echo &quot;)\n&quot;
      resetFormat()
    end,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use dragonheal to cure when necessary.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use dragonheal to cure.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.dragonheal = nil end,
    installcheck = function () svo.echof(&quot;Can you make use of the Dragonheal?&quot;) end
  }},
  {breath = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Auto-enable breathing on Kai Choke&quot;,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s automatically enabling breathing against Kai Choke and to check for asthma.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use survival breathing.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.breath = nil end,
    installcheck = function () svo.echof(&quot;Can you make use of the survival breath skill?&quot;) end
  }},
  {ignoresinglebites = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Ignore single serpent bites&quot;,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s ignore all serpent bites that deliver only one affliction - most likely they'll be illusions, but may also be not against a smart Serpent who realizes that you're ignoring. So if you see them only biting, that's a warning sign that they're *really* biting, and you'd want to toggle this off &amp; diagnose.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s ignore serpent bites that deliver only one affliction.&quot;, svo.getDefaultColor()) end
  }},
  {ignoresinglestabs = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Ignore single serpent doublestabs&quot;,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s ignore all serpent doublestabs that deliver only one affliction (most likely they'll be illusions, but may also be not).&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s ignore serpent doublestabs that deliver only one affliction.&quot;, svo.getDefaultColor()) end
  }},
  {efficiency = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Have survival efficiency&quot;,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Have%s survival efficiency - tree tattoo balance will take shorter to come back.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Don't%s have efficiency - tree tattoo balance will take longer to come back.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.efficiency = nil end,
    installcheck = function () svo.echof(&quot;Do you have the survival efficiency skill?&quot;) end
  }},
  {clot = {
    type = 'boolean',
    vconfig1 = 'clot',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use clot to control bleeding.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use clot for bleeding.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.clot = nil end,
    installcheck = function () svo.echof(&quot;Can you make use of the Clot skill?&quot;) end
  }},
  {insomnia = {
    type = 'boolean',
    vconfig1 = 'insomnia',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use the Insomnia skill for insomnia.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use the Insomnia skill for insomnia, and will use cohosh instead.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.insomnia = nil end,
    installcheck = function () svo.echof(&quot;Can you make use of the Insomnia skill?&quot;) end
  }},
  {thirdeye = {
    type = 'boolean',
    vconfig1 = 'thirdeye',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use the thirdeye skill for thirdeye instead of echinacea.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use the thirdeye skill for thirdeye, and will use echinacea instead.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.thirdeye = nil end,
    installcheck = function () svo.echof(&quot;Can you make use of the Thirdeye skill?&quot;) end
  }},
  {moss = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s make use of moss/potash to heal.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s make use of moss/potash to heal.&quot;, svo.getDefaultColor()) end,
    installstart = function ()
      conf.moss = nil end,
    installcheck = function ()
      svo.echof(&quot;Do you want to make use of moss/potash to heal?&quot;) end,
  }},
  {showchanges = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s show changes in health/mana on the prompt.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s show changes in health/mana on the prompt.&quot;, svo.getDefaultColor()) end,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo(&quot;Show h/m changes (in &quot;..tostring(conf.changestype)..&quot; format).\n&quot;)
    end,
    installstart = function () conf.showchanges = nil end,
    installcheck = function () svo.echof(&quot;Do you want to show changes about your health/mana in the prompt?&quot;) end
  }},
  {changestype = {
    type = 'string',
    check = function (what)
      if what == 'full' or what == 'short' or what == 'fullpercent' or what == 'shortpercent' then return true end
    end,
    onset = function ()
      svo.echof(&quot;Will use the %s health/mana loss echoes.&quot;, conf.changestype)
    end,
    installstart = function () conf.changestype = 'shortpercent' end
  }},
  {log = {
    type = 'string',
    check = function (what)
      if what == 'off' or what == 'file' or what == 'echo' or what == 'both' then return true end
    end,
    onset = function ()
      svo.updateloggingconfig()
      if conf.log == 'off' then
        svo.echof(&quot;Logging disabled.&quot;)
      elseif conf.log == 'file' then
        if Logger then
          svo.echof(&quot;Will log to the file in %s.&quot;, (getMudletHomeDir() .. &quot;/log/svof.txt&quot;))
        else
          svo.echof(&quot;Please install the Simple logger first (https://forums.mudlet.org/viewtopic.php?f=6&amp;t=1424), then restart.&quot;)
          svo.conf.log = 'off'
          svo.updateloggingconfig()
        end
      elseif conf.log == 'echo' then
        svo.echof(&quot;Will log to your screen.&quot;)
      else
        svo.echof(&quot;Will log to both screen and file in %s.&quot;, (getMudletHomeDir() .. &quot;/log/svof.txt&quot;))
      end
    end,
    installstart = function () conf.log = 'off' end
  }},
  {showbaltimes = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s show balance times for balance, equilibrium and herbs.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s show balance times.&quot;, svo.getDefaultColor()) end,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo &quot;Show how long balances took.\n&quot;
    end,
    installstart = function () conf.showbaltimes = true end,
    -- installcheck = function () svo.echof(&quot;Do you want to show how long your balances take?&quot;) end
  }},
  {showafftimes = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s show how long afflictions took to cure.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s show times for curing afflictions.&quot;, svo.getDefaultColor()) end,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo &quot;Show how quickly afflictions are cured.\n&quot;
    end,
    installstart = function () conf.showafftimes = true end,
  }},
  {doubledo = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s do actions twice under stupidity.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s do actions twice under stupidity.&quot;, svo.getDefaultColor()) end,
    onshow = &quot;Double do actions in stupidity&quot;,
    vconfig2 = true
  }},
  {repeatcmd = {
    type = 'number',
    min = 0,
    max = 100000,
    onset = function ()
      if conf.repeatcmd == 0 then svo.echof(&quot;Will not repeat commands.&quot;)
      elseif conf.repeatcmd == 1 then svo.echof(&quot;Will repeat each command one more time.&quot;)
      else svo.echof(&quot;Will repeat each command %d more times.&quot;, conf.repeatcmd)
    end end,
    installstart = function () conf.repeatcmd = 0 end
  }},
  {singleprompt = {
    type = 'boolean',
    vconfig2 = true,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      if conf.singleprompt then
        echo(string.format(&quot;Use a singleprompt%s&quot;, (conf.singlepromptblank and ' (with a blank line)' or '')))
      else
        echo(&quot;Not using a singleprompt&quot;)
      end
      echo'.\n'
      resetFormat()
    end,
    onenabled = function ()
      svo.echof(&quot;&lt;0,250,0&gt;Enabled%s the use of a single prompt.&quot;, svo.getDefaultColor())

      sk.enable_single_prompt()
    end,
    ondisabled = function ()
      svo.echof(&quot;&lt;250,0,0&gt;Disabled%s the use a single prompt.&quot;, svo.getDefaultColor())
      if svo.moveprompt then killTrigger(svo.moveprompt) end
      if svo.bottomprompt then svo.bottomprompt:hide(); svo.bottomprompt.reposition = function() end end
      setBorderBottom(0)
      svo.bottom_border = 0
    end
  }},
  {singlepromptsize = {
    type = 'number',
    min = 0,
    max = 100,
    onset = function ()
      if svo.bottomprompt then
        svo.bottomprompt:setFontSize(conf.singlepromptsize)
        if conf.singleprompt then
          -- svo.config.set('singleprompt', 'off', false)
          -- svo.config.set('singleprompt', 'on', false)

          if svo.moveprompt then killTrigger(svo.moveprompt) end
          if svo.bottomprompt then svo.bottomprompt:hide(); svo.bottomprompt.reposition = function() end end
          setBorderBottom(0)
          svo.bottom_border = 0

          sk.enable_single_prompt()
          clearWindow(&quot;svo.bottomprompt&quot;)
        end
      end

      svo.echof(&quot;Will be displaying the font at size %d.&quot;, conf.singlepromptsize)
    end
  }},
  {singlepromptblank = {
    type = 'boolean',
    onenabled = function ()
      svo.echof(&quot;&lt;0,250,0&gt;Enabled%s the single prompt to show a blank line for the prompt.&quot;, svo.getDefaultColor())
      svo.config.set('singlepromptkeep', false, false)
    end,
    ondisabled = function ()
      svo.echof(&quot;&lt;250,0,0&gt;Disabled%s the blank line, will be deleting the prompt instead.&quot;, svo.getDefaultColor())
    end
  }},
  {singlepromptkeep = {
    type = 'boolean',
    onenabled = function ()
      svo.echof(&quot;&lt;0,250,0&gt;Enabled%s the single prompt to keep the prompt%s.&quot;, svo.getDefaultColor(), (conf.singleprompt and '' or ' (when vconfig singleprompt is on)'))
      svo.config.set('singlepromptblank', false, false)
    end,
    ondisabled = function ()
      svo.echof(&quot;&lt;250,0,0&gt;Disabled%s keeping the prompt, will be removing it.&quot;, svo.getDefaultColor())
    end
  }},
  {waitherbai = {
    type = 'boolean',
    vconfig2 = true,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s pause eating of herbs while checking herb-cured illusions.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s pause eating of herbs while checking herb-cured illusions.&quot;, svo.getDefaultColor()) end,
    onshow = function (defaultcolour)
      fg(defaultcolour) echo (&quot;Don't eat while checking herb-cured illusions.\n&quot;)
    end,
    installstart = function () conf.waitherbai = true end
  }},
  {waitparalysisai = {
    type = 'boolean',
    vconfig2 = true,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s wait for balance/eq to confirm a suspect paralysis instead of accepting it - so if we get a suspect paralysis while off bal/eq, we'll cure other things and check the paralysis when we can.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s wait for balance/eq to confirm a possible paralysis - if we get one off bal/eq, we'll eat bloodroot asap. Otherwise if we have bal/eq, we'll check first.&quot;, svo.getDefaultColor()) end,
    onshow = function (defaultcolour)
      fg(defaultcolour) echo (&quot;Wait for balance/eq to check suspicious paralysis.\n&quot;)
    end,
    installstart = function () conf.waitparalysisai = false end
  }},
  {commandecho = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s show commands the system is doing.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s show commands the system is doing.&quot;, svo.getDefaultColor()) end,
    onshow = function (defaultcolour)
      fg(defaultcolour) echo (&quot;Show system commands (&quot;..tostring(conf.commandechotype)..&quot;)\n&quot;)
    end,
    installstart = function () conf.commandecho = true end
  }},
  {commandechotype = {
    type = 'string',
    check = function (what)
      if what == 'plain' or what == 'fancy' or what == 'fancynewline' then return true end
    end,
    onset = function ()
      svo.echof(&quot;Will use the %s command echoes.&quot;, conf.commandechotype)
    end,
    installstart = function () conf.commandechotype = 'fancy' end
  }},
  {curemethod = {
    type = 'string',
    check = function (what)
      if table.contains({'conconly', 'transonly', 'preferconc', 'prefertrans', 'prefercustom'}, what) then return true end
    end,
    onset = function ()
      signals.curemethodchanged:emit()
      if conf.curemethod == 'conconly' then
        svo.echof(&quot;Will only use the usual Concoctions herbs/potions/salve for curing.&quot;)
      elseif conf.curemethod == 'transonly' then
        svo.echof(&quot;Will only use Transmutation minerals for curing.&quot;)
      elseif conf.curemethod == 'preferconc' then
        svo.echof(&quot;Will use Concoctions and Transmutation cures as you have them, but prefer Concoctions cures.&quot;)
      elseif conf.curemethod == 'prefertrans' then
        svo.echof(&quot;Will use Concoctions and Transmutation cures as you have them, but prefer Transmutation cures.&quot;)
      elseif conf.curemethod == 'prefercustom' then
        svo.echof(&quot;Will use your preferred Concoctions or Transmutation cures, falling back to the alternatives if you run out. See 'vshow curelist' for the adjustment menu.&quot;)
      else
        svo.echof(&quot;Will use Concoctions and Transmutation cures as you have them.&quot;)
      end
    end,
    -- onshow: done in vshow
    installstart = function () conf.curemethod = nil end,
    installcheck = function () svo.echof(&quot;Would you like to use Concoctions or Transmutation cures?\n\n  You can answer with 'conconly' - which'll mean that you'd like to use Concoctions cures only, 'transonly' - which'll mean that you'd like to use Transmutation cures only, 'preferconc' - prefer Concoctions cures, but fall back to Transmutation cures should you run out, and lastly, 'prefertrans' - prefer Transmutation cures, but fall back to Concoctions should you run out.&quot;) end
  }},
  {customprompt = {
    type = 'string',
    vconfig2 = true,
    onset = function ()
      if conf.customprompt == 'none' or conf.customprompt == 'off' or conf.customprompt == 'of' then
        conf.customprompt = false
        svo.echof(&quot;Custom prompt disabled.&quot;)
      elseif conf.customprompt == 'on' then
        if conf.oldcustomprompt ~= 'off' and conf.oldcustomprompt ~= 'of' then
          conf.customprompt = conf.oldcustomprompt
          svo.cp.makefunction()
          svo.echof(&quot;Custom prompt restored.&quot;)
          if svo.innews then
            svo.innews = false
            svo.echof(&quot;Disabled the news status and re-enabled the prompt.&quot;)
          end
        else
          svo.echof(&quot;You haven't set a custom prompt before, so we can't revert back to it. Set it with 'vconfig customprompt &lt;prompt line&gt;.&quot;)
          conf.customprompt = false
        end
      else
        svo.cp.makefunction()
        conf.oldcustomprompt = conf.customprompt
        svo.echof(&quot;Custom prompt enabled and set; will replace the standard one with yours now.&quot;)
      end
    end,
    installstart = function () conf.customprompt = nil; conf.setdefaultprompt = nil end
  }},
  {relight = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s auto-relight non-artifact pipes.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s auto-relight pipes.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.relight = true end,
    installcheck = function () svo.echof(&quot;Should we keep non-artifact pipes lit?&quot;) end
  }},
  {gagrelight = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s hide relighting of pipes.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s hide relighting pipes.&quot;, svo.getDefaultColor()) end,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo(string.format(&quot;Re-light pipes quietly%s.\n&quot;, not conf.relight and &quot; (when relighting is on)&quot; or &quot;&quot;))
    end,
    installstart = function () conf.gagrelight = true end,
    installcheck = function () svo.echof(&quot;Should we hide it when pipes are relit (it can get spammy)?&quot;) end
  }},
  {gagotherbreath = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s hide others breathing.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s hide others breathing.&quot;, svo.getDefaultColor()) end,
    onshow = &quot;Completely gag others breathing&quot;,
    installstart = function () conf.gagotherbreath = true end
  }},
  {gagbreath = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s hide the breathing defence.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s hide the breathing defence.&quot;, svo.getDefaultColor()) end,
    onshow = &quot;Completely gag breathing&quot;,
    installstart = function () conf.gagbreath = true end,
    -- installcheck = function () svo.echof(&quot;Should we hide it when you use the breathing defence?&quot;) end
  }},
  {gageqbal = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s hide the 'you're off eq/bal' messages.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s hide the 'you're off eq/bal' messages.&quot;, svo.getDefaultColor()) end,
    onshow = &quot;Completely gag off eq/bal messages&quot;,
    installstart = function () conf.gageqbal = true end,
    installcheck = function () svo.echof(&quot;Should we hide the messages you get when you try and spam something off balance or equilibrium?&quot;) end
  }},
  {gagserverside = {
    type = 'boolean',
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo(&quot;Gag Svof's use of serverside priorities/toggles.\n&quot;)
    end,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s hide info lines from the serverside curing system.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s hide info lines from the serverside curing system.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.gagserverside = true end,
  }},
  {gagservercuring = {
    type = 'boolean',
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo(&quot;Gag serverside [CURING] messages.\n&quot;)
    end,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s hide serverside's [CURING] messages.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s hide serverside's [CURING] messages.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.gagservercuring = false end,
  }},
  {ccto = {
    type = 'string',
    onset = function ()
      conf.ccto = conf.ccto:lower()
      if conf.ccto == 'pt' or conf.ccto == 'party' then
        svo.echof(&quot;Will report stuff to party.&quot;)
      elseif conf.ccto == 'clt' then
        svo.echof(&quot;Will report stuff to the current selected clan.&quot;)
      elseif conf.ccto:find(&quot;^tell %w+&quot;) then
        svo.echof(&quot;Will report stuff to %s via tells.&quot;, conf.ccto:match(&quot;^tell (%w+)&quot;):title())
      elseif conf.ccto == 'ot' then
        svo.echof(&quot;Will report stuff to the Order channel.&quot;)
      elseif conf.ccto == 'team' then
        svo.echof(&quot;Will report stuff to the team channel.&quot;)
      elseif conf.ccto == 'army' then
        svo.echof(&quot;Will report stuff to the army channel.&quot;)
      elseif conf.ccto == 'echo' then
        svo.echof(&quot;Will echo ccto stuff back to you, instead of announcing it anywhere.&quot;)
      else
        svo.echof(&quot;Will report stuff to the %s clan.&quot;, conf.ccto)
      end
    end,
    vconfig2 = true,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo(string.format(&quot;Reporting stuff to %s.\n&quot;, tostring(conf.ccto)))
    end,
    installstart = function ()
      conf.ccto = 'pt' end
  }},
  {mosshealth = {
    type = 'number',
    percentage = true,
    min = 0,
    max = 100,
    onset = function () signals.changed_maxhealth:emit() svo.echof(&quot;Will eat moss/potash for health if it falls below %d%% (%dh).&quot;, conf.mosshealth, sys.mosshealth) end,
    installstart = function () conf.mosshealth = nil end,
    installcheck = function () svo.echof(&quot;At what %% of health do you want to start using moss/potash to heal, if enabled?&quot;) end
  }},
  {pagelength = {
    type = 'number',
    vconfig2string = true,
    min = 1,
    max = 250,
    onset = function () svo.echof(&quot;Will reset your pagelength to %d after changing it.&quot;, conf.pagelength) end,
    installstart = function () conf.pagelength = 20 end,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo(&quot;Default pagelength to reset to is &quot;) fg('a_cyan')
      echoLink(tostring(conf.pagelength), 'printCmdLine&quot;vconfig pagelength &quot;',
      &quot;Set the default pagelength to reset to after changing it&quot;,
       true)
      cecho(&quot;&lt;a_grey&gt; lines.\n&quot;)
    end,
  }},
  {herbstatsize = {
    type = 'number',
    min = 1,
    max = 100,
    onset = function () rift.update_riftlabel(); svo.echof(&quot;Set the font size in the herbstat window to %d.&quot;, conf.herbstatsize) end,
    installstart = function () conf.herbstatsize = 9 end
  }},
  {mossmana = {
    type = 'number',
    percentage = true,
    min = 0,
    max = 100,
    onset = function () signals.changed_maxmana:emit() svo.echof(&quot;Will eat moss/potash for mana if it falls below %d%% (%dm).&quot;, conf.mossmana, sys.mossmana) end,
    installstart = function () conf.mossmana = nil end,
    installcheck = function () svo.echof(&quot;At what %% of mana do you want to start using moss/potash to heal, if enabled?&quot;) end
  }},
  {siphealth = {
    type = 'number',
    percentage = true,
    min = 0,
    max = 100,
    onset = function () signals.changed_maxhealth:emit() svo.echof(&quot;Will start sipping health if it falls below %d%% (%dh).&quot;, conf.siphealth, sys.siphealth) end,
    installstart = function () conf.siphealth = nil end,
    installcheck = function () svo.echof(&quot;At what %% of health do you want to start sipping health?&quot;) end
  }},
  {sipmana = {
    type = 'number',
    percentage = true,
    min = 0,
    max = 100,
    onset = function () signals.changed_maxmana:emit() svo.echof(&quot;Will start sipping mana if it falls below %d%% (%dm).&quot;, conf.sipmana, sys.sipmana) end,
    installstart = function () conf.sipmana = nil end,
    installcheck = function () svo.echof(&quot;At what %% of mana do you want to start sipping mana?&quot;) end
  }},
  {refillat = {
    type = 'number',
    min = 0,
    max = 30,
    onset = function () svo.echof(&quot;Will start refilling pipes when they're at %d puffs.&quot;, conf.refillat) end,
    installstart = function () conf.refillat = 1 end
  }},
  {manause = {
    type = 'number',
    percentage = true,
    min = 0,
    max = 100,
    onset = function () signals.changed_maxmana:emit() svo.echof(&quot;Will use mana-draining skills if only above %d%% mana (%d).&quot;, conf.manause, sys.manause) end,
    installstart = function () conf.manause = 35 end,
    installcheck = function () svo.echof(&quot;Above which %% of mana is the system allowed to use mana skills? Like focus, insomnia, etc. If you got below this %%, it'll revert to normal cures.&quot;) end
  }},
  {lag = {
    type = 'number',
    min = 0,
    max = 4,
    onset = function () cnrl.update_wait() svo.echof(svo.wait_tbl[conf.lag].m) end,
    installstart = function () conf.lag = 0 end
  }},
  {unknownfocus = {
    type = 'number',
    min = 0,
    onset = function () svo.echof(&quot;Will diagnose after we have %d or more unknown, but focusable afflictions.&quot;, conf.unknownfocus) end,
    installstart = function ()
      if svo.haveskillset('healing') then
        conf.unknownfocus = 1
      else
        conf.unknownfocus = 2
      end
    end,
  }},
  {unknownany = {
    type = 'number',
    min = 0,
    onset = function () svo.echof(&quot;Will diagnose after we have %d or more unknown affs.&quot;, conf.unknownany) end,
    installstart = function ()
      if svo.haveskillset('healing') then
        conf.unknownany = 1
      else
        conf.unknownany = 2
      end
    end,
  }},
  {bleedamount = {
    type = 'number',
    vconfig2string = true,
    min = 0,
    onset = function () svo.echof(&quot;Will start clotting if bleeding for more than %d health.&quot;, conf.bleedamount) end,
    installstart = function () conf.bleedamount = 60 end,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo(&quot;Will clot if bleeding for over &quot;) fg('a_cyan')
      echoLink(tostring(conf.bleedamount), 'printCmdLine&quot;vconfig bleedamount &quot;', &quot;Set the # of health bleeding above which the system will start clotting&quot;, true)
      fg(defaultcolour) echo(&quot; health or &quot;) fg('a_cyan')
      echoLink(tostring(conf.manableedamount), 'printCmdLine&quot;vconfig manableedamount &quot;', &quot;Set the # of mana bleeding above which the system will start clotting&quot;, true)
      fg(defaultcolour) echo(&quot; mana (and over &quot;) fg('a_cyan')
      echoLink(tostring(conf.corruptedhealthmin)..&quot;%&quot;, 'printCmdLine&quot;vconfig corruptedhealthmin &quot;', &quot;Set the % of health below which the system will not clot your mana bleeding (due tp Alchemist corruption, which makes bleeding lose mana and clotting it will use health)&quot;, true)
      fg(defaultcolour) echo(&quot; health)\n&quot;)
    end,
  }},
  {manableedamount = {
    type = 'number',
    vconfig2string = true,
    min = 0,
    onset = function () svo.echof(&quot;Will start clotting if bleeding for more than %d mana.&quot;, conf.manableedamount) end,
    installstart = function () conf.manableedamount = 60 end,
  }},
  {corruptedhealthmin = {
    type = 'number',
    percentage = true,
    min = 0,
    max = 100,
    onset = function () signals.changed_maxhealth:emit() svo.echof(&quot;Will not clot your mana bleeding if your health falls below %d%% (%dh).&quot;, conf.corruptedhealthmin, sys.corruptedhealthmin) end,
    installstart = function () conf.corruptedhealthmin = 70 end
  }},
  {valerianid = {
    type = 'number',
    min = 0,
    installstart = function () conf.valerianid = nil; pipes.valerian.id = 0 end,
    installcheck = function () svo.echof(&quot;What pipe should we use for valerian? Answer with the ID, please.&quot;) end,
    onset = function ()
      pipes.valerian.id = tonumber(conf.valerianid)
      svo.echof(&quot;Set the valerian pipe id to %d.&quot;, pipes.valerian.id) end,
  }},
  {skullcapid = {
    type = 'number',
    min = 0,
    installstart = function () conf.skullcapid = nil; pipes.skullcap.id = 0 end,
    installcheck = function () svo.echof(&quot;What pipe should we use for skullcap? Answer with the ID, please.&quot;) end,
    onset = function ()
      pipes.skullcap.id = tonumber(conf.skullcapid)
      svo.echof(&quot;Set the skullcap pipe id to %d.&quot;, pipes.skullcap.id) end,
  }},
  {treefunc = {
    type = 'custom',
    onmenu = function ()
      local underline = setUnderline; _G.setUnderline = function () end

      svo.echof(&quot;Scenarios to use tree in:&quot;)
      local sortednames = svo.keystolist(svo.tree)
      table.sort(sortednames)
      local longestfname = svo.longeststring(sortednames)

      for i = 1, #sortednames do
        local fname = sortednames[i]
        local t = svo.tree[fname]

        if not me.disabledtreefunc[fname] then
          if dechoLink then
            dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt;X&lt;153,204,204&gt;]&quot;, [[svo.me.disabledtreefunc[&quot;]]..fname..[[&quot;] = true; svo.config.set'treefunc']], &quot;Disable &quot;..fname, true)
          else
            decho(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt;X&lt;153,204,204&gt;]&quot;)
          end
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %-&quot;..longestfname..&quot;s - %s\n&quot;, fname, tostring(t.desc)))
        else
          if dechoLink then
            dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt; &lt;153,204,204&gt;]&quot;, [[svo.me.disabledtreefunc[&quot;]]..fname..[[&quot;] = false; svo.config.set'treefunc']], &quot;Enable &quot;..fname, true)
          else
            decho(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt; &lt;153,204,204&gt;]&quot;)
          end
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %-&quot;..longestfname..&quot;s - %s\n&quot;, fname, tostring(t.desc)))
        end
      end

      _G.setUnderline = underline

      svo.showprompt()
    end
  }},
  {restorefunc = {
    type = 'custom',
    onmenu = function ()
      local underline = setUnderline; _G.setUnderline = function () end

      svo.echof(&quot;Scenarios to use restore in:&quot;)
      local sortednames = svo.keystolist(svo.restore)
      table.sort(sortednames)
      local longestfname = svo.longeststring(sortednames)

      for i = 1, #sortednames do
        local fname = sortednames[i]
        local t = svo.restore[fname]

        if not me.disabledrestorefunc[fname] then
          if dechoLink then
            dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt;X&lt;153,204,204&gt;]&quot;, [[svo.me.disabledrestorefunc[&quot;]]..fname..[[&quot;] = true; svo.config.set'restorefunc']], &quot;Disable &quot;..fname, true)
          else
            decho(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt;X&lt;153,204,204&gt;]&quot;)
          end
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %-&quot;..longestfname..&quot;s - %s\n&quot;, fname, tostring(t.desc)))
        else
          if dechoLink then
            dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt; &lt;153,204,204&gt;]&quot;, [[svo.me.disabledrestorefunc[&quot;]]..fname..[[&quot;] = false; svo.config.set'restorefunc']], &quot;Enable &quot;..fname, true)
          else
            decho(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt; &lt;153,204,204&gt;]&quot;)
          end
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %-&quot;..longestfname..&quot;s - %s\n&quot;, fname, tostring(t.desc)))
        end
      end

      _G.setUnderline = underline
      svo.showprompt()
    end
  }},
  {dragonhealfunc = {
    type = 'custom',
    onmenu = function ()
      local underline = setUnderline; _G.setUnderline = function () end

      svo.echof(&quot;Scenarios to use dragonheal in:&quot;)

      local sortednames = svo.keystolist(svo.dragonheal)
      table.sort(sortednames)
      local longestfname = svo.longeststring(sortednames)

      for i = 1, #sortednames do
        local fname = sortednames[i]
        local t = svo.dragonheal[fname]
        if not me.disableddragonhealfunc[fname] then
          if dechoLink then
            dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt;X&lt;153,204,204&gt;]&quot;, [[svo.me.disableddragonhealfunc[&quot;]]..fname..[[&quot;] = true; svo.config.set'dragonhealfunc']], &quot;Disable &quot;..fname, true)
          else
            decho(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt;X&lt;153,204,204&gt;]&quot;)
          end
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %-&quot;..longestfname..&quot;s - %s\n&quot;, fname, tostring(t.desc)))
        else
          if dechoLink then
            dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt; &lt;153,204,204&gt;]&quot;, [[svo.me.disableddragonhealfunc[&quot;]]..fname..[[&quot;] = false; svo.config.set'dragonhealfunc']], &quot;Enable &quot;..fname, true)
          else
            decho(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt; &lt;153,204,204&gt;]&quot;)
          end
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %-&quot;..longestfname..&quot;s - %s\n&quot;, fname, tostring(t.desc)))
        end
      end

      _G.setUnderline = underline
    end
  }},
  {elmid = {
    type = 'number',
    min = 0,
    installstart = function () conf.elmid = nil; pipes.elm.id = 0 end,
    installcheck = function () svo.echof(&quot;What pipe should we use for elm? Answer with the ID, please.&quot;) end,
    onset = function ()
      pipes.elm.id = tonumber(conf.elmid)
      svo.echof(&quot;Set the elm pipe id to %d.&quot;, pipes.elm.id) end,
  }},
  {eventaffs = {
    type = 'boolean',
    -- vconfig2 = true,
    -- onshow = &quot;Raise Mudlet events on each affliction&quot;,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s raise Mudlet events for gained/lost afflictions.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () conf.eventaffs = true svo.echof(&quot;eventaffs are on by default now - and this option is depreciated; there's no point in turning it off.&quot;) end,
    installstart = function () conf.eventaffs = true end
  }},
  {gagclot = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Gag clotting&quot;,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s gag the clotting spam.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s gag the clotting spam.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.gagclot = true end,
  }},
  {autorewield = {
    type = 'boolean',
    vconfig2 = true,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      if next(gmcp) then
        echo &quot;Rewield forced unwield.\n&quot;
      else
        echo &quot;Rewield forced unwield (requires GMCP)\n&quot;
      end
    end,
    onenabled = function ()
      if sys.enabledgmcp then
        svo.echof(&quot;&lt;0,250,0&gt;Will%s automatically rewield items that we've been forced to unwield.&quot;, svo.getDefaultColor())
      else
        svo.echof(&quot;&lt;0,250,0&gt;Will%s automatically rewield items that we've been forced to unwield (requires GMCP being enabled).&quot;, svo.getDefaultColor())
      end
    end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s automatically rewield things.&quot;, svo.getDefaultColor()) end
  }},
  {preclot = {
    type = 'boolean',
    vconfig2 = true,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      if conf.preclot and conf.clot then
        echo &quot;Will preclot bleeding.\n&quot;
      elseif conf.preclot and not conf.clot then
        echo &quot;Will do preclotting (when clotting is enabled).\n&quot;
      else
        echo &quot;Won't preclot bleeding.\n&quot;
      end
    end,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s do preclotting (saves health at expense of willpower).&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s do preclotting (saves willpwer at expense of health).&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.preclot = true end,
    installcheck = function () svo.echof(&quot;Should the system do preclotting? Doing so will save you from some bleeding damage, at the cost of more willpower.&quot;) end
  }},
  {org = {
    type = 'string',
    check = function (what)
      if svo.contains({'Ashtan', 'Hashan', 'Mhaldor', 'Targossas', 'Cyrene', 'Eleusis', 'None', 'Rogue'}, what:title()) then return true end
    end,
    onset = function ()
      if conf.org == 'none' or conf.org == 'rogue' then
        conf.org = 'none'
        -- reset echotype so the org change can have effect on echoes
        conf.echotype = nil
        signals.orgchanged:emit()
        svo.echof(&quot;Will use the default plain echoes.&quot;)
      else
        conf.org = string.title(conf.org)
        -- reset echotype so the org change can have effect on echoes
        conf.echotype = nil

        -- if NameDB is present, set own city to be allied - in case you weren't a citizen of this city before and it was an enemy to you
        if ndb and ndb.conf and type(ndb.conf.citypolitics) == 'table' then
          ndb.conf.citypolitics[conf.org] = 'ally'
        end

        signals.orgchanged:emit()
        svo.echof(&quot;Will use %s-styled echoes.&quot;, conf.org)
      end

    end,
    installstart = function ()
      conf.org = nil end,
    installcheck = function ()
      svo.echof(&quot;What city do you live in? Select from: Ashtan, Hashan, Mhaldor, Targossas, Cyrene, Eleusis or none.&quot;) end
  }},
  {slowcurecolour = {
    type = 'string',
    vconfig2string = true,
    check = function (what)
      if color_table[what] or what == 'off' then return true end
    end,
    onset = function ()
      local r,g,b = unpack(color_table[conf.slowcurecolour])
      svo.echof(&quot;Will colour your actions in &lt;%d,%d,%d&gt;%s%s when in aeon or retardation.&quot;, r,g,b, conf.slowcurecolour, svo.getDefaultColor())
    end,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo(&quot;Colouring aeon/retardation curing lines in &quot;) fg(conf.slowcurecolour)
      echoLink(tostring(conf.slowcurecolour), 'printCmdLine&quot;vconfig slowcurecolour &quot;',
      &quot;Set which colour you'd like curing lines to show as in aeon / retardation&quot;,
       true)
      cecho(&quot;&lt;a_grey&gt;.\n&quot;)
    end,
    installstart = function ()
      conf.slowcurecolour = 'blue' end
  }},
  {hinderpausecolour = {
    type = 'string',
    vconfig2string = true,
    check = function (what)
      if color_table[what] or what == 'off' then return true end
    end,
    onset = function ()
      local r,g,b = unpack(color_table[conf.hinderpausecolour])
      svo.echof(&quot;Will colour hindering afflictions in &lt;%d,%d,%d&gt;%s%s when paused.&quot;, r,g,b, conf.hinderpausecolour, svo.getDefaultColor())
    end,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo(&quot;Colouring hindering lines in &quot;) fg(conf.hinderpausecolour)
      echoLink(tostring(conf.hinderpausecolour), 'printCmdLine&quot;vconfig hinderpausecolour &quot;',
      &quot;Set which colour you'd like to see hindering lines in when paused&quot;,
       true)
      cecho(&quot;&lt;a_grey&gt; when paused.\n&quot;)
    end,
    installstart = function ()
      conf.hinderpausecolour = 'orange' end
  }},
  {autoreject = {
    type = 'string',
    check = function (what)
      if svo.contains({'black', 'white', 'off', 'on'}, what:sub(1,5):lower()) then sk.oldautoreject = conf.autoreject return true end
    end,
    onset = function ()
      conf.autoreject = string.lower(conf.autoreject):sub(1,5)

      if conf.autoreject == 'off' then
        svo.ignore.lovers = true
        conf.autoreject = sk.oldautoreject; sk.oldautoreject = nil
        svo.echof(&quot;Disabled autoreject completely (ie, will ignore curing lovers aff).&quot;)
      elseif conf.autoreject == 'on' then
        svo.ignore.lovers = nil
        conf.autoreject = sk.oldautoreject; sk.oldautoreject = nil
        svo.echof(&quot;Enabled autoreject (won't ignore curing lovers anymore) - right now it's in %slist mode.&quot;, conf.autoreject)
      elseif conf.autoreject == 'white' then
        local c = table.size(me.lustlist)
        svo.echof(&quot;Autoreject has been set to whitelist mode - that means we will be automatically rejecting everybody, except those on the lust list (%d %s).&quot;, c, (c == 1 and 'person' or 'people'))
      elseif conf.autoreject == 'black' then
        local c = table.size(me.lustlist)
        svo.echof(&quot;Autoreject has been set to blacklist mode - that means we will only be rejecting people on the lust list (%d %s).&quot;, c, (c == 1 and 'person' or 'people'))
      else
        svo.echof(&quot;... how did you manage to set the option to '%s'?&quot;, tostring(conf.autoreject))
      end
    end,
    installstart = function ()
      conf.autoreject = 'white' end
  }},
  {lustlist = {
    type = 'string',
    check = function(what)
      if what:find(&quot;^%w+$&quot;) then return true end
    end,
    onset = function ()
      local name = string.title(conf.lustlist)
      if not me.lustlist[name] then me.lustlist[name] = true else me.lustlist[name] = nil end

      if me.lustlist[name] then
        if conf.autoreject == 'black' then
          svo.echof(&quot;Added %s to the lust list (so we will be autorejecting them).&quot;, name)
        elseif conf.autoreject == 'white' then
          svo.echof(&quot;Added %s to the lust list (so we won't be autorejecting them).&quot;, name)
        else
          svo.echof(&quot;Added %s to the lust list.&quot;, name)
        end
      else
        if conf.autoreject == 'black' then
          svo.echof(&quot;Removed %s from the lust list (so we will not be autorejecting them now).&quot;, name)
        elseif conf.autoreject == 'white' then
          svo.echof(&quot;Removed %s from the lust list (so we will be autorejecting them).&quot;, name)
        else
          svo.echof(&quot;Removed %s from the lust list.&quot;, name)
        end
      end
    end
  }},
  {autowrithe = {
    type = 'string',
    check = function (what)
      if svo.contains({'black', 'white', 'off', 'on'}, what:sub(1,5):lower()) then sk.oldautowrithe = conf.autowrithe return true end
    end,
    onset = function ()
      conf.autowrithe = string.lower(conf.autowrithe):sub(1,5)

      if conf.autowrithe == 'off' then
        svo.ignore.hoisted = true
        conf.autowrithe = sk.oldautowrithe; sk.oldautowrithe = nil
        svo.echof(&quot;Disabled autowrithe completely (ie, will ignore curing hoisted aff).&quot;)
      elseif conf.autowrithe == 'on' then
        svo.ignore.hoisted = nil
        conf.autowrithe = sk.oldautowrithe; sk.oldautowrithe = nil
        svo.echof(&quot;Enabled autowrithe (won't ignore curing hoisted anymore) - right now it's in %slist mode.&quot;, conf.autowrithe)
      elseif conf.autowrithe == 'white' then
        local c = table.size(me.hoistlist)
        svo.echof(&quot;Autowrithe has been set to whitelist mode - that means we will be automatically writhing against everybody, except those on the hoist list (%d %s).&quot;, c, (c == 1 and 'person' or 'people'))
      elseif conf.autowrithe == 'black' then
        local c = table.size(me.hoistlist)
        svo.echof(&quot;Autowrithe has been set to blacklist mode - that means we will only be writhing against people on the hoist list (%d %s).&quot;, c, (c == 1 and 'person' or 'people'))
      else
        svo.echof(&quot;... how did you manage to set the option to '%s'?&quot;, tostring(conf.autowrithe))
      end
    end,
    installstart = function ()
      conf.autowrithe = 'white' end
  }},
  {hoistlist = {
    type = 'string',
    check = function(what)
      if what:find(&quot;^%w+$&quot;) then return true end
    end,
    onset = function ()
      local name = string.title(conf.hoistlist)
      if not me.hoistlist[name] then me.hoistlist[name] = true else me.hoistlist[name] = nil end

      if me.hoistlist[name] then
        if conf.autowrithe == 'black' then
          svo.echof(&quot;Added %s to the hoist list (so we will autowrithe against them).&quot;, name)
        elseif conf.autowrithe == 'white' then
          svo.echof(&quot;Added %s to the hoist list (so we won't autowrithe against them).&quot;, name)
        else
          svo.echof(&quot;Added %s to the hoist list.&quot;, name)
        end
      else
        if conf.autowrithe == 'black' then
          svo.echof(&quot;Removed %s from the hoist list (so we will not autowrithe against them now).&quot;, name)
        elseif conf.autowrithe == 'white' then
          svo.echof(&quot;Removed %s from the hoist list (so we will autowrithe against them).&quot;, name)
        else
          svo.echof(&quot;Removed %s from the hoist list.&quot;, name)
        end
      end
    end
  }},
  {echotype = {
    type = 'string',
    check = function (what)
      if svo.echos[what:title()] or svo.echos[what] then return true end
    end,
    onset = function ()
      conf.echotype = svo.echos[conf.echotype:title()] and conf.echotype:title() or conf.echotype
      signals.orgchanged:emit()
      svo.echof(&quot;This is how system messages will look like now :)&quot;)
    end,
    vconfig2 = true,
    installstart = function ()
      conf.org = nil end,
  }},
  {dragonflex = {
    type = 'boolean',
    vconfig1 = 'dragonflex',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use dragonflex when we have balance.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use dragonflex.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.dragonflex = nil end,
    installcheck = function () svo.echof(&quot;Can you make use of the Dragonflex skill?&quot;) end
  }},
  {assumestats = {
    type = 'number',
    vconfig2 = true,
    min = 0,
    max = 100,
    onset = function () svo.echof(&quot;Will assume we're at %d%% of health and mana when under blackout or recklessness.&quot;, conf.assumestats) end,
    installstart = function () conf.assumestats = 15 end,
  }},
  {healthaffsabove = {
    type = 'number',
    vconfig2 = true,
    min = 0,
    max = 100,
    onset = function () svo.echof(&quot;Will apply health to cure afflictions only when above %d%% health.&quot;, conf.healthaffsabove) end,
    installstart = function () conf.healthaffsabove = 70 end,
  }},
  {warningtype = {
    type = 'string',
    vconfig2 = true,
    check = function (what)
      if svo.contains({'all', 'prompt', 'none', 'right', 'off'}, what) then return true end
    end,
    onset = function ()
      if conf.warningtype == 'none' or conf.warningtype == 'off' then
        conf.warningtype = false
        svo.echof(&quot;Disabled extended instakill warnings.&quot;)
      elseif conf.warningtype == 'all' then
        svo.echof(&quot;Will prefix instakill warnings to all lines.&quot;)
        if math.random(1, 10) == 1 then svo.echof(&quot;(muahah(&quot;) end
      elseif conf.warningtype == 'prompt' then
        svo.echof(&quot;Will prefix instakill warnings only to prompt lines.&quot;)
      elseif conf.warningtype == 'right' then
        svo.echof(&quot;Will place instakill warnings on all lines, aligned on the right side.&quot;)
      end
    end,
    installstart = function ()
      conf.warningtype = 'right' end,
  }},
  {burstmode = {
    type = 'string',
    vconfig2string = true,
    check = function (what)
      if defdefup[what:lower()] then return true end
    end,
    onshow = function (defaultcolour)
      local tooltip

      if svo.haveskillset('necromancy') then
        tooltip = &quot;Set the defences mode system should autoswitch to upon starburst/soulcage&quot;
      elseif svo.haveskillset('occultism') then
        tooltip = &quot;Set the defences mode system should autoswitch to upon starburst/transmog&quot;
      else
        tooltip = &quot;Set the defences mode system should autoswitch to upon starburst&quot;
      end

      fg(defaultcolour)
      echo(&quot;Upon starbursting, will go into &quot;) fg('a_cyan')
      echoLink(tostring(conf.burstmode), 'printCmdLine&quot;vconfig burstmode &quot;', tooltip, true)
      cecho(&quot;&lt;a_grey&gt; defences mode.\n&quot;)
    end,
    onset = function ()
      conf.burstmode = conf.burstmode:lower()
      if svo.haveskillset('necromancy') then
            svo.echof(&quot;Upon starburst/soulcage, will go into %s defences mode.&quot;, conf.burstmode)
      elseif svo.haveskillset('occultism') then
            svo.echof(&quot;Upon starburst/transmogrify, will go into %s defences mode.&quot;, conf.burstmode)
      else
            svo.echof(&quot;Upon starburst, will go into %s defences mode.&quot;, conf.burstmode)
      end
    end,
    installstart = function ()
      conf.burstmode = 'empty' end
  }},
  {oldts = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Touch shield only once on ts&quot;,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use oldschool ts - using ts one will shield once.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use oldschool ts - using ts will enable shield keepup.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.oldts = false end,
    installcheck = function () svo.echof(&quot;In Svof, &lt;0,255,0&gt;ts%s is a toggle for &lt;0,255,0&gt;vkeep shield%s - it'll reshield you if the shield gets stripped. Previously it used to shield you once only. Would you like to be a toggle (&lt;0,255,0&gt;vconfig oldts no%s) or a one-time thing (&lt;0,255,0&gt;vconfig oldts yes%s)?&quot;, svo.getDefaultColor(), svo.getDefaultColor(), svo.getDefaultColor(), svo.getDefaultColor()) end
  }},
  {batch = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Batch multiple curing commands&quot;,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s batch multiple curing commands to be done at once, without prompts inbetween.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s batch curing commands to be done at once, but instead send them separately at once.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.batch = true end,
  }},
  {steedfollow = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Auto-order steed to follow us&quot;,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s make the steed follow us when we dismount (via va).&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s make the steed follow us anymore when we dismount (via va).&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.steedfollow = true end
  }},
  {autotsc = {
    type = 'boolean',
    vconfig2 = true,
    onshow = &quot;Automatically toggle tsc in aeon/ret&quot;,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s automatically toggle tsc - overrides in retardation and denies in aeon.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s automatically toggle tsc.&quot;, svo.getDefaultColor()) end,
  }},
  {medprone = {
    type = 'boolean',
    vconfig2string = true,
    onshow = function (defaultcolour)
      fg('a_cyan')
      echoLink((conf.medprone and 'Do' or &quot;Don't&quot;), 'printCmdLine&quot;vconfig medprone '..(conf.medprone and 'nope' or 'yep')..'&quot;',
      &quot;Click to set whenever you'd like the system to put prone on ignore while meditating for you, so you can sit down while doing it. The drawback is that if you're trying to meditate in combat and get proned, the system won't get up&quot;,
       true)
      fg(defaultcolour)
      echo(&quot; ignore prone while meditating, and &quot;)
      fg('a_cyan')
      echoLink((conf.unmed and 'do' or &quot;don't&quot;), 'printCmdLine&quot;vconfig unmed '..(conf.unmed and 'nope' or 'yep')..'&quot;',
      &quot;Click to set whenever you'd like the system take meditate off keepup when you reach full willpower&quot;,
       true)
      fg(defaultcolour)
      echo(&quot; stop at full willpower.\n&quot;)
    end,
    installstart = function() conf.medprone = false end,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s put prone on ignore when meditating, so you can be sitting.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s put prone on ignore when meditating.&quot;, svo.getDefaultColor()) end,
  }},
  {unmed = {
    type = 'boolean',
    onshow = &quot;Automatically disable med with full wp&quot;,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s take meditate off keepup when you reach full willpower.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s take meditate off keepup when you reach full willpower - so we'll meditate again if you lose any mana/willpower.&quot;, svo.getDefaultColor()) end,
  }},
  {classattacksamount = {
    type = 'number',
    min = 0,
    vconfig2string = true,
    onset = function () svo.echof(&quot;Will enable a class after they hit us with %d attacks (within %d seconds).&quot;, conf.classattacksamount, conf.classattackswithin) end,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      -- Enable class as fighting with after x attacks in x seconds
      echo(&quot;Enable class as fighting with after&quot;) fg('a_cyan')
      echoLink(&quot; &quot;..tostring(conf.classattacksamount), 'printCmdLine&quot;vconfig classattacksamount &quot;',
      &quot;Set the amount of attacks an enemy will do to you within &quot;..tostring(conf.classattackswithin)..&quot; seconds to enable the class tricks&quot;,
       true)
      cecho(&quot;&lt;a_grey&gt; attacks in&quot;) fg('a_cyan')
      echoLink(&quot; &quot;..tostring(conf.classattackswithin), 'printCmdLine&quot;vconfig classattackswithin &quot;',
      &quot;Set the time within &quot;.. tostring(conf.classattacksamount).. &quot; attacks from a class will enable tricks for it&quot;,
       true)
      cecho(&quot; seconds.\n&quot;)
    end,
    installstart = function () conf.classattacksamount = 3 end
  }},
  {classattackswithin = {
    type = 'number',
    min = 0,
    onset = function () svo.echof(&quot;Will enable a class when they hit us within %d seconds (with %d attacks).&quot;, conf.classattackswithin, conf.classattacksamount) end,
    installstart = function () conf.classattackswithin = 15 end
  }},
  {enableclassesfor = {
    type = 'number',
    min = 0,
    vconfig2string = true,
    onset = function () svo.echof(&quot;Will keep the class enabled for %s minutes after the fighting ends.&quot;, conf.enableclassesfor) end,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      -- Keep a class enabled for x minutes after fighting
      echo(&quot;Keep a class enabled for&quot;) fg('a_cyan')
      echoLink(&quot; &quot;..tostring(conf.enableclassesfor), 'printCmdLine&quot;vconfig enableclassesfor &quot;',
      &quot;Set (in minutes) how long to keep a class enabled for after the fighting ends&quot;,
       true)
      cecho(&quot;&lt;a_grey&gt; minutes after fighting.\n&quot;)
    end,
    installstart = function () conf.enableclassesfor = 2 end
  }},
  {gmcpaffechoes = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s notify you when GMCP updates your afflictions.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s notify you when GMCP updates your afflictions.&quot;, svo.getDefaultColor()) end,
  }},
  {gmcpdefechoes = {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s notify you when GMCP updates your defences.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s notify you when GMCP updates your defences.&quot;, svo.getDefaultColor()) end,
  }},
  {releasechannel = {
    type = 'string',
    vconfig2string = true,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo(&quot;Will use the &quot;)
      fg('a_cyan')
      echoLink(tostring(conf.releasechannel),
        'printCmdLine(&quot;vconfig releasechannel &quot;)',
        &quot;Set the release channel to use for updates.&quot;,
        true
      )
      fg(defaultcolour)
      echo(&quot; channel for downloading updates.\n&quot;)
    end,
    check = function (what)
      if what == 'stable' or what == 'testing' then return true end
    end,
    onset = function ()
      conf.releasechannel = conf.releasechannel:lower()
      svo.echof(&quot;Will use the '%s' release channel for updates.&quot;,
        conf.releasechannel)
    end,
    installstart = function ()
      conf.releasechannel = 'stable'
    end
  }},
}

if svo.haveskillset('healing') then
  svo.config_dict:insert(1, 'healingskill', {
    type = 'string',
    check = function (what)
      if table.contains({'blindness', 'paralysis', 'deafness', 'fear', 'confusion', 'insomnia', 'slickness', 'stuttering', 'paranoia', 'shyness', 'hallucinations', 'generosity', 'loneliness', 'impatience', 'unconsciousness', 'claustrophobia', 'vertigo', 'sensitivity', 'dizziness', 'arms', 'dementia', 'clumsiness', 'ablaze', 'recklessness', 'anorexia', 'agoraphobia', 'disloyalty', 'hypersomnia', 'darkshade', 'masochism', 'epilepsy', 'asthma', 'stupidity', 'vomiting', 'weariness', 'haemophilia', 'legs', 'hypochondria'}, what:lower()) then return true end
    end,
    onset = function ()
      conf.healingskill = conf.healingskill:lower()
      signals.healingskillchanged:emit()
      svo.echof(&quot;Thanks! That means that you can now cure:  \n%s&quot;, svo.oneconcat(sk.healingmap))
    end,
    vconfig2 = true,
    installstart = function ()
      conf.healingskill = nil end,
    installcheck = function ()
      svo.echof(&quot;What is the highest possible affliction that you can cure with Healing? If you don't have it yet, answer with 'blindness' and set 'none' for the 'usehealing' option.&quot;) end
  })
  svo.config_dict:insert(1, 'usehealing', {
    type = 'string',
    check = function (what)
      if table.contains({'full', 'partial', 'none', 'off'}, what:lower()) then return true end
    end,
    onset = function ()
      conf.usehealing = conf.usehealing:lower()
      if conf.usehealing == 'off' then conf.usehealing = 'none' end
      svo.echof(&quot;Will use Healing in the '%s' mode.&quot;, conf.usehealing)
    end,
    vconfig2 = true,
    installstart = function ()
      conf.usehealing = nil end,
    installcheck = function ()
      svo.echof(&quot;Do you want to use Healing skillset in the full, partial or none mode? Full would mean that it'll use Healing for everything that it can and supplement it with normal cures. Partial would mean that it'll use normal cures and supplement it with Healing, while none means it won't make use of Healing at all.&quot;) end
  })
end
if svo.haveskillset('kaido') then
  svo.config_dict:insert(1, 'transmute', {
    type = 'string',
    check = function (what)
      if svo.convert_string(what) == false then return true end
      if table.contains({'replaceall', 'replacehealth', 'supplement', 'none', 'off'}, what:lower()) then return true end
    end,
    onset = function ()
      conf.transmute = conf.transmute:lower()
      if svo.convert_string(conf.transmute) == false or conf.transmute == 'none' then
        conf.transmute = 'none'
      end

      if conf.transmute == 'off' then conf.transmute = 'none' end

      if conf.transmute == 'none' then
        svo.echof(&quot;Won't use transmute for anything.&quot;)
      else
        svo.echof(&quot;Will use transmute in the '%s' mode.&quot;, conf.transmute) end
    end,
    vconfig2 = true,
    installstart = function () conf.transmute = nil end,
    installcheck = function ()
      svo.echof(&quot;Do you want to use transmute skill in the replaceall, replacehealth, supplement or none mode? replaceall means that it won't sip health nor eat moss/potash to heal your health, but only use transmute. replacehealth will mean that it will not sip health, but use moss/potash and transmute. supplement means that it'll use all three ways to heal you, and none means that it won't use transmute.&quot;) end
  })
  svo.config_dict:insert(1, 'transmuteamount', {
    type = 'number',
    percentage = true,
    min = 0,
    max = 100,
    onset = function () signals.changed_maxhealth:emit()
      svo.echof(&quot;Will start transmuting for health if it falls below %d%% (%dh)%s.&quot;, conf.transmuteamount, sys.transmuteamount, (conf.transmute ~= 'none' and &quot;&quot; or &quot;, when you enable a transmute mode&quot;))
    end,
    installstart = function () conf.transmuteamount = nil end,
    installcheck = function () svo.echof(&quot;At what %% of health do you want to start transmuting for health?&quot;) end
  })
  svo.config_dict:insert(1, 'transsipprone', {
      type = 'boolean',
      vconfig2 = &quot;Transmute while prone&quot;,
      onenabled = function () svo.echof(&quot;If you're prone and using transmute in a replaceall or replacehealth mode, we &lt;0,250,0&gt;will%s sip health or vitality instead of waiting on transmute to be usable. This is most optimal for PK.&quot;, svo.getDefaultColor()) end,
      ondisabled = function () svo.echof(&quot;If you're prone and using transmute in a replaceall or replacehealth mode, we'll keep sipping mana and wait until we can use transmute again to heal our health. This is mainly good for bashing.&quot;, svo.getDefaultColor()) end,
      installstart = function () conf.transsipprone = true end
    })
end
if svo.haveskillset('voicecraft') then
  svo.config_dict:insert(1, 'dwinnu', {
    type = 'boolean',
    vconfig1 = 'dwinnu',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use dwinnu for writhing.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use dwinnu.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.dwinnu = nil end,
    installcheck = function () svo.echof(&quot;Can you make use of the Wwinnu skill?&quot;) end
  })
end
if svo.haveskillset('weaponmastery') then
  svo.config_dict:insert(1, 'recoverfooting', {
      type = 'boolean',
      vconfig1 = &quot;recover footing&quot;,
      onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use Recover Footing to get up faster when we can.&quot;, svo.getDefaultColor()) end,
      ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use Recover Footing.&quot;, svo.getDefaultColor()) end,
      installstart = function () conf.recoverfooting = nil end,
      installcheck = function () svo.echof(&quot;Can you make use of the Recover Footing skill?&quot;) end
    })
end
if svo.haveskillset('venom') then
  svo.config_dict:insert(1, 'shruggingfunc', {
    type = 'custom',
    onmenu = function ()
      local underline = setUnderline; _G.setUnderline = function () end

      svo.echof(&quot;Scenarios to use shrugging in:&quot;)

      local sortednames = svo.keystolist(svo.shrugging)
      table.sort(sortednames)
      local longestfname = svo.longeststring(sortednames)

      for i = 1, #sortednames do
        local fname = sortednames[i]
        local t = svo.shrugging[fname]

        if not me.disabledshruggingfunc[fname] then
          if dechoLink then
            dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt;X&lt;153,204,204&gt;]&quot;, [[svo.me.disabledshruggingfunc[&quot;]]..fname..[[&quot;] = true; svo.config.set'shruggingfunc']], &quot;Disable &quot;..fname, true)
          else
            decho(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt;X&lt;153,204,204&gt;]&quot;)
          end
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %-&quot;..longestfname..&quot;s - %s\n&quot;, fname, tostring(t.desc)))
        else
          if dechoLink then
            dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt; &lt;153,204,204&gt;]&quot;, [[svo.me.disabledshruggingfunc[&quot;]]..fname..[[&quot;] = false; svo.config.set'shruggingfunc']], &quot;Enable &quot;..fname, true)
          else
            decho(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt; &lt;153,204,204&gt;]&quot;)
          end
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %-&quot;..longestfname..&quot;s - %s\n&quot;, fname, tostring(t.desc)))
        end
      end

      _G.setUnderline = underline
    end
  })
end
if svo.haveskillset('devotion') then
  svo.config_dict:insert(1, 'bloodswornoff', {
    type = 'number',
    percentage = true,
    min = 0,
    max = 100,
    vconfig2 = true,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo(string.format(&quot;Unlinking Bloodsworn at %s%% (%sh).\n&quot;, conf.bloodswornoff or '?', sys.bloodswornoff or '?'))
    end,
    onset = function () signals.changed_maxhealth:emit() svo.echof(&quot;Will unlink from bloodsworn if below %d%% (%dh).&quot;, conf.bloodswornoff, sys.bloodswornoff) end,
    installstart = function () conf.bloodswornoff = 30 end
  })
end
if svo.haveskillset('woodlore') then
  svo.config_dict:insert(1, 'weapon', {
    type = 'string',
    onset = function ()
      conf.weapon = conf.weapon:lower()
      svo.echof(&quot;Set your weapon to '%s'.&quot;, conf.weapon)
    end,
    vconfig2 = true,
    onshow = string.format(&quot;Using a %s as a weapon&quot;, (conf.weapon and tostring(conf.weapon) or &quot;(nothing)&quot;)),
    installstart = function ()
      conf.weapon = nil end,
    installcheck = function ()
      svo.echof(&quot;Are you using a spear or a trident as a weapon?&quot;) end
  })
end
if svo.haveskillset('metamorphosis') then
  svo.config_dict:insert(1, 'transmorph', {
    type = 'boolean',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Have%s transmorph - won't go human between morphing.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Don't%s have transmorph - will go human between morphing.&quot;, svo.getDefaultColor()) end,
    onshow = &quot;Have transmorph&quot;,
    installstart = function () conf.transmorph = nil end,
    installcheck = function () svo.echof(&quot;Do you have the Metamorphosis Transmorph skill?&quot;) end
  })
  svo.config_dict:insert(1, 'morphskill', {
    type = 'string',
    check = function (what)
      return sk.validmorphskill(what)
    end,
    onset = function ()
      conf.morphskill = conf.morphskill:lower()
      local t = {powers = 'squirrel', bonding = 'bear', transmorph = 'elephant', affinity = 'icewyrm'}
      if svo.me.class == 'Druid' then
            t.truemorph = 'hydra'
      else
            t.truemorph = 'icewyrm'
      end
      if t[conf.morphskill] then
        svo.echof(&quot;Thanks! I've set your morphskill to '%s' though, because %s isn't a morph.&quot;, t[conf.morphskill], conf.morphskill)
        conf.morphskill = t[conf.morphskill]
      end
      signals.morphskillchanged:emit()
      svo.echof(&quot;Given your morph skill, these are all defences you can put up: %s.&quot;, svo.concatand(svo.keystolist(sk.morphsforskill)) ~= &quot;&quot; and svo.concatand(svo.keystolist(sk.morphsforskill)) or &quot;(... none, actually. Nevermind!)&quot;)
    end,
    installstart = function () svo.sp_config.morphskill = nil end,
    installcheck = function () svo.echof(&quot;What is the highest available morph that you can go into?&quot;) end
  })
end
if not svo.haveskillset('tekura') then
  svo.config_dict:insert(1, 'parry', {
    type = 'boolean',
    vconfig1 = 'parry',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s make use of parry.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s make use of parry.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.parry = nil end,
    installcheck = function () svo.echof(&quot;Are you able to use parry?&quot;) end
  })
else
  svo.config_dict:insert(1, 'guarding', {
    type = 'boolean',
    vconfig1 = 'guarding',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s make use of guarding.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s make use of guarding.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.guarding = nil end,
    installcheck = function () svo.echof(&quot;Are you able to use guarding?&quot;) end
  })
end
if svo.haveskillset('shindo') then
  svo.config_dict:insert(1, 'shindodeaf', {
    type = 'boolean',
    vconfig1 = 'shindodeaf',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use the Shindo deaf skill for deaf.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use the Shindo deaf skill for deaf.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.shindodeaf = nil end,
    installcheck = function () svo.echof(&quot;Would you like to use Shindo deaf for deafness?&quot;) end
  })
  svo.config_dict:insert(1, 'shindoblind', {
    type = 'boolean',
    vconfig1 = 'shindoblind',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use the Shindo blind skill for blind.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use the Shindo blind skill for blind.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.shindoblind = nil end,
    installcheck = function () svo.echof(&quot;Would you like to use Shindo blind for blindness?&quot;) end
  })
end
if svo.haveskillset('kaido') then
  svo.config_dict:insert(1, 'kaidodeaf', {
    type = 'boolean',
    vconfig1 = 'kaidodeaf',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use the kaido deaf skill for deaf.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use the kaido deaf skill for deaf.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.kaidodeaf = nil end,
    installcheck = function () svo.echof(&quot;Would you like to use kaido deaf for deafness?&quot;) end
  })
  svo.config_dict:insert(1, 'kaidoblind', {
    type = 'boolean',
    vconfig1 = 'kaidoblind',
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use the kaido blind skill for blind.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use the kaido blind skill for blind.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.kaidoblind = nil end,
    installcheck = function () svo.echof(&quot;Would you like to use kaido blind for blindness?&quot;) end
  })
end
if svo.haveskillset('chivalry') or svo.haveskillset('shindo') or svo.haveskillset('kaido') or svo.haveskillset('metamorphosis') then
  svo.config_dict:insert(1, 'fitness', {
    type = 'boolean',
    vconfig2 = true,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo &quot;Use fitness       (&quot;
      echoLink(&quot;view scenarios&quot;, &quot;svo.config.set'fitnessfunc'&quot;, &quot;View, enable and disable scenarios in which fitness will be used&quot;)
      fg(defaultcolour) echo &quot;)\n&quot;
      resetFormat()
    end,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use of Fitness.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use of Fitness.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.fitness = nil end,
    installcheck = function () svo.echof(&quot;Can you make use of the Fitness skill?&quot;) end
  })
  svo.config_dict:insert(1, 'fitnessfunc', {
    type = 'custom',
    onmenu = function ()
      local underline = setUnderline; _G.setUnderline = function () end

      svo.echof(&quot;Scenarios to use fitness in:&quot;)
      local sortednames = svo.keystolist(svo.fitness)
      table.sort(sortednames)
      local longestfname = svo.longeststring(sortednames)

      for i = 1, #sortednames do
        local fname = sortednames[i]
        local t = svo.fitness[fname]

        if not me.disabledfitnessfunc[fname] then
          if dechoLink then
            dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt;X&lt;153,204,204&gt;]&quot;, [[svo.me.disabledfitnessfunc[&quot;]]..fname..[[&quot;] = true; svo.config.set'fitnessfunc']], &quot;Disable &quot;..fname, true)
          else
            decho(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt;X&lt;153,204,204&gt;]&quot;)
          end
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %-&quot;..longestfname..&quot;s - %s\n&quot;, fname, tostring(t.desc)))
        else
          if dechoLink then
            dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt; &lt;153,204,204&gt;]&quot;, [[svo.me.disabledfitnessfunc[&quot;]]..fname..[[&quot;] = false; svo.config.set'fitnessfunc']], &quot;Enable &quot;..fname, true)
          else
            decho(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt; &lt;153,204,204&gt;]&quot;)
          end
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %-&quot;..longestfname..&quot;s - %s\n&quot;, fname, tostring(t.desc)))
        end
      end

      _G.setUnderline = underline

      svo.showprompt()
    end
  })
end
if svo.haveskillset('venom') then
  svo.config_dict:insert(1, 'shrugging', {
    type = 'boolean',
    vconfig2 = true,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo &quot;Use shrugging  (&quot;
      echoLink(&quot;view scenarios&quot;, &quot;svo.config.set'shruggingfunc'&quot;, &quot;View, enable and disable scenarios in which shrugging will be used&quot;)
      fg(defaultcolour) echo &quot;)\n&quot;
      resetFormat()
    end,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use shrugging to cure when necessary.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use shrugging to cure.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.shrugging = nil end,
    installcheck = function () svo.echof(&quot;Can you make use of the shrugging?&quot;) end
  })
end
if svo.haveskillset('chivalry') then
  svo.config_dict:insert(1, 'rage', {
    type = 'boolean',
    vconfig2 = true,
    onshow = function (defaultcolour)
      fg(defaultcolour)
      echo &quot;Use rage       (&quot;
      echoLink(&quot;view scenarios&quot;, &quot;svo.config.set'ragefunc'&quot;, &quot;View, enable and disable scenarios in which rage will be used&quot;)
      fg(defaultcolour) echo &quot;)\n&quot;
      resetFormat()
    end,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s use of Rage.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s use of Rage.&quot;, svo.getDefaultColor()) end,
    installstart = function () conf.rage = nil end,
    installcheck = function () svo.echof(&quot;Can you make use of the Rage skill?&quot;) end
  })
  svo.config_dict:insert(1, 'ragefunc', {
    type = 'custom',
    onmenu = function ()
      local underline = setUnderline; _G.setUnderline = function () end

      svo.echof(&quot;Scenarios to use rage in:&quot;)
      local sortednames = svo.keystolist(svo.rage)
      table.sort(sortednames)
      local longestfname = svo.longeststring(sortednames)

      for i = 1, #sortednames do
        local fname = sortednames[i]
        local t = svo.rage[fname]

        if not me.disabledragefunc[fname] then
          if dechoLink then
            dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt;X&lt;153,204,204&gt;]&quot;, [[svo.me.disabledragefunc[&quot;]]..fname..[[&quot;] = true; svo.config.set'ragefunc']], &quot;Disable &quot;..fname, true)
          else
            decho(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt;X&lt;153,204,204&gt;]&quot;)
          end
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %-&quot;..longestfname..&quot;s - %s\n&quot;, fname, tostring(t.desc)))
        else
          if dechoLink then
            dechoLink(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt; &lt;153,204,204&gt;]&quot;, [[svo.me.disabledragefunc[&quot;]]..fname..[[&quot;] = false; svo.config.set'ragefunc']], &quot;Enable &quot;..fname, true)
          else
            decho(&quot;  &lt;153,204,204&gt;[&lt;0,204,0&gt; &lt;153,204,204&gt;]&quot;)
          end
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(string.format(&quot; %-&quot;..longestfname..&quot;s - %s\n&quot;, fname, tostring(t.desc)))
        end
      end

      _G.setUnderline = underline

      svo.showprompt()
    end
  })
end

if not conf.releasechannel then
  conf.releasechannel = 'stable'
end

if not conf.autowrithe then
  conf.autowrithe = 'white'
end

do
  local conf_t = {}
  local conf_path = getMudletHomeDir() .. &quot;/svo/config/conf&quot;

  if lfs.attributes(conf_path) then
    local ok, msg = pcall(table.load,conf_path, conf_t)
    if ok then
      svo.update(conf, conf_t)
    else
      os.remove(conf_path)
      tempTimer(10, function()
        svo.echof(&quot;Your vconfig file got corrupted for some reason - I've deleted it so the system can load other stuff OK. You'll need to re-set all of the vconfig options again, though. (%q)&quot;, msg)
      end)
    end
  end

  if conf.ai_minherbbal == 0.7 or conf.ai_minherbbal == 1.2 then conf.ai_minherbbal = 1.1 end
  if conf.ai_resetherbbal == 5 then conf.ai_resetherbbal = 2.5 end
  -- recovered at 7.4s for Hirst for twohander aff
  if conf.ai_resetsipbal == 5 then conf.ai_resetsipbal = 7 end
  if conf.ai_resetsipbal == 7 then conf.ai_resetsipbal = 10 end
  if conf.org == 'Shallam' then conf.org = 'Targossas' end
  -- recovery was renamed as efficiency
  if conf.recovery then conf.efficiency = true; conf.recovery = nil end

  if conf.gagserverside == nil then conf.gagserverside = true end

  -- purgative used to be set at a default 5 before it was even used, it is now 7 for voyria
  if conf.ai_resetpurgativebal == 5 then conf.ai_resetpurgativebal = 10 end

  conf.eventaffs = true

  cnrl.update_wait()

  if conf.bashing then enableTrigger&quot;svo Bashing triggers&quot;
  else disableTrigger&quot;svo Bashing triggers&quot; end

  -- update whenever our riding takes up balance. If it doens't, then balanceless actions should be done asap
  if conf.freevault and svo.dict.riding.physical.balanceful_act then
    svo.dict.riding.physical.balanceless_act = true
    svo.dict.riding.physical.balanceful_act = nil
    signals.dragonform:emit()
  elseif not conf.freevault and svo.dict.riding.physical.balanceless_act then
    svo.dict.riding.physical.balanceless_act = nil
    svo.dict.riding.physical.balanceful_act = true
    signals.dragonform:emit()
  end

  if conf.burrowpause then
    signals.gmcproominfo:connect(sk.check_burrow_pause, 'check if we need to pause for burrow')
  end

  if not conf.customprompt and not conf.setdefaultprompt then
    tempTimer(math.random(10, 15), function()
      conf.setdefaultprompt = true
      svo.setdefaultprompt()
      -- disabled -- spammy for new users
      -- echo&quot;\n&quot; svo.echof(&quot;I've setup a custom prompt for you that mimics the normal Achaean one, but also displays which afflictions have you got. See http://doc.svo.vadisystems.com/#setting-a-custom-prompt on how to customize it if you'd like, or if you don't like it, do 'vconfig customprompt off' to disable it.&quot;)
      end)
  end

  if conf.singleprompt then
    sk.enable_single_prompt()
  end

  if conf.riftlabel then
    tempTimer(0, function()
      svo.riftlabel:show()
      rift.update_riftlabel()
    end)
  end
  svo.updateloggingconfig()
end

for k,v in svo.config_dict:iter() do
  -- pre-initialize values not declared
  if conf[k] == nil and v.type == 'number' then
    conf[k] = 0
  elseif conf[k] == nil then
    conf[k] = false
  end
end

local tntf_tbl
tntf_tbl = {
  aillusion = { -- is used to change appropriate conf. option
    shortcuts = {'ai', &quot;anti-illusion&quot;, 'a', 'antiillusion'},
    on = function () enableTrigger &quot;Pre-parse anti-illusion&quot;;
          svo.echof&quot;Anti-illusion enabled.&quot; end,
    alreadyon = function () enableTrigger &quot;Pre-parse anti-illusion&quot;;
          svo.echof&quot;Anti-illusion is already enabled.&quot; end,
    off = function () disableTrigger &quot;Pre-parse anti-illusion&quot;;
          svo.echof&quot;Anti-illusion disabled.&quot; end,
    alreadyoff = function () disableTrigger &quot;Pre-parse anti-illusion&quot;;
          svo.echof&quot;Anti-illusion is already disabled.&quot; end,
  },
  arena = {
    on = function()
      local echos = {&quot;Arena mode enabled. Good luck!&quot;, &quot;Beat 'em up! Arena mode enabled.&quot;, &quot;Arena mode on.&quot;, &quot;Arena mode enabled. Kill them all!&quot;}
            svo.echof(echos[math.random(#echos)])
    end,
    alreadyon = function() svo.echof(&quot;Arena mode is already on.&quot;) end,
    off = function() svo.echof(&quot;Arena mode disabled.&quot;) end,
    alreadyoff = function() svo.echof(&quot;Arena mode is already off.&quot;) end
  },
  keepup = {
    on = function () svo.echof&quot;Auto keepup on.&quot; svo.make_gnomes_work() end,
    alreadyon = function () svo.echof&quot;Auto keepup is already on.&quot; end,
    off = function () svo.echof&quot;Auto keepup is now off.&quot;svo.make_gnomes_work() end,
    alreadyoff = function() svo.echof&quot;Auto keepup is already off.&quot; end
  },
  bashing = {
    on = function () enableTrigger&quot;svo Bashing triggers&quot; svo.echof(&quot;Enabled bashing triggers.&quot;) end,
    alreadyon = function () svo.echof(&quot;Bashing triggers are already on.&quot;) end,
    off = function() disableTrigger&quot;svo Bashing triggers&quot; svo.echof(&quot;Disabled bashing triggers.&quot;) end,
    alreadyoff = function() svo.echof(&quot;Bashing triggers are already off.&quot;) end,
  },
  raid = {
    on = function ()
      svo.tntf_set('keepup', true, true)
      defs.switch('combat', true)
      svo.echof(&quot;Switched into combat defence mode and keeping mass, cloak, insomnia, rebounding defences up.&quot;)
      defs.keepup('mass', true)
      defs.keepup('cloak', true)
      defs.keepup('mass', true)
      defs.keepup('insomnia', true)
      defs.keepup('rebounding', true)
    end,
    off = function ()
      defs.switch('basic', true)
      svo.echof(&quot;Switched to basic defence mode.&quot;)
    end
  },
  serverside = {
    shortcuts = {'ss'},
    on = function()
		  svo.setup_default_serverignore()

      -- take previous ignores off
      local removelist = {}
      for action, data in pairs(svo.ignore) do
        if type(data) == 'table' and data.because == &quot;using server-side curing&quot; then
          removelist[#removelist+1] = action
        end
      end

      for _, action in ipairs(removelist) do
        svo.ignore[action] = nil
      end

      if next(removelist) then
        tempTimer(5, [[svo.echof(&quot;Took all affs set for serverside curing off ignore. 'vshow ignore' really means ignore again (both in Svof and serverside), use 'vshow server' to toggle what should be done by serverside or Svof.&quot;)]])
      end

      svo.echof(&quot;Serverside curing enabled (augmented with Svof's).&quot;)
      svo.setupserverside()
      svo.sendcuring(&quot;afflictions on&quot;)
      svo.sendcuring(&quot;sipping on&quot;)
      svo.sendcuring(&quot;defences on&quot;)
      svo.sendcuring(&quot;focus &quot; .. (conf.focus and 'on' or 'off'))
      svo.sendcuring(&quot;batch on&quot;)
      svo.sendc(&quot;config advancedcuring on&quot;)
      svo.sendcuring(&quot;reporting on&quot;)
      if not conf.paused then svo.sendcuring('on') end
    end,
    off = function()
      svo.echof(&quot;Serverside curing disabled.&quot;)
      svo.sendcuring('off')
    end,
    alreadyon = function() svo.echof(&quot;Serverside affliction curing is already on.&quot;) end,
    alreadyoff = function() svo.echof(&quot;Serverside affliction curing is already off.&quot;) end,
  }
}

for k,v in pairs(tntf_tbl) do
  if v.shortcuts then
    for _,shortcut in pairs(v.shortcuts) do
      tntf_tbl[shortcut] = k
    end
    v.real = k
  end
end

function svo.tntf_set(what, option, echoback)
  local sendf
  if echoback then sendf = svo.echof else sendf = svo.errorf end

  option = svo.convert_string(option)
  svo.assert(what and (option ~= nil), &quot;syntax is: svo.tntf(what, option)&quot;, sendf)

  if not tntf_tbl[what] then
    if echoback ~= 'noerrors' then sendf(&quot;%s isn't something you can change.&quot;, what) end
    return
  end

  local oldechof, oldshowprompt = svo.echof, svo.showprompt

  if echoback == false then
    svo.echof = function() end
    oldshowprompt = svo.echof
  end

  if type(tntf_tbl[what]) == 'string' then what = tntf_tbl[what] end
  if option and conf[what] then
    (tntf_tbl[what].alreadyon or tntf_tbl[what].on)()
  elseif not option and not conf[what] then
    (tntf_tbl[what].alreadyoff or tntf_tbl[what].off)()
  elseif not option then
    conf[what] = false
    tntf_tbl[what].off()
    raiseEvent(&quot;svo config changed&quot;, what)
  else
    conf[what] = true
    tntf_tbl[what].on()
    raiseEvent(&quot;svo config changed&quot;, what)
  end

  if echoback == false then
    svo.echof = oldechof
    svo.showprompt = oldshowprompt
  end

  if echoback then svo.showprompt() end

  return true
end

-- just display all options in 4 tabs
function svo.sk.show_all_confs()
  local count = 0
  local t = {}; for name, _ in svo.config_dict:iter() do t[#t+1] = name end; table.sort(t)

  for _, name in ipairs(t) do
    if printCmdLine then
      echoLink(string.format(&quot;%-20s&quot;, tostring(name)), 'printCmdLine(&quot;vconfig '..name..' &quot;)', conf_installhint(name), true)
    else
      echo(string.format(&quot;%-20s&quot;, tostring(name))) end
    count = count + 1
    if count % 4 == 0 then echo &quot;\n&quot; end
  end
end

function svo.config.setoption(name, data)
  svo.config_dict:set(name, data)
  if conf[name] == nil and svo.config_dict[name].type == 'number' then
    conf[name] = conf[name] or 0
  elseif conf[name] == nil then
    conf[name] = conf[name] or false
  end
end

function svo.config.deloption(name)
  if svo.config_dict[name] then
    svo.config_dict:set(name, nil)
  end
end

function svo.config.set(what, option, echoback)
  local sendf
  local showprompt = svo.showprompt
  local oldechof
  if echoback then
    sendf = svo.echof
  else
    sendf = svo.errorf
    -- hide echoes and prompt
    showprompt = function() end
    oldechof = svo.echof
    svo.echof = function() end
  end

  local function raiseevent(optionname)
    tempTimer(0, function() raiseEvent(&quot;svo config changed&quot;, optionname) end)
  end

  if not svo.config_dict[what] or what == 'list' or what == 'options' then
    sendf(&quot;%s - available ones are:&quot;, (what == 'list' or what == 'option') and &quot;Listing all options&quot; or &quot;Don't know about such an option&quot;)
    sk.show_all_confs()
    echo&quot;\n&quot;
    showprompt()
    if not echoback then svo.echof = oldechof end
    return
  end
  if svo.config_dict[what].type == 'boolean' then
    if (type(option) == 'boolean' and option == true) or svo.convert_string(option) or (option == nil and not conf[what]) then
      conf[what] = true
      svo.config_dict[what].onenabled()
      raiseevent(what)
    elseif (type(option) == 'boolean' and option == false) or not svo.convert_string(option) or (option == nil and conf[what]) then
      conf[what] = false
      svo.config_dict[what].ondisabled()
      raiseevent(what)
    else
      sendf(&quot;don't know about that option - try 'yes' or 'no' for %s.&quot;, what)
    end

  elseif svo.config_dict[what].type == 'number' then
    if not option or tonumber(option) == nil then
      if svo.config_dict[what].percentage then
        sendf(&quot;What percentage do you want to set %s to?&quot;, what)
      else
        sendf(&quot;What number do you want to set %s to?&quot;, what)
      end
      if not echoback then svo.echof = oldechof end
      return
    end

    local num = tonumber(option)
    if svo.config_dict[what].max and num &gt; svo.config_dict[what].max then
      sendf(&quot;%s can't be higher than %s.&quot;, what, svo.config_dict[what].max)
    elseif svo.config_dict[what].min and num &lt; svo.config_dict[what].min then
      sendf(&quot;%s can't be lower than %s.&quot;, what, svo.config_dict[what].min)
    else
      conf[what] = num
      svo.config_dict[what].onset()
      raiseevent(what)
    end

  elseif svo.config_dict[what].type == 'string' then
    if not option then sendf(&quot;What do you want to set %s to?&quot;, what)
      showprompt()
      if not echoback then svo.echof = oldechof end
      return
    end

    if svo.config_dict[what].check and not svo.config_dict[what].check(option) then
      sendf(&quot;%s isn't something you can set %s to be.&quot;, option, what)
      showprompt()
      if not echoback then svo.echof = oldechof end
      return
    end

    conf[what] = option
    svo.config_dict[what].onset()
    raiseevent(what)

  elseif svo.config_dict[what].type == 'custom' then
    if not option then
      if svo.config_dict[what].onmenu then
        svo.config_dict[what].onmenu()
      else
        sendf(&quot;What do you want to set %s to?&quot;, what)
        showprompt()
      end

    else
      if svo.config_dict[what].onset then
        svo.config_dict[what].onset()
        raiseevent(what)
      end
    end

  else
    sendf(&quot;meep... %s doesn't have a type associated with it. Tis broken.&quot;, what)
    showprompt()
  end

  if not echoback then svo.echof = oldechof end
  showprompt()
  if svo.install.installing_system then svo.install.check_install_step() end
  svo.make_gnomes_work()
end


signals.saveconfig:connect(function () svo.tablesave(getMudletHomeDir() .. &quot;/svo/config/conf&quot;, conf) end, 'save settings config')

function svo.config.showcolours()
  svo.echof(&quot;Here's a list of available colors you can pick. To select, click on the name or use the %s command.&quot;, svo.green(&quot;vconfig echotype &lt;name&gt;&quot;))

  for name, f in pairs(svo.echos) do
    local s = &quot;  pick &quot;..tostring(name)..&quot; -  &quot;
    echo(&quot;  pick &quot;)
    echoLink(tostring(name), 'svo.config.set([[echotype]], &quot;'.. tostring(name) ..'&quot;, true)', 'Set it to '..tostring(name)..' colour style.', true)
    echo(&quot; -  &quot;)
    echo((&quot; &quot;):rep(30-#s)) f(true, &quot;this is how it'll look&quot;)
  end
end

function svo.config.showprompt()
  if not conf.customprompt then
    svo.echof(&quot;You don't have a custom prompt set currently.&quot;)
  else
    svo.echof(&quot;This is the script behind your custom prompt:\n&quot;)
    echo(conf.customprompt)
  end
end

end -- end of svo config loader

if svo.systemloaded then svo.loader.config() end</script>
            <eventHandlerList/>
        </Script>
        <Script isActive="yes" isFolder="no">
            <name>Pipes</name>
            <packageName></packageName>
            <script>-- Svof (c) 2011-2018 by Vadim Peretokin

-- Svof is licensed under a
-- Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.

-- You should have received a copy of the license along with this
-- work. If not, see &lt;http://creativecommons.org/licenses/by-nc-sa/4.0/&gt;.

svo = svo or {}; svo.loader = svo.loader or {}
svo.loader.pipes = function()

svo.pl.dir.makepath(getMudletHomeDir() .. &quot;/svo/pipes&quot;)

svo.me.pipes = svo.me.pipes or {}

local pipes, me = svo.pipes, svo.me

pipes.valerian = pipes.valerian or
  {lit = false, lit2 = false, id = 0, id2 = 0, arty = false, arty2 = false, puffs = 0, puffs2 = 0, filledwith = 'valerian', filledwith2 = 'valerian', maxpuffs = 10, maxpuffs2 = 10}
me.pipes.valerian = pipes.valerian

pipes.elm = pipes.elm or
{lit = false, lit2 = false, id = 0, id2 = 0, arty = false, arty2 = false, puffs = 0, puffs2 = 0, filledwith = 'elm', filledwith2 = 'elm', maxpuffs = 10, maxpuffs2 = 10}
me.pipes.elm = pipes.elm

pipes.skullcap = pipes.skullcap or
{lit = false, lit2 = false, id = 0, id2 = 0, arty = false, arty2 = false, puffs = 0, puffs2 = 0, filledwith = 'skullcap', filledwith2 = 'skullcap', maxpuffs = 10, maxpuffs2 = 10}
me.pipes.skullcap = pipes.skullcap

pipes.pnames = {'valerian', 'skullcap', 'elm'}

pipes.expectations = {'valerian', 'skullcap', 'elm'}

pipes.empties = {}

function svo.lastlit(which)
  for i = 1, #pipes.expectations do
    local v = pipes.expectations[i]
    if v == which then
      table.remove(pipes.expectations, i)
      pipes.expectations[#pipes.expectations+1] = which
      return
    end
  end
end

function svo.pipeout()
  local what = pipes.expectations[1]
  pipes[what].lit = false
  table.remove(pipes.expectations, 1)
  pipes.expectations[#pipes.expectations+1] = what
end

function svo.pipestart()
  local oldvalerianmaxpuffs, oldelmmaxpuffs, oldskullcapmaxpuffs = pipes.valerian.maxpuffs, pipes.elm.maxpuffs, pipes.skullcap.maxpuffs
  local oldvalerianmaxpuffs2, oldelmmaxpuffs2, oldskullcapmaxpuffs2 = pipes.valerian.maxpuffs2, pipes.elm.maxpuffs2, pipes.skullcap.maxpuffs2

  pipes.valerian = {lit = false, lit2 = false, id = 0, id2 = 0, arty = false, arty2 = false, puffs = 0, puffs2 = 0, filledwith = 'valerian', filledwith2 = 'valerian', maxpuffs = oldvalerianmaxpuffs, maxpuffs2 = oldvalerianmaxpuffs2}
  me.pipes.valerian = pipes.valerian

  pipes.elm = {lit = false, lit2 = false, id = 0, id2 = 0, arty = false, arty2 = false, puffs = 0, puffs2 = 0, filledwith = 'elm', filledwith2 = 'elm', maxpuffs = oldelmmaxpuffs, maxpuffs2 = oldelmmaxpuffs2}
  me.pipes.elm = pipes.elm

  pipes.skullcap = {lit = false, lit2 = false, id = 0, id2 = 0, arty = false, arty2 = false, puffs = 0, puffs2 = 0, filledwith = 'skullcap', filledwith2 = 'skullcap', maxpuffs = oldskullcapmaxpuffs, maxpuffs2 = oldskullcapmaxpuffs2}
  me.pipes.skullcap = pipes.skullcap
end

function svo.parseplist()
  local pipenames = {
    [&quot;slippery elm&quot;]                = 'elm',
    [&quot;a valerian leaf&quot;]             = 'valerian',
    [&quot;a skullcap flower&quot;]           = 'skullcap',
    [&quot;a pinch of ground cinnabar&quot;]  = 'elm',
    [&quot;a pinch of realgar crystals&quot;] = 'valerian',
    [&quot;a pinch of ground malachite&quot;] = 'skullcap'
  }

  local short_names = {
    [&quot;slippery elm&quot;]                = 'elm',
    [&quot;a valerian leaf&quot;]             = 'valerian',
    [&quot;a skullcap flower&quot;]           = 'skullcap',
    [&quot;a pinch of ground cinnabar&quot;]  = 'cinnabar',
    [&quot;a pinch of realgar crystals&quot;] = 'realgar',
    [&quot;a pinch of ground malachite&quot;] = 'malachite'
  }

  local id     = tonumber(matches[3])
  local herb   = pipenames[matches[4]]
  local puffs  = tonumber(matches[5])
  local status = matches[2]

  if not (id and herb and puffs and status) then return end

  local filled,lit,arty,puffskey, maxpuffs
  if pipes[herb].id == 0 then
    pipes[herb].id = id
    svo.firstpipe = true
    filled = 'filledwith'
    lit = 'lit'
    arty = 'arty'
    puffskey = 'puffs'
    maxpuffs = 'maxpuffs'
  else
    pipes[herb].id2 = id
    svo.firstpipe = false
    filled = 'filledwith2'
    lit = 'lit2'
    arty = 'arty2'
    puffskey = 'puffs2'
    maxpuffs = 'maxpuffs2'
  end

  pipes[herb][arty] = false

  pipes[herb][filled] = short_names[matches[4]]

  if status == 'out' then
    pipes[herb][lit] = false
  elseif status == 'lit' then
    pipes[herb][lit] = true
   elseif status == 'artf' then
    pipes[herb][arty] = true
  end

  pipes[herb][puffskey] = puffs

  -- assume it's a 20 puff pipe if the puffs we have atm is over 10 (bigger than normal)
  if puffs &gt; 10 then
    pipes[herb][maxpuffs] = 20
    echo(&quot; &quot;)
    setFgColor(unpack(svo.getDefaultColorNums))
    echo(&quot;(a 20-puff pipe)&quot;)
  end

  -- warn if relighting any pipes is on ignore, to make it more obvious - people tended to miss the original line
  if svo.ignore['light'..herb] then
    decho(&quot; &quot;..svo.getDefaultColor()..&quot;(&quot;)
    setFgColor(unpack(svo.getDefaultColorNums))
    setUnderline(true)
    echoLink(&quot;re-enable lighting&quot;, 'svo.ignore.light'..herb..' = nil; svo.echof(&quot;Re-enabled lighting of the '..pipes[herb].filledwith..' pipe.&quot;); if not svo.conf.relight then svo.config.set([[relight]], [[on]], true) end', 'Re-lighting the '..pipes[herb].filledwith..' pipe was put on ignore because '..svo.ignore['light'..herb].because..' - click the link to re-enable it', true)
    setUnderline(false)
    decho(svo.getDefaultColor()..&quot;)&quot;)
  end
end

function svo.parseplistempty()
  local id = tonumber(matches[3])
  local status = matches[2]
  if not (id and status) then return end

  -- save the data, to later assign the pipes to herbs
  pipes.empties[#pipes.empties+1] = {id = id, arty = (status == 'artf' and true or false), status = status}
end

function svo.parseplistend()
  -- fill up at least one of each first
  for id = 1, #pipes.pnames do
    local i = pipes.pnames[id]
    if pipes[i] and pipes[i].id == 0 and next(pipes.empties) then
      pipes[i].id = pipes.empties[#pipes.empties].id
      if pipes.empties[#pipes.empties].status == 'Lit' then
        pipes[i].lit = true
      else
        pipes[i].lit = false
      end

      if pipes.empties[#pipes.empties].arty then
        pipes[i].arty = true
      end

      pipes.empties[#pipes.empties] = nil
    end
  end

  -- fill up secondary ones
  for id = 1, #pipes.pnames do
    local i = pipes.pnames[id]
    if pipes[i] and pipes[i].id2 == 0 and next(pipes.empties) then
      pipes[i].id2 = pipes.empties[#pipes.empties].id
      if pipes.empties[#pipes.empties].status2 == 'Lit' then
        pipes[i].lit2 = true
      else
        pipes[i].lit2 = false
      end

      if pipes.empties[#pipes.empties].arty then
        pipes[i].arty2 = true
      end

      pipes.empties[#pipes.empties] = nil
    end
  end

  pipes.empties = {}
  svo.signals.after_lifevision_processing:unblock(svo.cnrl.checkwarning) -- check for stain lock
  svo.make_gnomes_work()
end

-- assumes that we set some pipe to 0 already. This is used during install only
function svo.pipe_assignid(newid)
  newid = tonumber(newid)
  for id = 1, #pipes.pnames do
    local i = pipes.pnames[id]
    if pipes[i].id == 0 then
      pipes[i].id = newid
      svo.conf[i..'id'] = newid
      pipes[i].lit = false
      send(&quot;empty &quot;..newid, false)
      raiseEvent(&quot;svo config changed&quot;, i..'id')
      return i
    elseif pipes[i].id2 == 0 then
      pipes[i].id2 = newid
      svo.conf[i..'id2'] = newid
      pipes[i].lit2 = false
      send(&quot;empty &quot;..newid, false)
      raiseEvent(&quot;svo config changed&quot;, i..'id2')
      return i
    end
  end
end

if lfs.attributes(getMudletHomeDir() .. &quot;/svo/pipes/conf&quot;) then
  local ok = pcall(table.load, getMudletHomeDir() .. &quot;/svo/pipes/conf&quot;, pipes)
  if ok then
    -- maxpuffs were added later on in the game, so make sure this field exists for upgrading systems
    pipes.elm.maxpuffs         = pipes.elm.maxpuffs or 10
    pipes.skullcap.maxpuffs    = pipes.skullcap.maxpuffs or 10
    pipes.valerian.maxpuffs    = pipes.valerian.maxpuffs or 10

    -- secondary pipes were added later on, so drop it in
    pipes.elm.maxpuffs2        = pipes.elm.maxpuffs2 or 10
    pipes.skullcap.maxpuffs2   = pipes.skullcap.maxpuffs2 or 10
    pipes.valerian.maxpuffs2   = pipes.valerian.maxpuffs2 or 10

    pipes.elm.lit2             = pipes.elm.lit2 or false
    pipes.skullcap.lit2        = pipes.skullcap.lit2 or false
    pipes.valerian.lit2        = pipes.valerian.lit2 or false

    pipes.elm.id2              = pipes.elm.id2 or 0
    pipes.skullcap.id2         = pipes.skullcap.id2 or 0
    pipes.valerian.id2         = pipes.valerian.id2 or 0

    pipes.elm.arty2            = pipes.elm.arty2 or false
    pipes.skullcap.arty2       = pipes.skullcap.arty2 or false
    pipes.valerian.arty2       = pipes.valerian.arty2 or false

    pipes.elm.puffs2           = pipes.elm.puffs2 or 0
    pipes.skullcap.puffs2      = pipes.skullcap.puffs2 or 0
    pipes.valerian.puffs2      = pipes.valerian.puffs2 or 0

    pipes.elm.filledwith2      = pipes.elm.filledwith2 or 'elm'
    pipes.skullcap.filledwith2 = pipes.skullcap.filledwith2 or 'skullcap'
    pipes.valerian.filledwith2 = pipes.valerian.filledwith2 or 'valerian'

    me.pipes.elm               = pipes.elm
    me.pipes.skullcap          = pipes.skullcap
    me.pipes.valerian          = pipes.valerian
  end
end

svo.signals.connected:connect(function ()
  if not pipes.valerian.arty then pipes.valerian.lit   = false end
  if not pipes.elm.arty then pipes.elm.lit             = false end
  if not pipes.skullcap.arty then pipes.skullcap.lit   = false end

  if not pipes.valerian.arty2 then pipes.valerian.lit2 = false end
  if not pipes.elm.arty2 then pipes.elm.lit2           = false end
  if not pipes.skullcap.arty2 then pipes.skullcap.lit2 = false end

  if not pipes.valerian.filledwith then pipes.valerian.filledwith   = 'valerian' end
  if not pipes.elm.filledwith then pipes.elm.filledwith             = 'elm' end
  if not pipes.skullcap.filledwith then pipes.skullcap.filledwith   = 'skullcap' end

  if not pipes.valerian.filledwith2 then pipes.valerian.filledwith2 = 'valerian' end
  if not pipes.elm.filledwith2 then pipes.elm.filledwith2           = 'elm' end
  if not pipes.skullcap.filledwith2 then pipes.skullcap.filledwith2 = 'skullcap' end
end, 'setup pipes on login')

svo.signals.saveconfig:connect(function ()
  local s,m = svo.tablesave(getMudletHomeDir() .. &quot;/svo/pipes/conf&quot;, pipes)
  if not s then
    svo.echof(&quot;Couldn't save settings; %s&quot;, m)
  end
end, 'save pipes config')

end -- end of svo pipes loader

if svo.systemloaded then svo.loader.pipes() end</script>
            <eventHandlerList/>
        </Script>
        <Script isActive="yes" isFolder="no">
            <name>Rift</name>
            <packageName></packageName>
            <script>-- Svof (c) 2011-2018 by Vadim Peretokin

-- Svof is licensed under a
-- Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.

-- You should have received a copy of the license along with this
-- work. If not, see &lt;http://creativecommons.org/licenses/by-nc-sa/4.0/&gt;.

svo = svo or {}; svo.loader = svo.loader or {}
svo.loader.rift = function()

--[[  basic idea: if asked to eat something, and we a) don't have it (or not enough),
      or b) are in aeon and have it we outr it, and eat it

      otherwise just eat
  ]]
svo.pl.dir.makepath(getMudletHomeDir() .. &quot;/svo/rift+inv&quot;)

local rift, me, sys, sk, conf = svo.rift, svo.me, svo.sys, svo.sk, svo.conf
local pipes = svo.pipes

rift.riftcontents = rift.riftcontents or {}
rift.invcontents = rift.invcontents or {}
me.riftcontents = rift.riftcontents
me.invcontents = rift.invcontents

rift.precache = rift.precache or {}
rift.precachedata = rift.precachedata or {}

rift.doprecache = false

rift.allherbs = {'ash', 'bayberry', 'bellwort', 'bloodroot', 'cohosh', 'echinacea', 'elm', 'ginger', 'ginseng', 'goldenseal', 'hawthorn', 'kelp', 'kola', 'kuzu', 'lobelia', 'myrrh', 'pear', 'sileris', 'skullcap', 'valerian', 'weed', 'slipper', 'irid', 'ferrum', 'stannum', 'dolomite', 'antimony', 'bisemutum', 'bellwort', 'magnesium', 'calamine', 'malachite', 'azurite', 'plumbum', 'realgar', 'arsenic', 'cohosh', 'argentum', 'calcite', 'potash', 'quicksilver', 'kelp', 'kola', 'cinnabar', 'cuprum', 'aurum', 'quartz', 'gypsum'}
rift.herbsminerals = {'antimony', 'argentum', 'arsenic', 'ash', 'aurum', 'azurite', 'bayberry', 'bellwort', 'bisemutum', 'bloodroot', 'calamine', 'calcite', 'cinnabar', 'cohosh', 'cuprum', 'dolomite', 'echinacea', 'elm', 'ferrum', 'ginger', 'ginseng', 'goldenseal', 'gypsum', 'hawthorn', 'irid', 'kelp', 'kola', 'lobelia', 'magnesium', 'malachite', 'myrrh', 'plumbum', 'potash', 'quartz', 'quicksilver', 'realgar', 'sileris', 'skullcap', 'stannum', 'valerian', 'weed'}
rift.functionalherbs = {'slipper', 'kuzu', 'pear'}

rift.herblist = {'elm', 'valerian', 'ash', 'bayberry', 'bellwort', 'bloodroot', 'cohosh', 'echinacea', 'ginger', 'ginseng', 'goldenseal', 'hawthorn', 'kelp', 'kola', 'kuzu', 'lobelia', 'irid', 'myrrh', 'pear', 'sileris', 'skullcap', 'slipper', 'weed'}
rift.curativeherbs = {'ash', 'bayberry', 'bellwort', 'bloodroot', 'cohosh', 'echinacea', 'elm', 'ginger', 'ginseng', 'goldenseal', 'hawthorn', 'irid', 'kelp', 'kola', 'lobelia', 'myrrh', 'pear', 'sileris', 'skullcap', 'valerian'}

rift.minerallist = {'ferrum', 'stannum', 'dolomite', 'antimony', 'bisemutum', 'cuprum', 'magnesium', 'calamine', 'malachite', 'azurite', 'plumbum', 'realgar', 'arsenic', 'gypsum', 'argentum', 'calcite', 'potash', 'quicksilver', 'aurum', 'quartz', 'cinnabar'}

me.herblist = rift.herblist
me.minerallist = rift.minerallist

rift.forestalvials = {'caloric', 'epidermal', 'frost', 'health', 'immunity', 'levitation', 'mana', 'mass', 'mending', 'restoration', 'speed', 'venom'}

rift.resetriftcontents = function()
  for _, herb in ipairs(rift.allherbs) do
    rift.riftcontents[herb] = 0
  end

  svo.myrift = rift.riftcontents
end

rift.resetinvcontents = function()
  for _, herb in ipairs(rift.allherbs) do
    rift.invcontents[herb] = 0
  end

  svo.myinv = rift.invcontents
end

rift.resetriftcontents()
rift.resetinvcontents()

rift.herbs_plural = {
  elm        = &quot;(%d+) slippery elms&quot;,
  valerian   = &quot;(%d+) valerian leaves&quot;,
  ash        = &quot;(%d+) pieces of prickly ash bark&quot;,
  bayberry   = &quot;(%d+) pieces of bayberry bark&quot;,
  bellwort   = &quot;(%d+) bellwort flowers&quot;,
  bloodroot  = &quot;(%d+) bloodroot leaves&quot;,
  cohosh     = &quot;(%d+) cohosh roots&quot;,
  echinacea  = &quot;(%d+) echinacea roots&quot;,
  ginger     = &quot;(%d+) ginger roots&quot;,
  ginseng    = &quot;(%d+) ginseng roots&quot;,
  goldenseal = &quot;(%d+) goldenseal roots&quot;,
  hawthorn   = &quot;(%d+) hawthorn berries&quot;,
  kelp       = &quot;(%d+) pieces of kelp&quot;,
  kola       = &quot;(%d+) kola nuts&quot;,
  kuzu       = &quot;(%d+) kuzu roots&quot;,
  lobelia    = &quot;(%d+) lobelia seeds&quot;,
  irid       = &quot;(%d+) pieces of irid moss&quot;,
  myrrh      = &quot;(%d+) myrrh balls&quot;,
  pear       = &quot;(%d+) prickly pears&quot;,
  sileris    = &quot;(%d+) sileris berries&quot;,
  skullcap   = &quot;(%d+) skullcap flowers&quot;,
  slipper    = &quot;(%d+) lady's slipper roots&quot;,
  weed       = &quot;(%d+) sprigs of cactus weed&quot;,

  ferrum      = &quot;(%d+) ferrum flakes&quot;,
  stannum     = &quot;(%d+) stannum flakes&quot;,
  dolomite    = &quot;(%d+) dolomite grains&quot;,
  antimony    = &quot;(%d+) antimony flakes&quot;,
  bisemutum   = &quot;(%d+) bisemutum chips&quot;,
  cuprum      = &quot;(%d+) cuprum flakes&quot;,
  magnesium   = &quot;(%d+) magnesium chips&quot;,
  calamine    = &quot;(%d+) calamine crystals&quot;,
  malachite   = &quot;(%d+) pinches of ground malachite&quot;,
  azurite     = &quot;(%d+) azurite motes&quot;,
  plumbum     = &quot;(%d+) plumbum flakes&quot;,
  realgar     = &quot;(%d+) pinches of ground realgar&quot;,
  arsenic     = &quot;(%d+) arsenic pellets&quot;,
  gypsum      = &quot;(%d+) gypsum crystals&quot;,
  argentum    = &quot;(%d+) argentum flakes&quot;,
  calcite     = &quot;(%d+) calcite motes&quot;,
  potash      = &quot;(%d+) potash crystals&quot;,
  quicksilver = &quot;(%d+) quicksilver droplets&quot;,
  aurum       = &quot;(%d+) aurum flakes&quot;,
  quartz      = &quot;(%d+) quartz grains&quot;,
  cinnabar    = &quot;(%d+) pinches of ground cinnabar&quot;,
}

rift.herbs_singular = {
  [&quot;some prickly ash bark&quot;]  = 'ash',
  [&quot;some bayberry bark&quot;]     = 'bayberry',
  [&quot;a bellwort flower&quot;]      = 'bellwort',
  [&quot;a bloodroot leaf&quot;]       = 'bloodroot',
  [&quot;a black cohosh root&quot;]    = 'cohosh',
  [&quot;an echinacea root&quot;]      = 'echinacea',
  [&quot;slippery elm&quot;]           = 'elm',
  [&quot;a ginger root&quot;]          = 'ginger',
  [&quot;a ginseng root&quot;]         = 'ginseng',
  [&quot;a goldenseal root&quot;]      = 'goldenseal',
  [&quot;a hawthorn berry&quot;]       = 'hawthorn',
  [&quot;a piece of kelp&quot;]        = 'kelp',
  [&quot;a kola nut&quot;]             = 'kola',
  [&quot;a kuzu root&quot;]            = 'kuzu',
  [&quot;a lobelia seed&quot;]         = 'lobelia',
  [&quot;some irid moss&quot;]         = 'irid',
  [&quot;a ball of myrrh gum&quot;]    = 'myrrh',
  [&quot;a prickly pear&quot;]         = 'pear',
  [&quot;a sileris berry&quot;]        = 'sileris',
  [&quot;a skullcap flower&quot;]      = 'skullcap',
  [&quot;a lady's slipper root&quot;]  = 'slipper',
  [&quot;a valerian leaf&quot;]        = 'valerian',
  [&quot;a sprig of cactus weed&quot;] = 'weed',

  [&quot;a ferrum flake&quot;]              = 'ferrum',
  [&quot;a stannum flake&quot;]             = 'stannum',
  [&quot;a dolomite grain&quot;]            = 'dolomite',
  [&quot;an antimony flake&quot;]           = 'antimony',
  [&quot;a bisemutum chip&quot;]            = 'bisemutum',
  [&quot;a cuprum flake&quot;]              = 'cuprum',
  [&quot;a magnesium chip&quot;]            = 'magnesium',
  [&quot;a calamine crystal&quot;]          = 'calamine',
  [&quot;a pinch of ground malachite&quot;] = 'malachite',
  [&quot;an azurite mote&quot;]             = 'azurite',
  [&quot;a plumbum flake&quot;]             = 'plumbum',
  [&quot;a pinch of realgar crystals&quot;] = 'realgar',
  [&quot;an arsenic pellet&quot;]           = 'arsenic',
  [&quot;a gypsum crystal&quot;]            = 'gypsum',
  [&quot;an argentum flake&quot;]           = 'argentum',
  [&quot;a calcite mote&quot;]              = 'calcite',
  [&quot;a potash crystal&quot;]            = 'potash',
  [&quot;a quicksilver droplet&quot;]       = 'quicksilver',
  [&quot;an aurum flake&quot;]              = 'aurum',
  [&quot;a quartz grain&quot;]              = 'quartz',
  [&quot;a pinch of ground cinnabar&quot;]  = 'cinnabar',
}

-- outr line in Achaea uses some special naming - this is formatted for it
rift.herbs_singular_sansprefix = {
  [&quot;prickly ash bark&quot;]    = 'ash',
  [&quot;bayberry bark&quot;]       = 'bayberry',
  [&quot;bellwort flower&quot;]     = 'bellwort',
  [&quot;bloodroot leaf&quot;]      = 'bloodroot',
  [&quot;black cohosh&quot;]        = 'cohosh',
  ['echinacea']           = 'echinacea',
  [&quot;slippery elm&quot;]        = 'elm',
  [&quot;ginger root&quot;]         = 'ginger',
  [&quot;ginseng root&quot;]        = 'ginseng',
  [&quot;goldenseal root&quot;]     = 'goldenseal',
  [&quot;hawthorn berry&quot;]      = 'hawthorn',
  ['kelp']                = 'kelp',
  [&quot;kola nut&quot;]            = 'kola',
  [&quot;kuzu root&quot;]           = 'kuzu',
  [&quot;lobelia seed&quot;]        = 'lobelia',
  [&quot;irid moss&quot;]           = 'irid',
  [&quot;myrrh gum&quot;]           = 'myrrh',
  [&quot;prickly pear&quot;]        = 'pear',
  ['sileris']             = 'sileris',
  ['skullcap']            = 'skullcap',
  [&quot;lady's slipper root&quot;] = 'slipper',
  ['valerian']            = 'valerian',
  ['weed']                = 'weed',

  ['ferrum']      = 'ferrum',
  ['stannum']     = 'stannum',
  ['dolomite']    = 'dolomite',
  ['antimony']    = 'antimony',
  ['bisemutum']   = 'bisemutum',
  ['cuprum']      = 'cuprum',
  ['magnesium']   = 'magnesium',
  ['calamine']    = 'calamine',
  ['malachite']   = 'malachite',
  ['azurite']     = 'azurite',
  ['plumbum']     = 'plumbum',
  ['realgar']     = 'realgar',
  ['arsenic']     = 'arsenic',
  ['gypsum']      = 'gypsum',
  ['argentum']    = 'argentum',
  ['calcite']     = 'calcite',
  ['potash']      = 'potash',
  ['quicksilver'] = 'quicksilver',
  ['aurum']       = 'aurum',
  ['quartz']      = 'quartz',
  ['cinnabar']    = 'cinnabar',
}

-- non-herb items - used in inra sorting. A space is used to accomodate the different materials without introducing complications in the code
rift.items_plural = {
  [&quot;iron &quot;]   = &quot;(%d+) pinches of iron filings&quot;,
  [&quot;silver &quot;] = &quot;(%d+) bars of silver&quot;,
  coal        = &quot;(%d+) coal pieces&quot;,
  gold        = &quot;(%d+) nuggets of gold&quot;,
  iron        = &quot;(%d+) iron bars&quot;,
  lead        = &quot;(%d+) lead beads&quot;,
  nodule      = &quot;(%d+) nodules of copper&quot;,
  silver      = &quot;(%d+) silver bars&quot;,
  tin         = &quot;(%d+) chunks of tin&quot;,
  scales      = &quot;(%d+) piles of fish scales&quot;,
  lacquer     = &quot;(%d+) pots of lacquer&quot;,
  stone       = &quot;(%d+) stones&quot;,
}

rift.items_singular = {
  [&quot;a bar of silver&quot;]        = 'silver',
  [&quot;a bead of lead&quot;]         = 'lead',
  [&quot;a chunk of tin&quot;]         = 'tin',
  [&quot;a nodule of copper&quot;]     = 'nodule',
  [&quot;a piece of coal&quot;]        = 'coal',
  [&quot;a small nugget of gold&quot;] = 'gold',
  [&quot;an iron bar&quot;]            = 'iron',
  [&quot;a pile of fish scales&quot;]  = 'scales',
  [&quot;a small pot of lacquer&quot;] = 'lacquer',
  [&quot;a block of stone&quot;]       = 'stone',
}

rift.herb_conversions = {
  ash        = 'stannum',
  bayberry   = 'arsenic',
  bellwort   = 'cuprum',
  bloodroot  = 'magnesium',
  cohosh     = 'gypsum',
  echinacea  = 'dolomite',
  elm        = 'cinnabar',
  ginger     = 'antimony',
  ginseng    = 'ferrum',
  goldenseal = 'plumbum',
  hawthorn   = 'calamine',
  irid       = 'potash',
  kelp       = 'aurum',
  kola       = 'quartz',
  lobelia    = 'argentum',
  myrrh      = 'bisemutum',
  pear       = 'calcite',
  sileris    = 'quicksilver',
  skullcap   = 'azurite',
  valerian   = 'realgar',
}

rift.vial_conversions = {
  caloric     = 'exothermic',
  epidermal   = 'sensory',
  frost       = 'endothermia',
  health      = 'vitality',
  immunity    = 'antigen',
  levitation  = 'hovering',
  mana        = 'mentality',
  mass        = 'density',
  mending     = 'renewal',
  restoration = 'reconstructive',
  speed       = 'haste',
  venom       = 'toxin',
}

function svo.intlen(number)
  return number == 0 and 1 or math.floor(math.log10(number)+1)
end

rift.update_riftlabel = function()
  if not svo.riftlabel or svo.riftlabel.hidden then return end

  local count = 0
  local tbl = {}
  local columncount = svo.conf.riftlabelcolumns or 3
  local charwidth = 20

  for _, j in pairs(rift.herbsminerals) do
    count = count + 1

    tbl[#tbl+1] = string.format([[&lt;font style=&quot;color:grey;&quot;&gt;%s&lt;/font&gt;%s%d&lt;font style=&quot;color:grey;&quot;&gt;/&lt;/font&gt;%d ]], j, string.rep(&quot;&amp;nbsp;&quot;, charwidth - #j- svo.intlen(rift.invcontents[j]) - svo.intlen(rift.riftcontents[j])), rift.invcontents[j], rift.riftcontents[j])
    if count % columncount == 0 then tbl[#tbl+1] = &quot;&lt;br /&gt;&quot; end
  end

  -- fill up the rest with spaces for alignment
  if count % columncount ~= 0 then
    -- insert spaces for each column (20 chars default) + 1 between each column
    local spacesneeded = (columncount - (count % columncount)) * (charwidth+1)
    tbl[#tbl+1] = string.rep(&quot;&amp;nbsp;&quot;, spacesneeded)
  end

  echo(&quot;svo.riftlabel&quot;, string.format([[&lt;center&gt;&lt;p style=&quot;font-size: ]]..(svo.conf.herbstatsize and svo.conf.herbstatsize or 9)..[[px; color:white; font-weight:;&quot;&gt;%s&lt;/p&gt;&lt;/center&gt;]], table.concat(tbl)))
end

rift.outr = function (what)
  if not sys.canoutr then return end

  if (rift.precache[what] and rift.precache[what] == 0) or not rift.invcontents[what] or not rift.precache[what] or (rift.invcontents[what] and rift.precache[what] and (rift.invcontents[what] - 1 &gt;= rift.precache[what])) then
    send(&quot;outr &quot; .. what, svo.conf.commandecho)
  else
    send(&quot;outr &quot; .. (rift.precache[what] - rift.invcontents[what] + 1) .. &quot; &quot; .. what, svo.conf.commandecho)
  end

  -- allow other outrs to catch up, then re-check again
  if sys.blockoutr then killTimer(sys.blockoutr); sys.blockoutr = nil end
  sys.blockoutr = tempTimer(sys.wait + svo.syncdelay(), function () sys.blockoutr = nil; svo.debugf(&quot;sys.blockoutr expired&quot;) svo.make_gnomes_work() end)
  svo.debugf(&quot;sys.blockoutr setup: &quot;, debug.traceback())
end

rift.checkprecache = function()
  rift.doprecache = false
	svo.echof(&quot;now working&quot;)

  for herb, _ in pairs(rift.precache) do
	svo.echof(&quot;checking %s. precache: %s, inv: %s&quot;, herb, rift.precache[herb], rift.riftcontents[herb])
    -- if we have addiction, then only precache 1, otherwise, however much is needed
    if rift.precache[herb] ~= 0 and rift.riftcontents[herb] ~= 0 and 
		  (not svo.affs.addiction and (rift.invcontents[herb] &lt; rift.precache[herb]) or (rift.invcontents[herb] == 0)) then
      svo.echof(&quot;yep, need %s&quot;, herb)
			rift.doprecache = true; return
    end
  end
end

-- used by skeleton's check_herb to see that you can eat something. It checks the appropriate herb in inv if we can't outr
-- takes in dict.&lt;aff&gt;.herb as an argument
svo.signals.curemethodchanged:connect(function ()
  if svo.conf.curemethod == 'conconly' then
    sk.can_eat_for = function (aff)
      return (rift.invcontents[aff.eatcure[1]] &gt; 0)
    end
  elseif svo.conf.curemethod == 'transonly' then
    sk.can_eat_for = function (aff)
      return (rift.invcontents[aff.eatcure[2]] &gt; 0)
    end
  else -- handles nil and prefer*s for curemethod
    sk.can_eat_for = function (aff)
      return (rift.invcontents[aff.eatcure[1]] &gt; 0) or (rift.invcontents[aff.eatcure[2]] &gt; 0)
    end
  end
end, 'update svo.sk.can_eat_for on curemethod change')

local function siprandom(what)
  if not svo.es_vialids or not svo.es_vialids[what] or not svo.es_vialids[what][1] then return what end

  return svo.es_vialids[what][math.random(#svo.es_vialids[what])]
end

-- determine the sip method. gets a table as arg with two things - the conc and trans cure
svo.signals.curemethodchanged:connect(function ()
  svo.sip = function (what)
    local use = what.sipcure[1]
    if conf.siprandom then use = siprandom(use) end
    send(&quot;sip &quot;..use, conf.commandecho)
    sys.last_used[what.name] = use
  end
end, 'update svo.sip on curemethod change')

-- determine the apply method
svo.signals.curemethodchanged:connect(function ()
  svo.apply = function (what, whereto)
    whereto = whereto or ''
    local use = what.applycure[1]
    send('apply '..use..whereto, conf.commandecho)
    sys.last_used[what.name] = use
  end
end, 'update svo.apply on curemethod change')

-- used to determine what to eat, and set what we've eaten
svo.signals.curemethodchanged:connect(function ()
  if conf.curemethod == 'conconly' then
    sk.synceat = function(what)
      local use = what.eatcure[1]
      if rift.invcontents[use] &gt; 0 then
        send(&quot;eat &quot; .. use, conf.commandecho)
        sys.last_used[what.name] = use
      else
        rift.outr(use)
      end
    end
    sk.asynceat = function(what)
      local use = what.eatcure[1]
      if rift.invcontents[use] and rift.invcontents[use] &gt; 0 then
        send(&quot;eat &quot; .. use, conf.commandecho)
        rift.outr(use)
      else
        rift.outr(use)
        send(&quot;eat &quot; .. use, conf.commandecho)
      end
      sys.last_used[what.name] = use
    end

  elseif conf.curemethod == 'transonly' then
    sk.synceat = function(what)
      local use = what.eatcure[2]
      if rift.invcontents[use] &gt; 0 then
        send(&quot;eat &quot; .. use, conf.commandecho)
        sys.last_used[what.name] = use
      else
        rift.outr(use)
      end
    end
    sk.asynceat = function(what)
      local use = what.eatcure[2]
      if rift.invcontents[use] and rift.invcontents[use] &gt; 0 then
        send(&quot;eat &quot; .. use, conf.commandecho)
        rift.outr(use)
      else
        rift.outr(use)
        send(&quot;eat &quot; .. use, conf.commandecho)
      end
      sys.last_used[what.name] = use
    end

  elseif conf.curemethod == nil or conf.curemethod == 'preferconc' then
    sk.synceat = function(what)
      local use, use2 = what.eatcure[1], what.eatcure[2]
      -- if we don't have the conc cure in inv, but have the alchemy one, use alchemy
      if (not (rift.invcontents[use] &gt; 0) and (rift.invcontents[use2] &gt; 0))
        -- or if we don't have the conc cure in rift either, use alchemy
        or not (rift.riftcontents[use] &gt; 0) then
          use = use2
      end

      if rift.invcontents[use] &gt; 0 then
        send(&quot;eat &quot; .. use, conf.commandecho)
        sys.last_used[what.name] = use
      else
        rift.outr(use)
      end
    end
    sk.asynceat = function(what)
      local use, use2 = what.eatcure[1], what.eatcure[2]
      -- if we don't have the conc cure in inv, but have the alchemy one, use alchemy
      if (not (rift.invcontents[use] &gt; 0) and (rift.invcontents[use2] &gt; 0))
        -- or if we don't have the conc cure in rift either, use alchemy
        or not (rift.riftcontents[use] &gt; 0) then
          use = use2
      end

      if rift.invcontents[use] and rift.invcontents[use] &gt; 0 then
        send(&quot;eat &quot; .. use, conf.commandecho)
        rift.outr(use)
      else
        rift.outr(use)
        send(&quot;eat &quot; .. use, conf.commandecho)
      end
      sys.last_used[what.name] = use
    end

  elseif conf.curemethod == 'prefertrans' then
    -- should eat trans if it's in inv
    -- should eat trans if it's in the rift and no conc in inv
    sk.synceat = function(what)
      -- check if we should use trans
      local use, use2 = what.eatcure[1], what.eatcure[2]
      if (rift.invcontents[use2] &gt; 0)
        or (not (rift.invcontents[use] &gt; 0) and (rift.riftcontents[use2] &gt; 0)) then
          use = use2
      end

      if rift.invcontents[use] &gt; 0 then
        send(&quot;eat &quot; .. use, conf.commandecho)
        sys.last_used[what.name] = use
      else
        rift.outr(use)
      end
    end
    sk.asynceat = function(what)
      local use, use2 = what.eatcure[1], what.eatcure[2]
      if (rift.invcontents[use2] &gt; 0)
        or (not (rift.invcontents[use] &gt; 0) and (rift.riftcontents[use2] &gt; 0)) then
          use = use2
      end

      if rift.invcontents[use] and rift.invcontents[use] &gt; 0 then
        send(&quot;eat &quot; .. use, conf.commandecho)
        rift.outr(use)
      else
        rift.outr(use)
        send(&quot;eat &quot; .. use, conf.commandecho)
      end
      sys.last_used[what.name] = use
    end

  elseif conf.curemethod == 'prefercustom' then
    -- should eat trans if it's in inv
    -- should eat trans if it's in the rift and no conc in inv
    sk.synceat = function(what)
      if me.curelist[what.eatcure[1]] == what.eatcure[1] then
        local use, use2 = what.eatcure[1], what.eatcure[2]
        -- if we don't have the conc cure in inv, but have the alchemy one, use alchemy
        if (not (rift.invcontents[use] &gt; 0) and (rift.invcontents[use2] &gt; 0))
          -- or if we don't have the conc cure in rift either, use alchemy
          or not (rift.riftcontents[use] &gt; 0) then
            use = use2
        end

        if rift.invcontents[use] &gt; 0 then
          send(&quot;eat &quot; .. use, conf.commandecho)
          sys.last_used[what.name] = use
        else
          rift.outr(use)
        end
      else
        local use, use2 = what.eatcure[1], what.eatcure[2]
        if (rift.invcontents[use2] &gt; 0)
          or (not (rift.invcontents[use] &gt; 0) and (rift.riftcontents[use2] &gt; 0)) then
            use = use2
        end

        if rift.invcontents[use] &gt; 0 then
          send(&quot;eat &quot; .. use, conf.commandecho)
          sys.last_used[what.name] = use
        else
          rift.outr(use)
        end
      end
    end
    sk.asynceat = function(what)
      if me.curelist[what.eatcure[1]] == what.eatcure[1] then
        local use, use2 = what.eatcure[1], what.eatcure[2]
        -- if we don't have the conc cure in inv, but have the alchemy one, use alchemy
        if (not (rift.invcontents[use] &gt; 0) and (rift.invcontents[use2] &gt; 0))
          -- or if we don't have the conc cure in rift either, use alchemy
          or not (rift.riftcontents[use] &gt; 0) then
            use = use2
        end

        if rift.invcontents[use] and rift.invcontents[use] &gt; 0 then
          send(&quot;eat &quot; .. use, conf.commandecho)
          rift.outr(use)
        else
          rift.outr(use)
          send(&quot;eat &quot; .. use, conf.commandecho)
        end
        sys.last_used[what.name] = use
      else
        local use, use2 = what.eatcure[1], what.eatcure[2]
        if (rift.invcontents[use2] &gt; 0)
          or (not (rift.invcontents[use] &gt; 0) and (rift.riftcontents[use2] &gt; 0)) then
            use = use2
        end

        if rift.invcontents[use] and rift.invcontents[use] &gt; 0 then
          send(&quot;eat &quot; .. use, conf.commandecho)
          rift.outr(use)
        else
          rift.outr(use)
          send(&quot;eat &quot; .. use, conf.commandecho)
        end
        sys.last_used[what.name] = use
      end
    end

    -- disabled for now, because tracking which herb we used for an action is problematic
  -- elseif conf.curemethod == 'auto' then
  --   sk.synceat = function(what)
  --     -- if we have the alchemy cure, use it, otherwise stick to usual
  --     local haveusual, havealchemy = rift.invcontents[what], rift.invcontents[herb_conversions[what]]
  --     if haveusual and havealchemy then
  --       what = (math.random(1,2) == 1) and what or herb_conversions[what]
  --     elseif not haveusual then
  --       what = herb_conversions[what]
  --     end

  --     if rift.invcontents[what] &gt; 0 then
  --       send(&quot;eat &quot; .. what, conf.commandecho)
  --     else
  --       rift.outr(what)
  --     end
  --   end
  --   sk.asynceat = function(what)
  --     local haveusual, havealchemy = rift.invcontents[what], rift.invcontents[herb_conversions[what]]
  --     if haveusual and havealchemy then
  --       what = (math.random(1,2) == 1) and what or herb_conversions[what]
  --     elseif not haveusual then
  --       what = herb_conversions[what]
  --     end

  --     if rift.invcontents[what] and rift.invcontents[what] &gt; 0 then
  --       send(&quot;eat &quot; .. what, conf.commandecho)
  --       rift.outr(what)
  --     else
  --       rift.outr(what)
  --       send(&quot;eat &quot; .. what, conf.commandecho)
  --     end
    -- end
  end

  -- update the actual 'eat' function
  sk.checkaeony()
  svo.signals.aeony:emit()
end, 'update svo.eat on curemethod change')

svo.signals.systemstart:connect(function()
  svo.signals.curemethodchanged:emit()
end, 'create eat, apply, etc functions on system start')

svo.signals.aeony:connect(function ()
  if sys.sync then
    svo.eat = sk.synceat
  else
    svo.eat = sk.asynceat
  end
end, 'update svo.eat on aeon/retardation')

local smoke_herb_conversions = {
  elm      = 'cinnabar',
  skullcap = 'malachite',
  valerian = 'realgar',
}

-- pipes don't need to be refilled that often, so we'll do the herb selection realtime instead of recompiling this huge monster all the time
function sk.asyncfill(what, where)
  local orig = what

  -- work out if we need to change what to its alternative
  if conf.curemethod ~= 'conconly' and (

    conf.curemethod == 'transonly' or

    ((conf.curemethod == 'preferconc' or conf.curemethod == nil) and
      -- we don't have in forestal inventory, but do have alchemy in inventory, use alchemy
       (not (rift.invcontents[what] &gt; 0) and (rift.invcontents[smoke_herb_conversions[what]] &gt; 0)) or
        -- or if we don't have the conc cure in rift either, use alchemy
       (not (rift.riftcontents[what] &gt; 0))) or

    (conf.curemethod == 'prefertrans' and -- we *do* have the trans available
      (rift.invcontents[smoke_herb_conversions[what]] &gt; 0
        or (not (rift.invcontents[what] &gt; 0) and (rift.riftcontents[smoke_herb_conversions[what]] &gt; 0)))) or

    -- prefercustom, and we either prefer alchy and have it, or prefer conc and don't have it
    (conf.curemethod == 'prefercustom' and
      ((me.curelist[what] == smoke_herb_conversions[what] and rift.riftcontents[smoke_herb_conversions[what]] &gt; 0)
        or
       (me.curelist[what] == what and rift.riftcontents[what] &lt;= 0)
      )
    )) then
      what = smoke_herb_conversions[what]
  end

  sys.last_used['fill'..orig..'_physical'] = what
  pipes[orig].filledwith = what

  if rift.invcontents[what] &gt; 0 then
    if pipes[orig].puffs &gt; 0 then
      if not svo.defc.selfishness then
        send(&quot;empty &quot;..where, conf.commandecho)
      else
        for _ = 1, (pipes[orig].puffs + 1) do
          send(&quot;smoke &quot;..where, conf.commandecho)
        end
      end
    end

    send(&quot;put &quot; .. what .. &quot; in &quot; .. where, conf.commandecho)
    rift.outr(what)
  else
    rift.outr(what)
    if pipes[orig].puffs &gt; 0 then
      if not svo.defc.selfishness then
        send(&quot;empty &quot;..where, conf.commandecho)
      else
        for _ = 1, (pipes[orig].puffs + 1) do
          send(&quot;smoke &quot;..where, conf.commandecho)
        end
      end
    end
    send(&quot;put &quot; .. what .. &quot; in &quot; .. where, conf.commandecho)
  end
end

function sk.syncfill(what, where)
  local orig = what
  -- work out if we need to change what to its alternative
  if conf.curemethod ~= 'conconly' and (

    conf.curemethod == 'transonly' or

    ((conf.curemethod == 'preferconc' or conf.curemethod == nil) and
       (not (rift.invcontents[what] &gt; 0) and (rift.invcontents[smoke_herb_conversions[what]] &gt; 0))
        -- or if we don't have the conc cure in rift either, use alchemy
        or not (rift.riftcontents[what] &gt; 0)) or

    (conf.curemethod == 'prefertrans' and
      (rift.invcontents[smoke_herb_conversions[what]] &gt; 0)
        or (not (rift.invcontents[what] &gt; 0) and (rift.riftcontents[smoke_herb_conversions[what]] &gt; 0))) or

    -- prefercustom, and we either prefer alchy and have it, or prefer conc and don't have it
    (conf.curemethod == 'prefercustom' and (
      (me.curelist[what] == what and rift.riftcontents[what] &lt;= 0)
        or
      (me.curelist[what] == smoke_herb_conversions[what] and rift.riftcontents[smoke_herb_conversions[what]] &gt; 0)
    ))) then
      what = smoke_herb_conversions[what]
  end

  sys.last_used['fill'..orig..'_physical'] = what
  pipes[orig].filledwith = what

  if pipes[orig].puffs &gt; 0 then
    if svo.defc.selfishness then svo.echof(&quot;Problem - can't refill while selfish :/&quot;) return end
    send(&quot;empty &quot;..where, conf.commandecho)
  elseif rift.invcontents[what] &gt; 0 then
    send(&quot;put &quot; .. what .. &quot; in &quot; .. where, conf.commandecho)
  else
    rift.outr(what)
  end
end

svo.signals.aeony:connect(function ()
  if sys.sync then
    svo.fillpipe = sk.syncfill
  else
    svo.fillpipe = sk.asyncfill
  end
end, 'update svo.fillpipe')


function svo.riftline()
  for i = 1, #matches, 3 do
    local amount = tonumber(matches[i+1])
    local rawherbstring, herb = matches[i+2], false

    -- Achaea's rift doesn't use standard singular naming or even the short names,
    -- so substring find which herb is it
    for _, herbi in ipairs(rift.allherbs) do
      if rawherbstring:find(&quot;%f[%a]&quot;..herbi..&quot;%f[%A]&quot;) then
        herb = herbi
        break
      end
    end

    if herb and amount then
      rift.riftcontents[herb] = amount
    end
  end

  rift.update_riftlabel()
end

function svo.showrift()
  display(rift.riftcontents)
end

function svo.showinv()
  display(rift.invcontents)
end

function svo.showprecache()
  local count = 1

  local function makelink(herb, sign)
    if sign == &quot;-&quot; and rift.precache[herb] == 0 then
      echo &quot; &quot;
    elseif sign == &quot;+&quot; then
      echoLink(sign, [[svo.setprecache(&quot;]]..herb..[[&quot;, 1, 'add', nil, true)]], sign .. &quot; the &quot; .. herb .. &quot; amount&quot;)
    elseif sign == &quot;-&quot; then
      echoLink(sign, [[svo.setprecache(&quot;]]..herb..[[&quot;, 1, 'subtract', nil, true)]], sign .. &quot; the &quot; .. herb .. &quot; amount&quot;)
    else
      echo &quot; &quot;
    end

    return &quot;&quot;
  end

--[[  moveCursor('main', 0, getLastLineNumber('main'))
  debugf(&quot;line: &quot; .. getCurrentLine() .. &quot;, latest: &quot; .. getLastLineNumber('main'))
  if getCurrentLine() == &quot;-&quot; or getCurrentLine() == &quot; &quot; then
    insertText(&quot; &quot;)
    for i = 1, 1000 do deleteLine()
    debugf('deleting') end
  end]]
  svo.echof(&quot;Herb pre-cache list (%s defences):&quot;, svo.defs.mode)

  local t = {}; for herb in pairs(rift.precache) do t[#t+1] = herb end; table.sort(t)
  for i = 1, #t do
    local herb, amount = t[i], rift.precache[t[i]]
  -- for herb, amount in pairs(rift.precache) do
    if count % 3 ~= 0 then
      decho(string.format(&quot;&lt;153,204,204&gt;[&lt;91,134,214&gt;%d&lt;153,204,204&gt;%s%s] %-&quot;..(svo.intlen(amount) == 1 and '23' or '22')..'s', amount, makelink(herb, &quot;+&quot;), makelink(herb, &quot;-&quot;), herb))
    else
      decho(string.format(&quot;&lt;153,204,204&gt;[&lt;91,134,214&gt;%d&lt;153,204,204&gt;%s%s] %s&quot;, amount, makelink(herb, &quot;+&quot;), makelink(herb, &quot;-&quot;), herb)) end

    if count % 3 == 0 then echo(&quot;\n&quot;) end
    count = count + 1
  end

--[[  moveCursor('main', 0, getLastLineNumber('main'))
  moveCursor('main', #getCurrentLine(), getLastLineNumber('main'))
  insertText(&quot;\n-\n&quot;)]]
  echo&quot;\n&quot;
  svo.showprompt()
end

function svo.setprecache(herb, amount, flag, echoback, show_list)
  local sendf
  if echoback then sendf = svo.echof else sendf = svo.errorf end

  svo.assert(rift.precache[herb], &quot;what herb do you want to set a precache amount for?&quot;, sendf)

  if flag == 'add' then
    rift.precache[herb] = rift.precache[herb] + amount
  elseif flag == 'subtract' then
    rift.precache[herb] = rift.precache[herb] - amount
    if rift.precache[herb] &lt; 0 then rift.precache[herb] = 0 end
  elseif not flag or flag == 'set' then
    rift.precache[herb] = amount
  end

  if echoback then
    svo.echof(&quot;Will keep at least %d of %s out in the inventory now.&quot;, rift.precache[herb], herb)
  elseif show_list then
    svo.showprecache()
  end
  rift.checkprecache()
end

function svo.invline()
  rift.resetinvcontents()

  -- lowercase as the first letter is capitalised
  local line = line:lower()
  local tabledline = line:split(&quot;, &quot;)

  -- strip out the last 'and'
  if tabledline[#tabledline]:starts(&quot;and &quot;) then
    tabledline[#tabledline] = tabledline[#tabledline]:gsub(&quot;^and &quot;, '')
  end

  -- for everything we got in our inv
  for i = 1, #tabledline do
    local riftable = tabledline[i]
    if riftable:sub(-1) == &quot;.&quot; then riftable = riftable:sub(1,#riftable - 1) end -- kill trailing dot

    -- tally up rift.herbs_singular items
    if rift.herbs_singular[riftable] then
      rift.invcontents[rift.herbs_singular[riftable]] = rift.invcontents[rift.herbs_singular[riftable]] + 1
    end

    -- tally up rift.herbs_plural items
    for k,l in pairs(rift.herbs_plural) do
      local result = riftable:match(l)
      if result then
        rift.invcontents[k] = rift.invcontents[k] + tonumber(result)
      end
    end
  end

  rift.update_riftlabel()
  rift.checkprecache()
end

function svo.riftremoved()
  local removed = tonumber(matches[2])
  local what = rift.herbs_singular_sansprefix[matches[3]]
  local inrift = tonumber(matches[4])

  if not (what and removed and inrift) then return end

  if rift.riftcontents[what] then rift.riftcontents[what] = inrift end
  if rift.invcontents[what] then rift.invcontents[what] = rift.invcontents[what] + removed end

  rift.update_riftlabel()

  svo.signals.removed_from_rift:emit(removed, what, inrift)

  -- don't add if not doing it
  svo.checkaction(svo.dict.doprecache.misc, false)
  if svo.actions.doprecache_misc then
    svo.lifevision.add(svo.actions.doprecache_misc.p)
  end
end

function svo.pocketbelt_added()
  local removedamount = tonumber(matches[2])
  local what = matches[3]
  if not rift.invcontents[what] then return end

  rift.invcontents[what] = rift.invcontents[what] - removedamount
end

function svo.pocketbelt_removed()
  local removedamount = tonumber(matches[2])
  local what = matches[3]
  if not rift.invcontents[what] then return end

  rift.invcontents[what] = rift.invcontents[what] + removedamount
end

function svo.riftadded()
  local removed = tonumber(matches[2])
  local what = rift.herbs_singular_sansprefix[matches[3]]
  if not what then return end
  local inrift = tonumber(matches[4])

  if rift.riftcontents[what] then rift.riftcontents[what] = inrift end
  if rift.invcontents[what] then rift.invcontents[what] = rift.invcontents[what] - removed end
  if rift.invcontents[what] and rift.invcontents[what] &lt; 0 then rift.invcontents[what] = 0 end

  rift.update_riftlabel()
  rift.checkprecache()
end

function svo.riftnada()
  local what = matches[2]
  if rift.invcontents[what] then rift.invcontents[what] = 0 end

  rift.update_riftlabel()
  rift.checkprecache()
end

function svo.riftate()
  -- if conf.aillusion and not (usingbal'herb' or usingbal'moss') then
  --   resetFormat()
  --   echoLink(&quot; (i)&quot;, '', &quot;Precache considered this to be an illusion (because the system isn't eating anything right now) and didn't count the herb used&quot;, true)
  --   return
  -- end

  local what = matches[2]

  if not rift.herbs_singular[what] then return end

  if not svo.conf.arena then
    rift.invcontents[rift.herbs_singular[what]] = rift.invcontents[rift.herbs_singular[what]] - 1
    if rift.invcontents[rift.herbs_singular[what]] &lt; 0 then rift.invcontents[rift.herbs_singular[what]] = 0 end
  end

  rift.update_riftlabel()
  rift.checkprecache()
end

do
  local oldCL = createLabel
  function createLabel(name, posX, posY, width, height, fillBackground)
    oldCL(name, 0, 0, 0, 0, fillBackground)
    moveWindow(name, posX, posY)
    resizeWindow(name, width, height)
  end
end

function svo.toggle_riftlabel(toggle)
  if (type(toggle) == 'nil' and svo.riftlabel.hidden) or (type(toggle) ~= 'nil' and toggle) then
    svo.riftlabel:show()
    rift.update_riftlabel()
    svo.echof(&quot;Spawned the herbstat window.&quot;)
    svo.conf.riftlabel = true
    raiseEvent(&quot;svo config changed&quot;, 'riftlabel')
  elseif (type(toggle) == 'nil' and not svo.riftlabel.hidden) or (type(toggle) ~= 'nil' and not toggle) then
    svo.riftlabel:hide()
    svo.echof(&quot;Hid the herbstat window.&quot;)
    svo.conf.riftlabel = false
    raiseEvent(&quot;svo config changed&quot;, 'riftlabel')
  end
end

if not svo.systemloaded then
svo.signals.systemstart:add_post_emit(function ()
  if lfs.attributes(getMudletHomeDir() .. &quot;/svo/rift+inv/rift&quot;) then
    table.load(getMudletHomeDir() .. &quot;/svo/rift+inv/rift&quot;, rift.riftcontents)
  end
  if lfs.attributes(getMudletHomeDir() .. &quot;/svo/rift+inv/inv&quot;) then
    table.load(getMudletHomeDir() .. &quot;/svo/rift+inv/inv&quot;, rift.invcontents)
  end

  -- reset, because we can't have herbs in inv at login
  rift.resetinvcontents()

  for mode, _ in pairs(svo.defdefup) do
    rift.precachedata[mode] = {}

    for _,herb in pairs(rift.herbsminerals) do
      rift.precachedata[mode][herb] = 0
    end

    if mode == 'combat' then
      rift.precachedata[mode].irid = 1
      rift.precachedata[mode].kelp = 1
      rift.precachedata[mode].bloodroot = 1
    end
  end



  local tmp = {}
  if lfs.attributes(getMudletHomeDir() .. &quot;/svo/rift+inv/precachedata&quot;) then
    table.load(getMudletHomeDir() .. &quot;/svo/rift+inv/precachedata&quot;, tmp)
    svo.update(rift.precachedata, tmp)
    rift.precache = rift.precachedata[svo.defs.mode] or {}

    -- moss was removed, get rid of it
    for _, m in pairs(rift.precachedata) do
      if m.moss then m.moss = nil end
    end
  end
  rift.update_riftlabel()
end, 'post emit rift handling')
end

svo.signals.enablegmcp:connect(function()
  sendGMCP([[Core.Supports.Add [&quot;IRE.Rift 1&quot;] ]])
end, 'enable gmcp rift tracking')

svo.signals.saveconfig:connect(function ()
  svo.tablesave(getMudletHomeDir() .. &quot;/svo/rift+inv/rift&quot;, rift.riftcontents)
  svo.tablesave(getMudletHomeDir() .. &quot;/svo/rift+inv/inv&quot;, rift.invcontents)
  svo.tablesave(getMudletHomeDir() .. &quot;/svo/rift+inv/precachedata&quot;, rift.precachedata)
end, 'save rift config')


sk.checkaeony()
svo.signals.aeony:emit()

end -- end of svo rift loader

if svo.systemloaded then svo.loader.rift() end</script>
            <eventHandlerList/>
        </Script>
        <Script isActive="yes" isFolder="no">
            <name>Parry</name>
            <packageName></packageName>
            <script>-- Svof (c) 2011-2018 by Vadim Peretokin

-- Svof is licensed under a
-- Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.

-- You should have received a copy of the license along with this
-- work. If not, see &lt;http://creativecommons.org/licenses/by-nc-sa/4.0/&gt;.

svo = svo or {}; svo.loader = svo.loader or {}
svo.loader.parry = function()

local sys, affs, signals = svo.sys, svo.affs, svo.signals
local me, sps, sp_config = svo.me, svo.sps, svo.sp_config
local sp = svo.sp

svo.pl.dir.makepath(getMudletHomeDir() .. &quot;/svo/config&quot;)

-- check if we need to adjust parrying on any limbs or not
function svo.check_sp_satisfied()
  if sps.something_to_parry() then -- have we asked for any limbs to be parried?
    for name, limb in pairs(sp_config.parry_shouldbe) do
      if limb ~= sps.parry_currently[name] then
       sys.sp_satisfied = false; return
      end
    end
  elseif type(sp_config.parry) == 'string' and sp_config.parry == 'manual' then
    -- check if we need to unparry in manual
    for limb, status in pairs(sps.parry_currently) do
      if status ~= sp_config.parry_shouldbe[limb] then
       sys.sp_satisfied = false; return
      end
    end
  elseif sp_config.priority[1] and not sps.parry_currently[sp_config.priority[1]] then
    sp_config.parry_shouldbe[sp_config.priority[1]] = true
    sys.sp_satisfied = false; return
  end
  sys.sp_satisfied = true
end

svo.sp_limbs = {
  head = true,
  torso = true,
  [&quot;right arm&quot;] = true,
  [&quot;left arm&quot;] = true,
  [&quot;right leg&quot;] = true,
  [&quot;left leg&quot;] = true
}
local sp_limbs = svo.sp_limbs

sps.sp_fillup = function ()
  local t = {}
  for limb, _ in pairs(sp_limbs) do
    t[limb] = false
  end
  return t
end

if table.is_empty(sp_config) then
  svo.sp_config = { parry = &quot;&quot;, priority = {}, parry_actionlevel = {}, parry_shouldbe = sps.sp_fillup() }
	sp_config = svo.sp_config
	
  sps.parry_currently = sps.sp_fillup()
end

me.parry_currently = sps.parry_currently

sps.parry_options = {
  full = &quot;Parry the currently damaged limb (one that's mangled/mutilated).&quot;,
  lasthit = &quot;Parry the last hit limb (ie got hit left leg - will parry left leg).&quot;,
  [&quot;lasthit opposite limb&quot;] = &quot;Parry the opposite of the last hit limb, by limbs (ie got hit left leg - will parry right  leg).&quot;,
  [&quot;lasthit opposite side&quot;] = &quot;Parry the opposite of the last hit limb, by sides (ie got hit left leg - will parry left arm).&quot;,
  manual = &quot;Allows you to manually control parry with the p* aliases.&quot;
}

-- ask users to click on limbs for priority first, then ask for each limb in order to select action level,
-- then ask what to do with stancing when the action level happens, and what to do with parrying
sps.install = {
  {
    check = function () return #sp_config.priority == table.size(sp_limbs) end,
    act = function (step)
      svo.echof(&quot;Step %d - assign priorities to the limbs. Click on the following in the order of most important, or use the %s command:&quot;, step, svo.green(&quot;vp nextprio &lt;limb&gt;&quot;))
      echo(&quot;  &quot; .. svo.oneconcat(sp_limbs))
          resetFormat()
          deselect()
      for name, _ in pairs(sp_limbs) do
        moveCursor('main',  1, getLineNumber()+2)
        if selectString(name, 1) ~= -1 then
          setLink('svo.sp.nextprio (&quot;' .. name .. '&quot;, true)', 'Set ' .. name .. ' as the next limb in importance.')
          resetFormat()
          deselect()
        end
      end
      echo&quot;\n&quot;
    end},
  --[[{
    check = function ()
        for limb,_ in pairs(sp_limbs) do
          if sp_config.parry_actionlevel[limb] == nil then return false end
        end
        return true
      end,
    act = function (step)
      local function makecodestrings(name)
        local t = {}
        t[#t+1] = 'svo.sp.setparrylevel(&quot;'..name..'&quot;, false, true)'
        for amount = 275, 2000, 275 do
          t[#t+1] = 'svo.sp.setparrylevel(&quot;'..name..'&quot;, '..amount..', true)'
        end
        return t
      end
      local function maketooltipstrings(name)
        local t = {}
        t[#t+1] = 'Set ' .. name .. ' to ' .. 'none'
        for amount = 275, 2000, 275 do
          t[#t+1] = 'Set ' .. name .. ' to ' .. amount
        end
        return t
      end


      svo.echof(&quot;Step %d - assign a level above which parry should act for for each limb by right-clicking, or use the %s command:&quot;, step, svo.green(&quot;vp parrylevel &lt;limb&gt; &lt;amount, or 'none'&gt;&quot;))
      echo &quot;  &quot;
      for name, _ in pairs(sp_limbs) do
        echoPopup(name, makecodestrings(name), maketooltipstrings(name))
        echo(&quot; &quot;)
      end
      echo&quot;\n&quot;
    end},
]]
  {
    check = function () return sp_config.parry ~= &quot;&quot; end,
    act = function (step)
      svo.echof(&quot;Step %d - decide what parry strategy to use when a limb is over the limit by clicking on it, or using the %s command:&quot;, step, svo.green(&quot;vp parrystrat &lt;strategy&gt;&quot;))
      echo &quot;  &quot;
      for name, tooltip in pairs(sps.parry_options) do
        echoLink(name, 'svo.sp.setparry (&quot;' .. name .. '&quot;, true)', tooltip)
        echo &quot; &quot;
      end
      echo&quot;\n&quot;
    end},

}

sps.installnext = function()
  if not sps.settingup then return end
  for i, c in ipairs(sps.install) do
    if not c.check() then
      echo&quot;\n&quot;
      c.act(i)
      return
    end
  end

  sps.settingup = nil
  svo.echof(&quot;Parry setup done :)&quot;)
end


function sp.setup()
  sp_config = { parry = &quot;&quot;, priority = {}, parry_actionlevel = {}, parry_shouldbe = sps.sp_fillup() }
  sps.settingup = true

  sps.installnext()
end

function sp.nextprio(limb, echoback)
  local sendf
  if echoback then sendf = svo.echof else sendf = svo.errorf end
  local prios = sp_config.priority

  if not sp_limbs[limb] then
    sendf(&quot;Sorry, %s isn't a proper limb name. They are:\n  %s&quot;, limb, svo.oneconcat(sp_limbs))
    return; end

  if svo.contains(prios, limb) then
    sendf(&quot;%s is already in the list.&quot;, limb); return; end

  prios[#prios+1] = limb
  if echoback then
    svo.echof(&quot;%s added; current list: %s&quot;, limb, table.concat(prios, &quot;, &quot;))
  end

  if #prios == table.size(sp_limbs) then sps.installnext() end
end

function sp.setparry(option, echoback)
  local sendf
  if echoback then sendf = svo.echof else sendf = svo.errorf end

  if not option then
    sendf(&quot;Possible options are:&quot;)
    echo&quot;  &quot;
    for name, tooltip in pairs(sps.parry_options) do
      echoLink(name, 'svo.sp.setparry (&quot;' .. name .. '&quot;, true)', tooltip)
      echo &quot;   &quot;
    end
    echo'\n'
    svo.showprompt()
    return
  elseif not sps.parry_options[option] then
    sendf(&quot;Sorry, %s isn't a valid option for parry. They are:&quot;)
    echo&quot;  &quot;
    for name, tooltip in pairs(sps.parry_options) do
      echoLink(name, 'svo.sp.setparry (&quot;' .. name .. '&quot;, true)', tooltip)
      echo &quot;   &quot;
    end
    echo'\n'
    svo.showprompt()
    return
  end

  sp_config.parry = option
  if echoback then
    svo.echof(&quot;Will use the %s strategy for parry.&quot;, sp_config.parry)
    svo.showprompt()
  end

  svo.sp_checksp()
  sps.installnext()
end

function sp.setparrylevel(limb, amount, echoback)
  local sendf
  if echoback then sendf = svo.echof else sendf = svo.errorf end

  if not sp_limbs[limb] then
    sendf(&quot;Sorry, %s isn't a proper limb name. They are:\n  %s&quot;, limb, svo.oneconcat(sp_limbs))
    return; end

  if not tonumber(amount) and amount ~= false then
    sendf(&quot;To what amount do you want to set %s to?&quot;, limb)
    return; end

  sp_config.parry_actionlevel[limb] = tonumber(amount)

  if echoback then
    svo.echof(&quot;Set the %s parry action level to %s&quot;, limb, amount and tostring(amount) or 'none')
  end

  for limbname,_ in pairs(sp_limbs) do
    if sp_config.parry_actionlevel[limbname] == nil then return end
  end
  sps.installnext()
end

function svo.sp_setparry(what, echoback)
  local sendf
  if echoback then sendf = svo.echof else sendf = svo.errorf end

  local t = {
    h = 'head',
    tt = 'torso',
    rl = &quot;right leg&quot;,
    ll = &quot;left leg&quot;,
    ra = &quot;right arm&quot;,
    la = &quot;left arm&quot;,
    n = 'nothing'
  }

  svo.assert(t[what], &quot;invalid short letter for svo.sp_setparry&quot;, sendf)

  for limb, _ in pairs(sp_limbs) do
    if limb == t[what] then sp_config.parry_shouldbe[limb] = true
      else sp_config.parry_shouldbe[limb] = false end
  end

  svo.sp_checksp()
  svo.make_gnomes_work()
end

sp.show = function ()
  svo.echof(&quot;Parry report:&quot;)

  --[[svo.echof(&quot;Action levels:&quot;)
  for limb, level in pairs(sp_config.parry_actionlevel) do
    echo&quot;  &quot; svo.echof(&quot;%s: parry %s&quot;, limb, tostring(level))
  end]]

  svo.echof(&quot;Limb priorities: %s&quot;, table.concat(sp_config.priority, &quot;, &quot;))
  svo.echof(&quot;Parry strategy: %s (currently parrying: %s)&quot;, type(sp_config.parry) == 'string' and sp_config.parry or &quot;custom function&quot;,

  (function ()
    local parrying_list = {}
    for limb, parrying in pairs(sp_config.parry_shouldbe) do
      if parrying then parrying_list[#parrying_list+1] = limb end
    end

    return table.concat(parrying_list, &quot;, &quot;) end)())
end

svo.sp_checksp = function ()
  -- check parry
  -- see if any priories have been set for strategies that require them
  local prios, priosset = sp_config.priority, true
  if type(prios) ~= 'table' then
    priosset = false
  end

  if priosset and sp_config.parry == 'full' then
    local alreadyset
    for i = 1, #prios do
      local limb = prios[i]
      if not alreadyset and type(sp_config.parry_actionlevel[limb]) == 'number' and (affs['mangled'..limb] or (limb == 'head' and (affs.serioustrauma or affs.mildtrauma)) or (limb == 'torso' and (affs.mildconcussion or affs.seriousconcussion))) then
        sp_config.parry_shouldbe[limb] = true
        alreadyset = true
      else
        sp_config.parry_shouldbe[limb] = false
      end
    end

  elseif sp_config.parry == 'lasthit' then
    for limb, _ in pairs(sp_config.parry_shouldbe) do
      if limb == me.lasthitlimb then
        sp_config.parry_shouldbe[limb] = true
      else
        sp_config.parry_shouldbe[limb] = false
      end
    end

  elseif sp_config.parry == &quot;lasthit opposite limb&quot; then
    local t = {
      head = 'torso',
      torso = 'head',
      [&quot;right arm&quot;] = &quot;left arm&quot;,
      [&quot;left arm&quot;] = &quot;right arm&quot;,
      [&quot;right leg&quot;] = &quot;left leg&quot;,
      [&quot;left leg&quot;] = &quot;right leg&quot;
    }

    local wanted = t[me.lasthitlimb]

    if wanted then
      for limb, _ in pairs(sp_config.parry_shouldbe) do
        if limb == wanted then
          sp_config.parry_shouldbe[limb] = true
        else
          sp_config.parry_shouldbe[limb] = false
        end
      end
    end

  elseif sp_config.parry == &quot;lasthit opposite side&quot; then
    local t = {
      head = 'torso',
      torso = 'head',
      [&quot;right arm&quot;] = &quot;right leg&quot;,
      [&quot;left arm&quot;] = &quot;left leg&quot;,
      [&quot;right leg&quot;] = &quot;right arm&quot;,
      [&quot;left leg&quot;] = &quot;left arm&quot;
    }

    local wanted = t[me.lasthitlimb]

    if wanted then
      for limb, _ in pairs(sp_config.parry_shouldbe) do
        if limb == wanted then
          sp_config.parry_shouldbe[limb] = true
        else
          sp_config.parry_shouldbe[limb] = false
        end
      end
    end

  elseif type(sp_config.parry) == 'function' then
    local s,m = pcall(sp_config.parry)
    if not s then svo.echof(&quot;Your custom parry function had a problem:\n  %s&quot;, m) end
  end

  -- check if we need to adjust our parry
  svo.check_sp_satisfied()

  signals.after_lifevision_processing:block(svo.sp_checksp)
end

-- check custom parry functions whenever we gain or lose an aff
-- implemented in another function and not svo.sp_checksp, because of https://github.com/katcipis/luanotify/issues/24
sps.checkcustomparry = function()
  if type(sp_config.parry) == 'function' then
    sp_config.parry()

    -- check if we need to adjust our parry
    svo.check_sp_satisfied()
  end
end
signals.svogotaff:connect(sps.checkcustomparry, 'check parry when afflicted')
signals.svolostaff:connect(sps.checkcustomparry, 'check parry when cured')
-- public API
svo.checkcustomparry = sps.checkcustomparry

signals.after_lifevision_processing:connect(svo.sp_checksp, 'check if we need to change parry on prompt')
signals.after_lifevision_processing:block(svo.sp_checksp)

sps.something_to_parry = function ()
  for _, shouldparry in pairs(sp_config.parry_shouldbe) do
    if shouldparry then return true end
  end

  return false -- don't unparry if we have all zero's as shouldparry
end

signals.saveconfig:connect(function () svo.tablesave(getMudletHomeDir() .. &quot;/svo/config/sp_config&quot;, sp_config) end, 'save parry config')

local sp_config_path = getMudletHomeDir() .. &quot;/svo/config/sp_config&quot;

if lfs.attributes(sp_config_path) then
  local ok, msg = pcall(table.load,sp_config_path, sp_config)
  if not ok then
    os.remove(sp_config_path)
    tempTimer(10, function()
      svo.echof(&quot;Your parry config file was corrupted - I've deleted it so the system can load other stuff OK. You'll need to set the parry options again with vconfig sp. (%q)&quot;, msg)
    end)
  end
end

end -- end of svo parry loader

if svo.systemloaded then svo.loader.parry() end</script>
            <eventHandlerList/>
        </Script>
        <Script isActive="yes" isFolder="no">
            <name>Priorities</name>
            <packageName></packageName>
            <script>-- Svof (c) 2011-2018 by Vadim Peretokin

-- Svof is licensed under a
-- Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.

-- You should have received a copy of the license along with this
-- work. If not, see &lt;http://creativecommons.org/licenses/by-nc-sa/4.0/&gt;.

--[[ Logic: keep the prios embedded in the svo.dict.*.*.spriority/svo.dict.*.*.aspriority, don't keep a table
      of it's own. When exporting/importing, create such tables.]]

svo = svo or {}; svo.loader = svo.loader or {}
svo.loader.prio = function()

local sys, signals, sk, prio = svo.sys, svo.signals, svo.sk, svo.prio

svo.pl.dir.makepath(getMudletHomeDir() .. &quot;/svo/prios&quot;)

function prio.export (name, options, echoback)
  local sendf; if echoback then sendf = svo.echof end
  svo.assert(name, &quot;what name do you want to save this list as?&quot;, sendf)

  -- kv table of what to export
  local to_export = {
    herb = {
      prewrite = &quot;Herb cures: &quot;,
    },
    smoke = {
      prewrite = &quot;Smoke cures: &quot;,
    },
    salve = {
      prewrite = &quot;Salve cures: &quot;,
    },
    sip = {
      prewrite = &quot;Sipping balance: &quot;,
    },
    purgative = {
      prewrite = &quot;Purgative cures: &quot;,
    },
    physical = {
      prewrite = &quot;Balance or equilibrium actions: &quot;,
    },
    focus = {
      prewrite = &quot;Focus cures: &quot;,
    },
    moss = {
      prewrite = &quot;Moss balances (these don't really make sense to order): &quot;,
    },
    misc = {
      prewrite = &quot;Miscallaneous actions: &quot;,
    },
    slowcuring = {
      prewrite = &quot;Slow curing mode priorities: &quot;
    }
  }

  if not options or options == &quot;&quot; or options == &quot; &quot; then
    for _, v in pairs(to_export) do
      v.o = true
    end
  elseif type(options) == 'string' then
    for w in string.gmatch(options, &quot;%a+&quot;) do
      if to_export[w] then to_export[w].o = true end
    end
  elseif type(options) == 'table' then
    for _, w in ipairs(options) do
      if to_export[w] then to_export[w].o = true end
    end
  end

  --[[ generate a single table like so:
  {
    herb = {
      'relapsing',
      'paranoia',
      'vapors',
      ...
    },

    salve = {
    ....
    }

  }

  Writing out though, skip the initial whole table itself.
  ]]

  local data
  local s = {
    &quot;-- Priorities list '&quot;.. name .. &quot;' by &quot;.. sys.charname .. &quot;, exported @ &quot; .. os.date()..&quot;\n&quot;,
    &quot;-- Note: The lower the priority in the list without a number, or the lower number - the more important the thing is. ie, things at the bottom of the list will get done before those on the top!&quot;
  }


  for priority, priotbl in pairs(to_export) do
    if priotbl.o then
      if priority == 'slowcuring' then
        data = svo.make_sync_prio_table(&quot;%s_%s&quot;)
      else
        data = svo.make_prio_table(priority)
      end

      s[#s+1] = &quot;\n-- &quot; .. priotbl.prewrite
      s[#s+1] = priority .. &quot; = &quot; .. svo.pl.pretty.write(data)
    end
  end

  s = table.concat(s, &quot;\n&quot;)

  svo.pl.dir.makepath(getMudletHomeDir() .. &quot;/svo/prios&quot;)
  io.output(getMudletHomeDir() .. &quot;/svo/prios/&quot;..name, 'w')
  io.write(s)
  io.close()

  if echoback then svo.echof(&quot;exported %s prio to %s&quot;, name, getMudletHomeDir() .. &quot;/svo/prios/&quot;..name) end
  svo.debugf(&quot;exported %s prio to %s&quot;, name, getMudletHomeDir() .. &quot;/svo/prios/&quot;..name)
end

function prio.list(echoback)
  local dir = getMudletHomeDir() .. &quot;/svo/prios&quot;
  local list = {}

  for file in lfs.dir(dir) do
    if file ~= &quot;.&quot; and file ~= &quot;..&quot; then
      list[#list+1] = file
    end
  end

  if echoback then
    svo.echof(&quot;Priorities that we've got stored in '%s':\n  %s&quot;, dir, svo.concatand(list))
  else
    return list
  end
end

-- returns the table of actions in a balance
function prio.getlist(balance)
  return svo.make_prio_table(balance)
end

-- returns a table of actions in a balance, sorted most important first, without gaps
function prio.getsortedlist(balance)
  -- get into table...
  local data
  if balance ~= 'slowcuring' then
    data = svo.make_prio_table(balance)
  else
    data = svo.make_sync_prio_table(&quot;%s_%s&quot;)
  end
  local orderly = {}

  -- create an indexed list of just the priorities only
  for i,_ in pairs(data) do
    orderly[#orderly+1] = i
  end

  -- invert the list, so actions are ordered most important first
  table.sort(orderly, function(a,b) return a&gt;b end)

  -- sort original keys usin the new sorting
  local sortedprios = {}
  for _, sortedprio in ipairs(orderly) do
    sortedprios[#sortedprios+1] = data[sortedprio]
  end

  return sortedprios
end

-- returns the highest number used, and what uses it, in a balance
function prio.gethighest(balance)
  local t = svo.make_prio_table(balance)

  -- there could be holes - can't use #
  local maxprio, maxaction = 0
  for prioname, action in pairs(t) do
    if prioname &gt; maxprio then
      maxprio = prioname
      maxaction = action
    end
  end

  return maxprio, maxaction
end

-- returns a sorted list of actions in a balance by priority
function prio.sortlist(actions, balance)
  svo.assert(type(actions) == 'table', &quot;svo.prio.sortlist: actions must be an indexed table (a list)&quot;)
  svo.assert(balance, &quot;svo.prio.sortlist: in which balance do you want to check these actions in?&quot;)

  table.sort(actions, function(a,b)
    return svo.dict[a] and svo.dict[a][balance] and svo.dict[b] and svo.dict[b][balance] and
      svo.dict[a][balance].aspriority &gt; svo.dict[b][balance].aspriority
  end)

  return actions
end

function prio.getaction(num, balance)
  svo.assert(num and balance, &quot;What number and balance to use?&quot;)
  local data = svo.make_prio_table(balance)
  return data[num]
end

function prio.getslowaction(num)
  svo.assert(num, &quot;What number to use?&quot;)
  local data = svo.make_sync_prio_table(&quot;%s_%s&quot;)
  if data[num] then
    return data[num]:match(&quot;(%w+)_(%w+)&quot;)
  end
end

-- inserts an action at balance and bumps all current actions down if necessary
-- string, string, number -&gt; boolean
-- inserts an action at balance and bumps all current actions down if necessary.
-- because we're really only swapping items in the priority list and not inserting, we don't need to worry
-- about items underflowing past 0 priority yet
function prio.insert(action, balance, number, echoback)
  number = tonumber(number)

  if balance == 'balance' then balance = 'physical' end

  if balance == 'slowcuring' then
    local validaction, plainaction = svo.valid_sync_action(action)

    if not validaction then return false, plainaction end
  end

  local function getpriotable(balancename)
    if balancename ~= 'slowcuring' then
      return svo.make_prio_table(balancename)
    else
      return svo.make_sync_prio_table(&quot;%s_%s&quot;)
    end
  end

  local function insertat(actionname, balancename, newprio)
    if balancename ~= 'slowcuring' then
      svo.dict[actionname][balancename].aspriority = newprio
    else
      svo.dict[actionname][balancename].spriority = newprio
    end
    if echoback then svo.echof(&quot;Set %s's priority in %s balance to %d.&quot;, actionname, balancename, newprio) end
    raiseEvent(&quot;svo prio changed&quot;, actionname, balancename, newprio, (balancename == 'slowcuring' and 'slowcuring'))
  end

  local t = getpriotable(balance)
  local originalt = svo.deepcopy(t)

  if balance ~= 'slowcuring' and not t then return nil, &quot;no such balance: &quot;..balance end

  -- if nothing is in the desired index, then just insert. If something is, shuffle down first.
  if not t[number] then
    insertat(action, balance, number)
  else
    local function index_of(table, element)
      for k,v in pairs(table) do
        if v == element then return k end
      end
    end

    -- remove from its current position
    local oldnum = index_of(t, action)
    t[oldnum] = nil

    -- move everything below the old index (oldnum) one up
    local newt = {}
    for k,v in pairs(t) do
      if k &lt;= oldnum then
        newt[k+1] = v
      else
        newt[k] = v
      end
    end

    -- copy items into a new table, one lower if they're at or below new index (number)
    local l = {}
    for k,v in pairs(newt) do
      if k &lt;= number then -- if at or below - shuffle 1 down, unless it's at the previous position or below - then keep it
        l[k-1] = v
      else  -- if above: keep where it was
        l[k] = v
      end
    end

    l[number] = action -- insert our action back in
    local action_prio = {} -- create an action-value list of the new priorities
    for k,v in pairs(l) do action_prio[v] = k end

    -- then read off our diff of new list and store away new prios.
    local diff = svo.basictableindexdiff(originalt, l) -- obtain an indexed list of all the different positions
    for _, a in pairs(diff) do
      if balance ~= 'slowcuring' then
        svo.dict[a][balance].aspriority = action_prio[a]
        raiseEvent(&quot;svo prio changed&quot;, a, balance, action_prio[a])
      else
        local _, syncaction, syncbalance = svo.valid_sync_action(a)
        svo.dict[syncaction][syncbalance].spriority = action_prio[a]
        raiseEvent(&quot;svo prio changed&quot;, syncaction, syncbalance, action_prio[a], 'slowcuring')
      end
    end

    if echoback then svo.echof(&quot;Set %s's priority in %s balance to %d.&quot;, action, balance, number) end
  end

  return true
end

function prio.getnumber(aff, balance)
  svo.assert(aff and balance and svo.dict[aff] and svo.dict[aff][balance], &quot;Such affliction/defence or balance doesn't exist&quot;)
  return svo.dict[aff][balance].aspriority
end

function prio.cleargaps(balance, echoback)
  -- sync mode
  if balance == 'slowcuring' then
    local data = svo.make_sync_prio_table(&quot;%s_%s&quot;)

    local max=0
    for k,_ in pairs(data) do
      if k&gt;max then max=k end
    end

    local t, n = {}, 0

    for i=1,max do
      if data[i] then n=n+1 t[n]=data[i] end
    end

    -- create an action - prio table for retrieval of location using diffs
    local action_prio = {}
    for i = 1, #t do action_prio[t[i]] = i end

    -- create a diff, using the old table first as it has no holes
    local diff = svo.basictableindexdiff(t, data)

    -- now only change &amp; notify for the delta differences
    for _, a in pairs(diff) do
      local _, syncaction, syncbalance = svo.valid_sync_action(a)
      svo.dict[syncaction][syncbalance].spriority = action_prio[a]
      raiseEvent(&quot;svo prio changed&quot;, syncaction, syncbalance, action_prio[a], 'slowcuring')
    end

    if echoback then svo.echof(&quot;Cleared all gaps for the slow curing prio.&quot;) end
  -- normal modes
  else
    local data = svo.make_prio_table(balance)

    local max=0
    for k,_ in pairs(data) do
      if k&gt;max then max=k end
    end

    local t, n = {}, 0

    for i=1,max do
      if data[i] then n=n+1 t[n]=data[i] end
    end

    -- create an action - prio table for retrieval of location using diffs
    local action_prio = {}
    for i = 1, #t do action_prio[t[i]] = i end

    local diff = svo.basictableindexdiff(t, data)

    for _, a in pairs(diff) do
      svo.dict[a][balance].aspriority = action_prio[a]
      raiseEvent(&quot;svo prio changed&quot;, a, balance, action_prio[a])
    end

    if echoback then svo.echof(&quot;Cleared all gaps for the %s prio.&quot;, balance) end
  end
  svo.showprompt()
end

function prio.usedefault(echoback)
  local sendf; if echoback then sendf = svo.echof else sendf = function() end end

  -- um. this fails for some reason on Windows.
--[[  local s,m = os.remove(getMudletHomeDir() .. &quot;/svo/prios/current&quot;)
  if not s then svo.echof(&quot;Couldn't update because of: &quot;..tostring(m)) return end]]

  if prio.import('current', false, false, true) then
    sendf(&quot;Updated to default priorities.&quot;)
  else
    sendf(&quot;Couldn't update to default priorities :|&quot;) end
end

function prio.import(name, echoback, report_errors, use_default)
  local sendf; if echoback then sendf = svo.echof else sendf = function() end end

  local filename
  if not name then
    filename = invokeFileDialog(true, &quot;Select the priority list you'd like to import&quot;)
    if filename == &quot;&quot; then
      sendf(&quot;Cancelled; don't have anything to import.&quot;)
      return
    end
  end

  local path = filename or getMudletHomeDir() .. &quot;/svo/prios/&quot;.. name

  local importables = {
    'herb',
    'smoke',
    'salve',
    'sip',
    'purgative',
    'physical',
    'focus',
    'moss',
    'misc',
    'slowcuring',
  }

  local s
  if name == 'current' and (use_default or not lfs.attributes(path)) then
    s = &quot;&quot;
    -- adds in the default prios here at compile-time
    -- s = $(
    --     io.input(&quot;bin/default_prios&quot;)
    --     local prios = io.read(&quot;*a&quot;)
    --     _put(string.format(&quot;%q&quot;, prios))
    --     )
  else
    svo.assert(lfs.attributes(path), name .. &quot; prio doesn't exist.&quot;, sendf)

    io.input(path)
    s = io.read(&quot;*all&quot;)
  end

  -- load file into our sandbox; credit to http://lua-users.org/wiki/SandBoxes
  local i = {}
  -- run code under environment
  local function run(untrusted_code)
    local untrusted_function, message = loadstring(untrusted_code)
    if not untrusted_function then return nil, message end
    setfenv(untrusted_function, i)
    return pcall(untrusted_function)
  end

  local ok, m = run(s)
  if not ok then sendf(&quot;There's a syntax problem in the prios file, we couldn't load it:\n  %s&quot;, m) return end

  local function set(num, action, balance, priority)
    if not (svo.dict[action] and svo.dict[action][balance]) then
      if report_errors then
        if not svo.dict[action] then sendf(&quot;Skipping %s, don't know such thing.&quot;, action) else
          sendf(&quot;Skipping %s, it doesn't use %s balance.&quot;, action, balance) end
      end
    else
      svo.dict[action][balance][priority] = num
    end
  end

  -- create a snapshot of the before state for all balances, since dict_setup might mess with any
  local beforestate = sk.getbeforestateprios()

  local contains, sfind = table.contains, string.find
  -- table i now contains subtables with all of our stuff
  for balance,balancet in pairs(i) do
    if contains(importables, balance) then
      if balance == 'slowcuring' then
        -- reset all current ones to zero
        svo.clear_sync_prios()

        for num, action in pairs(balancet) do
          -- have to weed out action name _ balance name first
          local _,_, actionname, balancename = sfind(action, '(%w+)_(%w+)')
          set(num, actionname, balancename, 'spriority')
        end
      else
        -- reset all current ones to zero
        svo.clear_balance_prios(balance)
        for num, action in pairs(balancet) do
          set(num, action, balance, 'aspriority')
        end
      end
    end
  end
  svo.dict_setup()
  svo.dict_validate()

  local afterstate = sk.getafterstateprios()
  sk.notifypriodiffs(beforestate, afterstate)

  if echoback then svo.echof(&quot;Imported %s prio list.&quot;, name) end
  svo.debugf(&quot;imported %s prio.&quot;, name)
  return true
end

signals.saveconfig:connect(function ()
  prio.export('current')
end, 'save prios on quit')

signals.systemstart:connect(function ()
  prio.import('current')
end, 'load prios on start')

end -- end of svo prio loader

if svo.systemloaded then svo.loader.prio() end</script>
            <eventHandlerList/>
        </Script>
    </ScriptPackage>
    <KeyPackage/>
    <HelpPackage>
        <helpURL></helpURL>
    </HelpPackage>
</MudletPackage>
