<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
    <TriggerPackage>
        <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>Data Capture</name>
            <script></script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#ff0000</mFgColor>
            <mBgColor>#ffff00</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList/>
            <regexCodePropertyList/>
            <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Lists</name>
                <script></script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList/>
                <regexCodePropertyList/>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>NameDB cwho</name>
                    <script>temp_name_list = {}
temp_dragon = 0
ndb.temp_classes_list = {}</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>100</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>^Citizen\s+Rank\s+CT\s+Class$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                    </regexCodePropertyList>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Get name (cwho)</name>
                        <script>resetFormat()
local match = getColorWildcard(14)

if match then
  local matches = multimatches[1]
  local isdragon
  if (matches[4] and matches[4]:lower():find(&quot;dragon&quot;)) then matches[4] = nil; isdragon = true end

  temp_name_list[#temp_name_list + 1] = {
    name = match[1],
    class = (matches[4] and matches[4]:lower()),
    city_rank = tonumber(matches[3]),
    city = gmcp.Char.Status.city:match(&quot;^(%w+)&quot;)
  }

  if isdragon then temp_name_list[#temp_name_list].dragon = 1 end

	-- if we know a class, add it in
	local class = ndb.getclass(match[1])
	local dragon
	if ndb.isdragon then dragon = ndb.isdragon(match[1]) end

	if class and class ~= &quot;&quot; then
		ndb.temp_classes_list[class] = (ndb.temp_classes_list[class] or 0) + 1
	if matches[4] and dragon  then cecho(&quot; &lt;a_darkwhite&gt;(Dragon)&quot;) temp_dragon = temp_dragon +1 elseif dragon then cecho(&quot; &lt;a_darkwhite&gt;(&quot;..class:title()..&quot;)&quot;) temp_dragon = temp_dragon +1 
	end end
end</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^([A-Za-z].+)\s+(1|2|3|4|5|6)\s+(?:On|Off)\s+(.*)$</string>
                            <string>return not isPrompt()</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                            <integer>4</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Stop getting (cwho)</name>
                        <script>setTriggerStayOpen(&quot;NameDB cwho&quot;, 0)

db:merge_unique(ndb.db.people, temp_name_list)

for _, person in pairs(temp_name_list) do
  raiseEvent(&quot;NameDB saw list name&quot;, person.name)
end

if next(ndb.temp_classes_list) then
  local classes = svo.keystolist(ndb.temp_classes_list)
  table.sort(classes)

  for i = 1, #classes do
    classes[i] = ndb.temp_classes_list[classes[i]] .. &quot; &quot;..(ndb.temp_classes_list[classes[i]] == 1 and classes[i] or string.pluralize(classes[i]))
  end

  moveCursor(0, getLineNumber())
  svo.itf(&quot;%s present, of those %s %s dragon%s (%s total).\n&quot;, svo.concatand(classes), temp_dragon, (temp_dragon == 1 and 'is a' or 'are'), (temp_dragon == 1 and '' or 's'), #temp_name_list)
  moveCursorEnd()
  ndb.temp_classes_list = nil
end


temp_name_list = nil

raiseEvent(&quot;NameDB got new data&quot;)</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^\d+</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>NameDB hwho</name>
                    <script>temp_name_list = {}</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>100</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>Member              Rank      HTell  HNTell  Probation      Class</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>3</integer>
                    </regexCodePropertyList>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Get name (hwho)</name>
                        <script>if matches[3]:lower() == &quot;dragon&quot; then matches[3] = nil end

temp_name_list[#temp_name_list + 1] = {
  name = matches[2],
  class = (matches[3] and matches[3]:lower()),
  guild = ndb.findfromtable(gmcp.Char.Status.house, ndb.valid.houses)
}</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^(\w+)\s+(?:\* )?\d+\s+\w+\s+\w+\s+\w+\s+(\w+)$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Stop getting (hwho)</name>
                        <script>setTriggerStayOpen(&quot;NameDB hwho&quot;, 0)

db:merge_unique(ndb.db.people, temp_name_list)

for _, person in pairs(temp_name_list) do
  raiseEvent(&quot;NameDB saw list name&quot;, person.name)
end

temp_name_list = nil

raiseEvent(&quot;NameDB got new data&quot;)</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^\d+</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Citizens</name>
                    <script></script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>93</conditonLineDelta>
                    <mStayOpen>999</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>^The following are (?:IN)?ACTIVE citizens of (\w+)\:$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                    </regexCodePropertyList>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Stop getting (citizens)</name>
                        <script>setTriggerStayOpen(&quot;Citizens&quot;, 0)
stop_capturing = true


ndb.templist = {}
ndb.templist = string.split(ndb.tempnames, &quot;,&quot;)

for i,k in pairs(ndb.templist) do
	ndb.templist[i] = k:trim()
end

-- last on name on list might have a dot
if string.sub(ndb.templist[#ndb.templist], -1, -1) == &quot;.&quot; then
	ndb.templist[#ndb.templist] = string.sub(ndb.templist[#ndb.templist], 1, -2)
end

ndb.tempnames = nil

temp_name_list = {}

for i,j in ipairs(ndb.templist) do
	temp_name_list[#temp_name_list + 1] = {
		name = j,
		city = gmcp.Char.Status.city:match(&quot;^(%w+)&quot;)
	}
end

db:merge_unique(ndb.db.people, temp_name_list)

raiseEvent(&quot;NameDB got new data&quot;)

-- reload all highlights, as citizens list is big anyhow
ndb.loadhighlights()</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>Total:</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>2</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Save line</name>
                        <script>if stop_capturing then stop_capturing = nil return end
if string.find(line, &quot;The following are ACTIVE citizens of .*&quot;) then return end

if ndb.tempnames == nil then ndb.tempnames = &quot;&quot; end

ndb.tempnames = ndb.tempnames .. &quot; &quot; .. line
</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>return true</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>4</integer>
                        </regexCodePropertyList>
                    </Trigger>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>House members</name>
                    <script>temp_name_list = {}</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>999</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string> HR Stat Class      Name + Title</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>3</integer>
                    </regexCodePropertyList>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Get name (house members)</name>
                        <script>local match = getColorWildcard(14)

if match then
  if matches[2]:lower() == &quot;dragon&quot; then matches[2] = nil end

  temp_name_list[#temp_name_list + 1] = {
    name = match[1],
    class = ((matches[2] and ndb.isvalidclass(matches[2])) and matches[2]:lower() or &quot;&quot;),
    guild = ndb.findfromtable(gmcp.Char.Status.house, ndb.valid.houses)
  }
end</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^ *\d+(?: prob)? +(\w+)\s+.*$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Stop getting (house members)</name>
                        <script>setTriggerStayOpen(&quot;House members&quot;, 0)

db:merge_unique(ndb.db.people, temp_name_list)

for _, person in pairs(temp_name_list) do
  raiseEvent(&quot;NameDB saw list name&quot;, person.name)
end

temp_name_list = nil

raiseEvent(&quot;NameDB got new data&quot;)</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^\d+</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Clan who</name>
                    <script>temp_name_list = {}
temp_dragon = 0
ndb.temp_classes_list = {}</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>100</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>The following members of the clan of </string>
                        <string>are in the realms:</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>2</integer>
                        <integer>0</integer>
                    </regexCodePropertyList>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Get name (clan who)</name>
                        <script>local match = getColorWildcard(14)

if match then
	local title = line:gsub(&quot; %(off channel%)&quot;, &quot;&quot;)

	temp_name_list[#temp_name_list + 1] = {
		name = match[1],
		title = title
	}

	-- if we know a class, add it in
	local class = ndb.getclass(match[1])
	local dragon
	if ndb.isdragon then dragon = ndb.isdragon(ndb.findname(line)) end

	if class and class ~= &quot;&quot; then
		class = class:title()
		echo((&quot; &quot;):rep(70-#line))
		cecho(&quot;&lt;a_darkwhite&gt;(&quot;..class..&quot;)&quot;)
		ndb.temp_classes_list[class] = (ndb.temp_classes_list[class] or 0) + 1
		if dragon then cecho(&quot; &lt;a_darkwhite&gt;(Dragon)&quot;) temp_dragon = temp_dragon +1 end
	elseif dragon then echo((&quot; &quot;):rep(70-#line)) cecho(&quot;&lt;a_darkwhite&gt;(Dragon)&quot;) temp_dragon = temp_dragon +1 
	end
end</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^</string>
                            <string>return not isPrompt()</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                            <integer>4</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Stop (clan who)</name>
                        <script>setTriggerStayOpen(&quot;Clan who&quot;, 0)

db:merge_unique(ndb.db.people, temp_name_list)

for _, person in pairs(temp_name_list) do
  raiseEvent(&quot;NameDB saw list name&quot;, person.name)
end

if next(ndb.temp_classes_list) then
  local classes = svo.keystolist(ndb.temp_classes_list)
  table.sort(classes)

  for i = 1, #classes do
    classes[i] = ndb.temp_classes_list[classes[i]] .. &quot; &quot;..(ndb.temp_classes_list[classes[i]] == 1 and classes[i] or string.pluralize(classes[i]))
  end

  moveCursor(0, getLineNumber())
  svo.itf(&quot;%s present, of those %s %s dragon%s (%s total).\n&quot;, svo.concatand(classes), temp_dragon, (temp_dragon == 1 and 'is a' or 'are'), (temp_dragon == 1 and '' or 's'), #temp_name_list)
  moveCursorEnd()
  ndb.temp_classes_list = nil
end

temp_name_list, temp_dragon = nil, nil

raiseEvent(&quot;NameDB got new data&quot;)
</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>return isPrompt()</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>4</integer>
                        </regexCodePropertyList>
                    </Trigger>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Party who</name>
                    <script>temp_name_list = {}
temp_dragon = 0
ndb.temp_classes_list = {}</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>100</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>The following members of your party are in the realms:</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>3</integer>
                    </regexCodePropertyList>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Get name (party who)</name>
                        <script>resetFormat()

local match = ndb.findname(line)
if match then
	temp_name_list[#temp_name_list + 1] = {
		name = ndb.findname(line),
		title = line
	}

	-- if we know a class, add it in
	local class = ndb.getclass(ndb.findname(line))
	local dragon
	if ndb.isdragon then dragon = ndb.isdragon(ndb.findname(line)) end

	if class and class ~= &quot;&quot; then
		echo((&quot; &quot;):rep(60-#line))
		cecho(&quot;&lt;a_darkwhite&gt;(&quot;..class:title()..&quot;)&quot;)
		ndb.temp_classes_list[class] = (ndb.temp_classes_list[class] or 0) + 1
		if dragon then cecho(&quot; &lt;a_darkwhite&gt;(Dragon)&quot;) temp_dragon = temp_dragon +1 end
	elseif dragon then echo((&quot; &quot;):rep(60-#line)) cecho(&quot;&lt;a_darkwhite&gt;(Dragon)&quot;) temp_dragon = temp_dragon +1 
	end
end</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^</string>
                            <string>return not isPrompt()</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                            <integer>4</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Stop (party who)</name>
                        <script>setTriggerStayOpen(&quot;Party who&quot;, 0)

db:merge_unique(ndb.db.people, temp_name_list)

for _, person in pairs(temp_name_list) do
  raiseEvent(&quot;NameDB saw list name&quot;, person.name)
end

if next(ndb.temp_classes_list) then
  local classes = svo.keystolist(ndb.temp_classes_list)
  table.sort(classes)

  for i = 1, #classes do
    classes[i] = ndb.temp_classes_list[classes[i]] .. &quot; &quot;..(ndb.temp_classes_list[classes[i]] == 1 and classes[i] or string.pluralize(classes[i]))
  end

  moveCursor(0, getLineNumber())
  svo.itf(&quot;%s present, of those %s %s dragon%s.\n&quot;, svo.concatand(classes), temp_dragon, (temp_dragon == 1 and 'is a' or 'are'), (temp_dragon == 1 and '' or 's'))
  moveCursorEnd()
  ndb.temp_classes_list = nil
end

temp_name_list, temp_dragon = nil, nil
raiseEvent(&quot;NameDB got new data&quot;)
</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>return isPrompt()</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>4</integer>
                        </regexCodePropertyList>
                    </Trigger>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Order members</name>
                    <script></script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>999</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>The order has no mortal order head.</string>
                        <string>Mortal order head:</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>3</integer>
                        <integer>2</integer>
                    </regexCodePropertyList>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Skip (order members)</name>
                        <script>temp_name_list = {}</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>3</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^</string>
                            <string>3</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                            <integer>5</integer>
                        </regexCodePropertyList>
                        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                            <name>Member</name>
                            <script>if matches[2] == &quot;Total&quot; then return end

local class = line:sub(47):match(&quot;^(%w+)&quot;)
if class and class:lower() == &quot;dragon&quot; then class = nil end

temp_name_list[#temp_name_list + 1] = {
  name = matches[2],
  class = class,
  order = gmcp.Char.Status.order:match(&quot;(%w+)&quot;)
}</script>
                            <triggerType>0</triggerType>
                            <conditonLineDelta>0</conditonLineDelta>
                            <mStayOpen>0</mStayOpen>
                            <mCommand></mCommand>
                            <packageName></packageName>
                            <mFgColor>#ff0000</mFgColor>
                            <mBgColor>#ffff00</mBgColor>
                            <mSoundFile></mSoundFile>
                            <colorTriggerFgColor>#000000</colorTriggerFgColor>
                            <colorTriggerBgColor>#000000</colorTriggerBgColor>
                            <regexCodeList>
                                <string>^([A-Za-z]+)\*?</string>
                            </regexCodeList>
                            <regexCodePropertyList>
                                <integer>1</integer>
                            </regexCodePropertyList>
                        </Trigger>
                        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                            <name>Stop (order members)</name>
                            <script>setTriggerStayOpen(&quot;Order members&quot;, 0)

db:merge_unique(ndb.db.people, temp_name_list)

for _, person in pairs(temp_name_list) do
  raiseEvent(&quot;NameDB saw list name&quot;, person.name)
end

temp_name_list = nil

raiseEvent(&quot;NameDB got new data&quot;)</script>
                            <triggerType>0</triggerType>
                            <conditonLineDelta>0</conditonLineDelta>
                            <mStayOpen>0</mStayOpen>
                            <mCommand></mCommand>
                            <packageName></packageName>
                            <mFgColor>#ff0000</mFgColor>
                            <mBgColor>#ffff00</mBgColor>
                            <mSoundFile></mSoundFile>
                            <colorTriggerFgColor>#000000</colorTriggerFgColor>
                            <colorTriggerBgColor>#000000</colorTriggerBgColor>
                            <regexCodeList>
                                <string>return isPrompt()</string>
                            </regexCodeList>
                            <regexCodePropertyList>
                                <integer>4</integer>
                            </regexCodePropertyList>
                        </Trigger>
                    </Trigger>
                </Trigger>
                <Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>NameDB qw</name>
                    <script>local data = string.split(line, &quot;, &quot;)

-- fix last name that ends with a dot
data[#data] = string.sub(data[#data], 1, #data[#data] - 1)

-- fix the 'and Name' from qw2
if data[#data]:starts(&quot;and &quot;) then
  data[#data] = data[#data]:match(&quot;and (%w+)&quot;)
end

local city_colours = {
  [&quot;0,255,0&quot;] = &quot;Eleusis&quot;,
  [&quot;0,128,128&quot;] = &quot;Cyrene&quot;,
  [&quot;255,0,0&quot;] = &quot;Mhaldor&quot;,
  [&quot;128,128,0&quot;] = &quot;Hashan&quot;,
  [&quot;128,0,128&quot;] = &quot;Ashtan&quot;,
  [&quot;255,255,255&quot;] = &quot;Targossas&quot;
}

temp_name_list = {}

local selectString, getFgColor, format = selectString, getFgColor, string.format

-- selectString not working for first name by default - fix with this
moveCursor(0,getLineNumber())
insertText(&quot;&gt;&quot;)

-- see if we can glean off city affiliation off qwc colours
for _, name in ipairs(data) do
  temp_name_list[#temp_name_list + 1] = {name = name}

  if selectString(name,1) &gt; 0 then
    local r,g,b = getFgColor()
    local rgb = format(&quot;%d,%d,%d&quot;, r,g,b)
    if city_colours[rgb] then
      temp_name_list[#temp_name_list].city = city_colours[rgb]
    else
      temp_name_list[#temp_name_list].city = &quot;rogue&quot;
    end
    setFgColor(192,192,192)
    deselect()
  end

end
</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>^(\w+),</string>
                        <string>return not isPrompt()</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                        <integer>4</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>NameDB qw</name>
                    <script>local function commit()
  db:merge_unique(ndb.db.people, temp_name_list)

  for _, person in pairs(temp_name_list) do
    raiseEvent(&quot;NameDB saw list name&quot;, person.name)
  end

  raiseEvent(&quot;NameDB got new data&quot;)
end

-- ignore yourself gemmed offplane
if multimatches[1][1] == &quot;None.&quot; then
  disableTrigger(&quot;NameDB qw&quot;)
  ndb.checkingqwi = nil
  commit()
  return
end

-- update the total amount of people in the game with a clever addition
if selectString(multimatches[3][2], 1) &gt; -1 then
  replace(string.format(&quot;%d (%d total)&quot;, multimatches[3][2], tonumber(multimatches[3][2])+#temp_name_list))
end

--[[
for _,name in ipairs(data) do
  -- check for guides, but ignore Gods, who show as (God)
  if name:find(&quot;(&quot;, 1, true) then
    local secondname
    name, secondname = name:match(&quot;(%w+)%((%w+)%)&quot;)
    if name and secondname then
      temp_name_list[#temp_name_list + 1] = {
        name = secondname
      }
 
      temp_name_list[#temp_name_list + 1] = {
        name = name
      } 
    end
  else
    -- add a plain name
    temp_name_list[#temp_name_list + 1] = {
      name = name
    }
  end
end
]]

-- re-honors if asked for
if ndb.qwtype and ndb.qwtype == &quot;update&quot; then
  for _, name in pairs(temp_name_list) do
    name.xp_rank = -1
  end

-- or organize by cities
elseif ndb.qwtype and ndb.qwtype == &quot;organize cities&quot; then
  local cities = {}

  local getcity = ndb.getcity
  for _, person in pairs(temp_name_list) do
    local city = getcity(person.name)

    city = city or &quot;unknown&quot;
    if city == &quot;&quot; then city = &quot;rogue&quot; end

    if ndb.isimmortal(person.name) then city = &quot;Immortal&quot; end
    
    cities[city] = cities[city] or {}
    cities[city][#cities[city]+1] = person.name
  end

  echo'\n\n'
  svo.echof(&quot;qw, sorted by members and count:&quot;)

  local sortbycount, longestcityname = {}, 0
  for city, members in pairs(cities) do
    sortbycount[city] = #members
    if #city &gt; longestcityname then longestcityname = #city end
  end

  local sortbycount = {}; for city in pairs(cities) do sortbycount[#sortbycount+1] = {city, #cities[city]} end
  table.sort(sortbycount, function(a, b)
    return a[2] &gt; b[2]
  end)

  for _, org in ipairs(sortbycount) do
    local city, members = org[1], cities[org[1]]
    table.sort(members)
    cecho(string.format(&quot;  &lt;royal_blue&gt;%-&quot;..longestcityname..&quot;s&lt;a_grey&gt; &lt;DarkSlateGrey&gt;(&lt;blaze_orange&gt;%d&lt;DarkSlateGrey&gt;): &lt;a_grey&gt;%s\n&quot;, city, #members, svo.concatand(members)))
  end

-- or report to cc
elseif ndb.qwtype and ndb.qwtype:starts(&quot;report members of &quot;) then
  local org = ndb.qwtype:match(&quot;^report members of (%w+)&quot;):lower()

  local citizens = {}
  for _, city in ipairs(ndb.valid.cities) do
    if city:lower():starts(org) then
      org = city

      for _, person in pairs(temp_name_list) do
        local persons_city = ndb.getcity(person.name)
        if persons_city == city then citizens[#citizens+1] = person.name end
      end

      break
    end
  end

  if not citizens[1] then echo'\n' svo.echof(&quot;No citizens of %s seem to be on.&quot;, org) return end

  table.sort(citizens)

  svo.cc(&quot;%s %s visible: %s&quot;, #citizens, ndb.getpluralcity(org, #citizens), svo.concatand(citizens))
elseif ndb.qwtype == &quot;show marks&quot; then
  local marks = {}
  for _, person in pairs(temp_name_list) do
    local mark = ndb.ismark(person.name)

    if mark then
      marks[mark] = marks[mark] or {}
      marks[mark][#marks[mark]+1] = person.name
    end
  end

  echo'\n\n'
  svo.echof(&quot;Marks:&quot;)
  if not next(marks) then svo.echof(&quot;(none found)&quot;) end
  for cat, people in pairs(marks) do
    table.sort(people)
    cecho(string.format(&quot;  %s: %s\n&quot;, cat:title(), svo.concatandf(people, ndb.getcolorn)))
  end

elseif ndb.qwtype == &quot;show infamous&quot; then
  local infamous = {}
  for _, person in pairs(temp_name_list) do
    local infamy = ndb.isinfamous(person.name)

    if infamy and infamy &gt;= 1 then
      infamous[infamy] = infamous[infamy] or {}
      infamous[infamy][#infamous[infamy]+1] = person.name
    end
  end

  echo'\n\n'
  svo.echof(&quot;Infamous:&quot;)
  if not next(infamous) then svo.echof(&quot;(none found)&quot;) end
  for cat, people in pairs(infamous) do
    table.sort(people)
    cecho(string.format(&quot;  %s: %s\n&quot;, ndb.valid.shortinfamous[cat], svo.concatandf(people, ndb.getcolorn)))
  end
end

commit()
disableTrigger(&quot;NameDB qw&quot;)</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>1</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>.*</string>
                        <string>1</string>
                        <string>^Plus another (\d+) whose presence you cannot fully sense(?: \(\d+ total\))?\.$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                        <integer>5</integer>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="yes" isColorTriggerBg="yes">
                    <name>City/House/Order enemies</name>
                    <script>local field
if multimatches[2][1]:find(&quot;City&quot;) then
  ndb.fixed_set(ndb.db.people.cityenemy, 0)
  field = &quot;city&quot;
elseif multimatches[2][1]:find(&quot;Order&quot;) then
  ndb.fixed_set(ndb.db.people.orderenemy, 0)
  field = &quot;order&quot;
else
  ndb.fixed_set(ndb.db.people.houseenemy, 0)
  field = &quot;house&quot;
end

local names = string.split(multimatches[4][1], &quot;,&quot;)

for i = 1, #names do
  names[i] = names[i]:trim()
end

ndb.fixed_set(ndb.db.people[field..&quot;enemy&quot;], 1, db:in_(ndb.db.people.name, names))

-- reload all highlights
ndb.loadhighlights()

echo'\n'

if ndb.checkingenemies and ndb.checkingenemies.option then
  local temp_name_list = {}
  for i = 1, #names do
    temp_name_list[#temp_name_list + 1] = {
      name = names[i],
    }
  end

  db:merge_unique(ndb.db.people, temp_name_list)

  svo.echof(field:title()..&quot; enemies list updated, and new names added.&quot;)

  raiseEvent(&quot;NameDB got new data&quot;)
else
  svo.echof(field:title()..&quot; enemies list updated.&quot;)
end

disableTrigger(&quot;City/House/Order enemies&quot;)
if ndb.checkingenemies then killTimer(ndb.checkingenemies[1]) end
ndb.checkingenemies = nil</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>3</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#00b300</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>Enemies of the </string>
                        <string>FG6BG2</string>
                        <string>1</string>
                        <string>.+</string>
                        <string>1</string>
                        <string>Total:</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>2</integer>
                        <integer>6</integer>
                        <integer>5</integer>
                        <integer>1</integer>
                        <integer>5</integer>
                        <integer>2</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Birthdays list</name>
                    <script>bdayTable = bdayTable or {}
bdayTable[#bdayTable+1] = matches[2]

svo.prompttrigger(&quot;namedb capture birtdhdays&quot;, function()
	local temp_name_list = {}

	for i,j in ipairs(bdayTable) do
		temp_name_list[#temp_name_list + 1] = {
			name = j
		}
	end

	db:merge_unique(ndb.db.people, temp_name_list)

	raiseEvent(&quot;NameDB got new data&quot;)
	bdayTable = nil
end)</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>^(\w+) is \d+ years old today!$</string>
                        <string>^The soul of (\w+) is \d+ years old today!$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Friend Checking</name>
                    <script>temp_name_list = {}
temp_dragon = 0
ndb.temp_classes_list = {}</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>100</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>You have acknowledged the following adventurers as mutual friends:</string>
                        <string>You have requested formal acknowledgement as friend from the following:</string>
                        <string>You have no outstanding requests for formal acknowledgement of friendship.</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>3</integer>
                        <integer>3</integer>
                        <integer>3</integer>
                    </regexCodePropertyList>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Get name (Friend)</name>
                        <script>local match = getColorWildcard(14)
line = line:trim()
if match then
	temp_name_list[#temp_name_list + 1] = {
		name = match[1],
		title = line
	}

	-- if we know a class, add it in
	local class = ndb.getclass(match[1])
	local dragon
	if ndb.isdragon then dragon = ndb.isdragon(ndb.findname(line)) end

	if class and class ~= &quot;&quot; then
		class = class:title()
		echo((&quot; &quot;):rep(70-#line))
		cecho(&quot;&lt;a_darkwhite&gt;(&quot;..class..&quot;)&quot;)
		ndb.temp_classes_list[class] = (ndb.temp_classes_list[class] or 0) + 1
		if dragon then cecho(&quot; &lt;a_darkwhite&gt;(Dragon)&quot;) temp_dragon = temp_dragon +1 end
	elseif dragon then echo((&quot; &quot;):rep(60-#line)) cecho(&quot;&lt;a_darkwhite&gt;(Dragon)&quot;) temp_dragon = temp_dragon +1 
	end
end</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Stop (friend who)</name>
                        <script>setTriggerStayOpen(&quot;Friend Checking&quot;, 0)

db:merge_unique(ndb.db.people, temp_name_list)

for _, person in pairs(temp_name_list) do
  raiseEvent(&quot;NameDB saw list name&quot;, person.name)
end

if next(ndb.temp_classes_list) then
  local classes = svo.keystolist(ndb.temp_classes_list)
  table.sort(classes)

  for i = 1, #classes do
    classes[i] = ndb.temp_classes_list[classes[i]] .. &quot; &quot;..(ndb.temp_classes_list[classes[i]] == 1 and classes[i] or string.pluralize(classes[i]))
  end

  moveCursor(0, getLineNumber())
  svo.itf(&quot;%s present, of those %s %s dragon%s (%s total).\n&quot;, svo.concatand(classes), temp_dragon, (temp_dragon == 1 and 'is a' or 'are'), (temp_dragon == 1 and '' or 's'), #temp_name_list)
  moveCursorEnd()
  ndb.temp_classes_list = nil
end

temp_name_list, temp_dragon = nil, nil

raiseEvent(&quot;NameDB got new data&quot;)
</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>return isPrompt()</string>
                            <string>See FRIENDS R[EQUESTS] to see outstanding requests to or from you.</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>4</integer>
                            <integer>3</integer>
                        </regexCodePropertyList>
                    </Trigger>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Clan Position Start</name>
                    <script></script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>99</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>The leadership positions are:</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>3</integer>
                    </regexCodePropertyList>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="yes" isColorTriggerBg="yes">
                        <name>Clan Position Name</name>
                        <script>setTriggerStayOpen(&quot;Clan Position Name&quot;,99)
setTriggerStayOpen(&quot;Clan Position Start&quot;,99)</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>99</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#0000ff</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>FG9BG2</string>
                            <string>.+</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>6</integer>
                            <integer>1</integer>
                        </regexCodePropertyList>
                        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="yes" isColorTriggerBg="yes">
                            <name>People In Position</name>
                            <script>if not clanNames then 
   clanNames = multimatches[2][2]:gsub(&quot;,? and &quot;, &quot;, &quot;)
else
   clanNames = clanNames .. &quot; &quot; .. multimatches[2][2]:gsub(&quot;,? and &quot;, &quot;, &quot;)
end

setTriggerStayOpen(&quot;Clan Position Name&quot;,99)
setTriggerStayOpen(&quot;Clan Position Start&quot;,99)</script>
                            <triggerType>0</triggerType>
                            <conditonLineDelta>0</conditonLineDelta>
                            <mStayOpen>0</mStayOpen>
                            <mCommand></mCommand>
                            <packageName></packageName>
                            <mFgColor>#ff0000</mFgColor>
                            <mBgColor>#ffff00</mBgColor>
                            <mSoundFile></mSoundFile>
                            <colorTriggerFgColor>#c0c0c0</colorTriggerFgColor>
                            <colorTriggerBgColor>#000000</colorTriggerBgColor>
                            <regexCodeList>
                                <string>FG16BG2</string>
                                <string>^   (.+)$</string>
                            </regexCodeList>
                            <regexCodePropertyList>
                                <integer>6</integer>
                                <integer>1</integer>
                            </regexCodePropertyList>
                        </Trigger>
                        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                            <name>Close Clan Positions</name>
                            <script>setTriggerStayOpen(&quot;Clan Position Name&quot;,0)
setTriggerStayOpen(&quot;Clan Position Start&quot;,0)

clanNames = string.split(clanNames, &quot;,? &quot;)
local clan_name_list = {}
local added = {}
for k,v in pairs(clanNames) do 
  if not added[v] then
     clan_name_list[#clan_name_list+1] = {name = v}
  end
  added[v] = true
end
db:merge_unique(ndb.db.people, clan_name_list)
raiseEvent(&quot;NameDB got new data&quot;)
clanNames = nil</script>
                            <triggerType>0</triggerType>
                            <conditonLineDelta>0</conditonLineDelta>
                            <mStayOpen>0</mStayOpen>
                            <mCommand></mCommand>
                            <packageName></packageName>
                            <mFgColor>#ff0000</mFgColor>
                            <mBgColor>#ffff00</mBgColor>
                            <mSoundFile></mSoundFile>
                            <colorTriggerFgColor>#000000</colorTriggerFgColor>
                            <colorTriggerBgColor>#000000</colorTriggerBgColor>
                            <regexCodeList>
                                <string>There are </string>
                                <string>^There are \d+ active members in this clan.</string>
                            </regexCodeList>
                            <regexCodePropertyList>
                                <integer>2</integer>
                                <integer>1</integer>
                            </regexCodePropertyList>
                        </Trigger>
                    </Trigger>
                </Trigger>
            </TriggerGroup>
            <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Various common things</name>
                <script></script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList/>
                <regexCodePropertyList/>
                <Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Channel history</name>
                    <script>ndb.temp_name_list = {}

-- atm, this breaks the 'more' itself. Should add a delayed timer. Until then, getting names off channel history is disabled</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>1000</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>Channel History for</string>
                        <string>[File continued via MORE]</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>2</integer>
                        <integer>3</integer>
                    </regexCodePropertyList>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>A line</name>
                        <script>ndb.temp_name_list[#ndb.temp_name_list + 1] = {
  name = matches[2]
}</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^- .+? - ([A-Za-z]+)</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>End (channel history)</name>
                        <script>setTriggerStayOpen(&quot;Channel history&quot;, 0)

db:merge_unique(ndb.db.people, ndb.temp_name_list)

ndb.temp_name_list = nil

raiseEvent(&quot;NameDB got new data&quot;)</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>return isPrompt()</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>4</integer>
                        </regexCodePropertyList>
                    </Trigger>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Newbie spawned - house newcomers</name>
                    <script>local temp_name_list = temp_name_list or {}

temp_name_list[#temp_name_list + 1] = {
  name = multimatches[2][2],
  class = ndb.isvalidclass(multimatches[2][3]) and multimatches[2][3]:lower() or &quot;&quot;,
  city = ndb.isvalidcity(multimatches[2][4]) and multimatches[2][4]:title() or &quot;&quot;
}

db:merge_unique(ndb.db.people, temp_name_list)

raiseEvent(&quot;NameDB got new data&quot;)</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>(House Newcomers):</string>
                        <string>^\(House Newcomers\): (\w+) is a new (\w+) of (\w+)\.$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>2</integer>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Newbie spawned - reborn</name>
                    <script>local temp_name_list = { {name = matches[2], xp_rank = -1} }

db:merge_unique(ndb.db.people, temp_name_list)

raiseEvent(&quot;NameDB got new data&quot;)</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>^(\w+) has been Reborn in the Flame!$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Citizened a person</name>
                    <script>local name = multimatches[2][2]

db:merge_unique(ndb.db.people, {{
  name = name,
  city = gmcp.Char.Status.city:match(&quot;^(%w+)&quot;),
  city_rank = 1,
}})

raiseEvent(&quot;NameDB got new data&quot;)</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>You ask</string>
                        <string>^You ask (\w+) to repeat the oaths of citizenship after you\. (?:He|She) does, and you admit (?:him|her) as the newest, proudest member of (\w+)\.$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>2</integer>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
            </TriggerGroup>
            <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Honors on a person</name>
                <script></script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList/>
                <regexCodePropertyList/>
                <Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Honors</name>
                    <script>if ndb.honorsid then killTimer(ndb.honorsid) end

local pronoun = line:match(&quot;^(%w+)&quot;)

ndb.getinfo(ndb.honorsname)

temp_name_list = {}
temp_name_list[1] = {name = ndb.honorsname, city = &quot;&quot;, city_rank = 0, dragon = 0,
  guild = &quot;&quot;, gender = (pronoun == &quot;He&quot; or pronoun == &quot;His&quot;) and 'male' or 'female',
  mark = &quot;&quot;,
}

moveCursorEnd() -- make sure the cursor is at the current line

local foundname
local startline = getLineNumber()
for i = 1, 10 do -- word wrapping can mess it up, go so back a fair bit in case of small screen

  -- work backwards until the line with the name is located
  if string.find(getCurrentLine(), &quot;%f[%a]&quot;..ndb.honorsname..&quot;%f[%A]&quot;) then
    -- pick up the race as it is listed
    local race = getCurrentLine():match(&quot;%(male (.-)%)&quot;) or getCurrentLine():match(&quot;%(female (.-)%)&quot;) or &quot;&quot;

    local occultist = race:match(&quot;Chaos .- resembling a (%a+)&quot;)
    if occultist then
      race = occultist
      temp_name_list[1].class = &quot;occultist&quot;
    end
    local sylvan = race:match(&quot;Viridian (%a+)&quot;)
    if sylvan then
      race = sylvan
      temp_name_list[1].class = &quot;sylvan&quot;
    end

    if ndb.isvalidrace(race) then
      temp_name_list[1].race = race:lower()
    elseif race:find(&quot;Dragon&quot;) then
      temp_name_list[1].dragon = 1
    end

    foundname = true
    break
  end
  if ndb.gaghonours then deleteLine() end
  moveCursor(0, startline-i)
end

-- failsafe for ndb update all messing up - in case we didn't find the name, don't capture any data
if not foundname then
  setTriggerStayOpen(&quot;Honors&quot;, 0)
  disableTrigger(&quot;Honors&quot;)
  local gaghonours = ndb.gaghonours
  ndb.honorsid, ndb.gaghonours = nil, nil

  raiseEvent(&quot;NameDB finished honors&quot;, temp_name_list[1].name, (gaghonours and &quot;quiet&quot; or &quot;manual&quot;))

  temp_name_list = nil
end

moveCursorEnd()</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>100</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>^(?:H|Sh)e is \d+ years old,</string>
                        <string>His date of birth is hidden by the sand of Aeon.</string>
                        <string>Her date of birth is hidden by the sand of Aeon.</string>
                        <string>He was born before the fall of the Seleucarian Empire.</string>
                        <string>She was born before the fall of the Seleucarian Empire.</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                        <integer>3</integer>
                        <integer>3</integer>
                        <integer>3</integer>
                        <integer>3</integer>
                    </regexCodePropertyList>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Stop getting (honors)</name>
                        <script>setTriggerStayOpen(&quot;Honors&quot;, 0)
disableTrigger(&quot;Honors&quot;)

if not temp_name_list then return end

if ndb.gaghonours then
  if ndb.honorseqgag then killTrigger(ndb.honorseqgag) end
  ndb.honorseqgag = tempExactMatchTrigger(&quot;You have recovered equilibrium.&quot;, [[svo.deleteLineP(); killTrigger(ndb.honorseqgag); ndb.honorseqgag = nil]])
  deleteLine()
end

temp_name_list[1].combat_rank = temp_name_list[1].combat_rank or 0
temp_name_list[1].combat_rating = temp_name_list[1].combat_rating or 0
temp_name_list[1].city_soldier = temp_name_list[1].city_soldier or 0
temp_name_list[1].motto = temp_name_list[1].motto or &quot;&quot;
temp_name_list[1].warcry = temp_name_list[1].warcry or &quot;&quot;

db:merge_unique(ndb.db.people, temp_name_list)

local gaghonours = ndb.gaghonours
ndb.honorsid, ndb.gaghonours = nil, nil

raiseEvent(&quot;NameDB finished honors&quot;, temp_name_list[1].name, (gaghonours and &quot;quiet&quot; or &quot;manual&quot;))

temp_name_list = nil</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>return isPrompt()</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>4</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Age</name>
                        <script>if not temp_name_list then return end

temp_name_list[1].birth_day = tonumber(matches[3])
temp_name_list[1].birth_month = ndb.valid.months[matches[4]]
temp_name_list[1].birth_year = tonumber(matches[5])
temp_name_list[1].birth_hidden = 0</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^(?:H|Sh)e is (\d+) years old, having been born on the (\d+)(?:st|nd|rd|th) of (Sarapin|Daedalan|Aeguary|Miraman|Scarlatan|Ero|Valnuary|Lupar|Phaestian|Chronos|Glacian|Mayan), (\d+) years after the fall of the Seleucarian Empire\.$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Age hidden</name>
                        <script>if not temp_name_list then return end

temp_name_list[1].birth_hidden = 1</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>His date of birth is hidden by the sand of Aeon.</string>
                            <string>Her date of birth is hidden by the sand of Aeon.</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>3</integer>
                            <integer>3</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>XP rank</name>
                        <script>if not temp_name_list then return end

temp_name_list[1].xp_rank = tonumber(matches[2])

-- 200 is a safe amount to set it at, as the number will vary
if tonumber(matches[2]) &lt; 240 then temp_name_list[1].dragon = 1 end</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^(?:She|He) is ranked (\d+)\w+ in Achaea\.</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Unranked</name>
                        <script>if not temp_name_list then return end

temp_name_list[1].xp_rank = -2</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>He is unranked in Achaea.</string>
                            <string>She is unranked in Achaea.</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>3</integer>
                            <integer>3</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Combat rank</name>
                        <script>if not temp_name_list then return end

temp_name_list[1].combat_rank = tonumber(matches[2])
temp_name_list[1].combat_rating = tonumber(matches[3])</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^(?:H|Sh)e is the (\d+)(?:st|nd|rd|th) ranked combatant with a rating of (\d+)\.$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>City &amp; rank</name>
                        <script>if not temp_name_list then return end

temp_name_list[1].city_rank = ndb.getrankincity(matches[3], matches[2])
temp_name_list[1].city = matches[3]</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^(?:She|He) is an? (\w+) in (\w+)\.$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>City soldier</name>
                        <script>if not temp_name_list then return end

temp_name_list[1].city_soldier = -2</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^(?:H|Sh)e is .+ in the army of (?:Ashtan|Cyrene|Eleusis|Hashan|Mhaldor|Targossas)\.$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Housemate</name>
                        <script>if not temp_name_list then return end

if ndb.isvalidhouse(matches[2]) then
  temp_name_list[1].guild = matches[2]
end</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^(?:She|He) is .* in the (\w+)\.$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Might</name>
                        <script>if not temp_name_list then return end

temp_name_list[1].might = tonumber(matches[2])

-- toads in Lusternia are considered &quot;It&quot; in might. Maggots here could be getting the same treatment</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>87</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^(?:She|He|It) is considered to be approximately (\d+)% of your might\.$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Equal might</name>
                        <script>if not temp_name_list then return end

temp_name_list[1].might = 100</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>He is considered to be approximately equal to your might.</string>
                            <string>She is considered to be approximately equal to your might.</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>3</integer>
                            <integer>3</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Any line</name>
                        <script>if ndb.gaghonours then deleteLine() end</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>99</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>return true</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>4</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>ivory mark</name>
                        <script>if not temp_name_list then return end

temp_name_list[1].mark = &quot;Ivory&quot;</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>He is a member of the Ivory Mark.</string>
                            <string>She is a member of the Ivory Mark.</string>
                            <string>^(?:He|She) is the .+? in the Ivory Mark\.$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>3</integer>
                            <integer>3</integer>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>quisalis mark</name>
                        <script>if not temp_name_list then return end

temp_name_list[1].mark = &quot;Quisalis&quot;</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>He is the Silent Executioner in the Quisalis Mark.</string>
                            <string>She is the Silent Executioner in the Quisalis Mark.</string>
                            <string>He is a member of the Quisalis Mark.</string>
                            <string>She is a member of the Quisalis Mark.</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>3</integer>
                            <integer>3</integer>
                            <integer>3</integer>
                            <integer>3</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Divorced</name>
                        <script>if not temp_name_list then return end

temp_name_list[1].divorces = tonumber(matches[2]) or 1</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^(?:H|Sh)e has been divorced (?:(\d+) times|once)\.$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Arms</name>
                        <script>if not temp_name_list then return end

temp_name_list[1].arms = matches[2]</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^(?:H|Sh)e bears the arms: (.+)\.$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Motto/Warcry</name>
                        <script>if not temp_name_list then return end

temp_name_list[1][matches[2]] = matches[3]:trim()</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>^H(?:is|er) (motto|warcry): '(.+)'$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Not Infamous</name>
                        <script>temp_name_list[1].infamous = 0</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>She is not known for acts of infamy.</string>
                            <string>He is not known for acts of infamy.</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>3</integer>
                            <integer>3</integer>
                        </regexCodePropertyList>
                    </Trigger>
                    <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Infamous</name>
                        <script>local line = multimatches[2][3]
temp_name_list[1].infamous = ndb.valid.infamous[line]</script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList>
                            <string>Infamous</string>
                            <string>^(She|He) (.+)\.$</string>
                        </regexCodeList>
                        <regexCodePropertyList>
                            <integer>0</integer>
                            <integer>1</integer>
                        </regexCodePropertyList>
                    </Trigger>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>No Honours</name>
                    <script>if ndb.honorsid then killTimer(ndb.honorsid) ndb.honorsid = nil else return end

disableTrigger(&quot;Honors&quot;)

if ndb.gaghonours then svo.deleteLineP() end

echo(&quot;\n&quot;)
svo.echof(ndb.honorsname .. &quot; doesn't exist anymore, deleted them.&quot;)
local deletedname = ndb.honorsname

db:delete(ndb.db.people, db:eq(ndb.db.people.name, ndb.honorsname))
svo.debugf(&quot;deleted %s&quot;, ndb.honorsname)

local gaghonours = ndb.gaghonours
ndb.gaghonours = nil

raiseEvent(&quot;NameDB finished honors&quot;, &quot;&quot;, (gaghonours and &quot;quiet&quot; or &quot;manual&quot;))

raiseEvent(&quot;NameDB name deleted&quot;, deletedname)</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>There is no such person, I'm afraid.</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>3</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Immortal</name>
                    <script>if ndb.honorsid then killTimer(ndb.honorsid) ndb.honorsid = nil end

disableTrigger(&quot;Honors&quot;)

if ndb.gaghonours then svo.deleteLineP() end

local temp_name_list = {}
temp_name_list[1] = {name = ndb.honorsname, immortal = 1}
db:merge_unique(ndb.db.people, temp_name_list)

local gaghonours = ndb.gaghonours
ndb.gaghonours = nil

raiseEvent(&quot;NameDB finished honors&quot;, ndb.honorsname, (gaghonours and &quot;quiet&quot; or &quot;manual&quot;))</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>She was born before time was counted.</string>
                        <string>He was born before time was counted.</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>3</integer>
                        <integer>3</integer>
                    </regexCodePropertyList>
                </Trigger>
            </TriggerGroup>
        </TriggerGroup>
        <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>Scripting Examples</name>
            <script></script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#ff0000</mFgColor>
            <mBgColor>#ffff00</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList/>
            <regexCodePropertyList/>
            <Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Tentacle enemies down</name>
                <script>-- if you'd like to use this trigger, enable it and move it out of the NameDB folder - so your changes to it will stay

if ndb.isenemy(matches[2]) then
  if svo.defc.dragonform then
    svo.doadd(&quot;becalm&quot;)
  else
    svo.doadd(&quot;touch tentacle &quot; .. matches[2])
  end
end</script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList>
                    <string>^(\w+) flits into view directly overhead\.$</string>
                    <string>^You recognise the form of (\w+) high above\.$</string>
                    <string>^(\w+) begins to flap (?:his|her) wings powerfully, and rises quickly up into the firmament\.$</string>
                    <string>^(\w+) is quickly carried up into the skies\.$</string>
                    <string>^(\w+) grabs hold of a nearby branch and swings up and out of sight into the treetops\.$</string>
                    <string>^(\w+) crouches down upon (?:his|her) haunches, then with a powerful thrust of (?:his|her) legs, launches (?:him|her)self straight up into the air\.$</string>
                    <string>^(\w+) swoops down from above, tries to hoist \w+, and fails\.$</string>
                    <string>^(\w+) sucks in (?:his|her) breath, and with a mighty blast of air exhales while uttering a word of magic\. Suddenly, s?he is lifted into the skies by an unseen force\.$</string>
                </regexCodeList>
                <regexCodePropertyList>
                    <integer>1</integer>
                    <integer>1</integer>
                    <integer>1</integer>
                    <integer>1</integer>
                    <integer>1</integer>
                    <integer>1</integer>
                    <integer>1</integer>
                    <integer>1</integer>
                </regexCodePropertyList>
            </Trigger>
            <Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Falcon observe</name>
                <script>parse_enemies = {}</script>
                <triggerType>0</triggerType>
                <conditonLineDelta>3</conditonLineDelta>
                <mStayOpen>100</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList>
                    <string>Your falcon reports seeing the following people in its area:</string>
                </regexCodeList>
                <regexCodePropertyList>
                    <integer>3</integer>
                </regexCodePropertyList>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Each line</name>
                    <script>local name = matches[2]

if ndb.isenemy(name) then
	parse_enemies[name] = (100 / tonumber(matches[4])) * tonumber(matches[3])
end</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>99</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>^(\w+)\s+(\d+) health out of (\d+)\.$</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>1</integer>
                    </regexCodePropertyList>
                </Trigger>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Close gate (falcon observe)</name>
                    <script>setTriggerStayOpen(&quot;Falcon observe&quot;, 0)

local function say(tbl, affiliation)
	if not next(tbl) then return end

	local temp = {}
	for i,j in pairs(tbl) do
		temp[#temp+1] = string.format(&quot;%s %d%%hp&quot;, i, j)
	end

	svo.cc(&quot;%s outside in area: %s&quot;, affiliation, svo.concatand(temp))
end


say(parse_enemies, &quot;Enemies&quot;)
parse_enemies = nil</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string>return isPrompt()</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>4</integer>
                    </regexCodePropertyList>
                </Trigger>
            </Trigger>
        </TriggerGroup>
    </TriggerPackage>
    <TimerPackage/>
    <AliasPackage>
        <AliasGroup isActive="yes" isFolder="yes">
            <name>NameDB</name>
            <script></script>
            <command></command>
            <packageName></packageName>
            <regex></regex>
            <Alias isActive="yes" isFolder="no">
                <name>Who is</name>
                <script>ndb.showwhois(matches[2])</script>
                <command></command>
                <packageName></packageName>
                <regex>^whois (\w+)$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Honors a person</name>
                <script>ndb.honors(matches[2], &quot;manual&quot;)</script>
                <command></command>
                <packageName></packageName>
                <regex>^honou?rs? (\w+)$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(ndb set person category value) Adjust person data</name>
                <script>local name = matches[2]:title()
local category = matches[3]
local towhat = tonumber(matches[4]) or matches[4]

local temp_name_list = {}

if category == &quot;city&quot; then
  towhat = towhat:title()
  if not ndb.isvalidcity(towhat) then
    svo.echof(&quot;%s isn't a known city, sorry.\n  Available ones are: %s&quot;, towhat, svo.concatand(ndb.valid.cities))
    return
  end

elseif category == &quot;class&quot; then
  towhat = towhat:lower()
  if not ndb.isvalidclass(towhat) then
    svo.echof(&quot;%s isn't a known class, sorry.\n  Available ones are: %s&quot;, towhat, svo.concatand(ndb.valid.classes))
    return
  end

elseif category == &quot;race&quot; then
  towhat = towhat:lower()
  if not ndb.isvalidrace(towhat) then
    svo.echof(&quot;%s isn't a known race, sorry.\n  Available ones are: %s&quot;, towhat, svo.concatand(ndb.valid.races))
    return
  end

elseif category == &quot;house&quot; then category = &quot;guild&quot;
end

if category == &quot;guild&quot; or category == &quot;order&quot; then towhat = towhat:title() end
if category == &quot;notes&quot; then towhat = towhat:gsub([[\n]], &quot;\n&quot;) end

if category == &quot;cityenemy&quot; or category == &quot;houseenemy&quot; or category == &quot;orderenemy&quot; or category == &quot;immortal&quot; or category == &quot;dragon&quot; then
  towhat = svo.toboolean(towhat) and 1 or 0
end

temp_name_list[#temp_name_list + 1] = {
  name = name,
  [category] = towhat
}

db:merge_unique(ndb.db.people, temp_name_list)

ndb.showwhois(name)

-- re-honors person if necessary
if category == &quot;xp_rank&quot; or category == &quot;might&quot; then
  raiseEvent&quot;NameDB got new data&quot;
end

raiseEvent(&quot;NameDB set name changed&quot;, name)

-- regenerate order vconfigs
if category == &quot;order&quot; then ndb.setuporders() end</script>
                <command></command>
                <packageName></packageName>
                <regex>^ndb set (\w+) ([a-z_]+) (.+)$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(iff person status)</name>
                <script>ndb.setiff(matches[2], matches[3])

ndb.showwhois(matches[2])</script>
                <command></command>
                <packageName></packageName>
                <regex>^iff (\w+) (\w+)$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>qw/qw2</name>
                <script>ndb.checkqw() -- qw and qw2 are the same now</script>
                <command></command>
                <packageName></packageName>
                <regex>^qw(2)?$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(qw update) Re-check people on qw list</name>
                <script>ndb.checkqw(nil, &quot;update&quot;)</script>
                <command></command>
                <packageName></packageName>
                <regex>^qw update$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(qwc) Organize by city members</name>
                <script>ndb.checkqw(nil, &quot;organize cities&quot;)</script>
                <command></command>
                <packageName></packageName>
                <regex>^qwc$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(ppof) Report visible citizens of a city</name>
                <script>ndb.checkqw(nil, &quot;report members of &quot;..matches[2])</script>
                <command></command>
                <packageName></packageName>
                <regex>^ppof (\w+)</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(npp) Toggle name highlighting</name>
                <script>svo.config.set(&quot;ndbpaused&quot;, matches[2], true)</script>
                <command></command>
                <packageName></packageName>
                <regex>^npp(?: (\w+))?$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(ndb stats) See DB stats</name>
                <script>svo.echof(&quot;Compiling database stats...&quot;)
svo.showprompt()

local function makestats()
  local alldata = db:fetch(ndb.db.people)

  if not alldata or not next(alldata) then svo.echof(&quot;Your NameDB is empty! Check 'qw', 'citizens' to start filling it up...&quot;) return end

  local totalcount = #alldata

  local cities = {}
  for i = 1, #alldata do
    local p = alldata[i]
    if not p.city or p.city == '' then p.city = &quot;none&quot; end
    cities[p.city] = cities[p.city] or {}
    cities[p.city][#cities[p.city]+1] = p.name
  end
  local citiessorted = {}; for city in pairs(cities) do citiessorted[#citiessorted+1] = {city, #cities[city]} end
  table.sort(citiessorted, function(a, b)
    return a[2] &gt; b[2]
  end)
  
  echo'\n'
  svo.echof(&quot;People in the DB: %s&quot;, totalcount)
  svo.echof(&quot;City stats:&quot;)
  for i = 1, #citiessorted do
    cecho(string.format(&quot;  %-8s - %d citizens.\n&quot;, citiessorted[i][1], citiessorted[i][2]))
  end

  svo.showprompt()
end

tempTimer(0, makestats)</script>
                <command></command>
                <packageName></packageName>
                <regex>^ndb stats$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(ndb cancel) Cancel honors'ing people</name>
                <script>ndb.cancelhonors()</script>
                <command></command>
                <packageName></packageName>
                <regex>^ndb cancel$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(ndb honorsnew) Honors backlog of new people</name>
                <script>ndb.manualcheck = true
ndb.updatebyhonors()</script>
                <command></command>
                <packageName></packageName>
                <regex>^ndb honorsnew$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(ndb export) export DB</name>
                <script>-- keep the location used between exports
local oldlocation = false
if ndb.exportdata and ndb.exportdata.location then oldlocation = ndb.exportdata.location end

ndb.exportdata = {
  fields = {},
  people = {all = true},
  location = oldlocation
}

-- setup defaults
for key, _ in pairs(ndb.schema.people) do
  ndb.exportdata.fields[key] = true
end
ndb.exportdata.fields.notes = false

ndb.exportmenu()</script>
                <command></command>
                <packageName></packageName>
                <regex>^ndb export$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(ndb import) import DB</name>
                <script>-- keep the location used between imports
local oldlocation = false
if ndb.importdata and ndb.importdata.location then oldlocation = ndb.importdata.location end

ndb.importdata = {
  location = oldlocation,
  data = false,
  fields = {},
}

if ndb.importdata.location then ndb.getimportfields() end
ndb.importmenu()</script>
                <command></command>
                <packageName></packageName>
                <regex>^ndb import$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(ndb delete all) Wipe the database clean</name>
                <script>if not ndb.deleteall then
  svo.echof(&quot;Are you really sure you want to wipe the database completely clean? Nothing will be saved, and this is irreversible. If yes, do this again.&quot;)
  svo.showprompt()
  ndb.deleteall = true
  return
end

ndb.deleteall = nil
db:delete(ndb.db.people, true)

-- clear highlights
ndb.loadhighlights()

svo.echof(&quot;Database completely wiped.&quot;)
svo.showprompt()</script>
                <command></command>
                <packageName></packageName>
                <regex>^ndb delete all$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(ndb delete unranked) Wipe all unranked (newbies and dormant) players</name>
                <script>local howmany = #db:fetch(ndb.db.people, db:eq(ndb.db.people.xp_rank, -2))

if not ndb.deleteunranked then
  svo.echof(&quot;Are you really sure you want to wipe the database of all unranked people? This will affect newbies and dormant players and get rid of %s entries.&quot;, howmany)
  svo.showprompt()
  ndb.deleteunranked = true
  return
end


ndb.deleteunranked = nil
db:delete(ndb.db.people, db:eq(ndb.db.people.xp_rank, -2))

-- clear highlights
ndb.loadhighlights()

svo.echof(&quot;Wiped %s unranked players from NameDB.&quot;, howmany)
svo.showprompt()</script>
                <command></command>
                <packageName></packageName>
                <regex>^ndb delete unranked$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(ndb update all) Re-check every person in the database</name>
                <script>local alldata = db:fetch(ndb.db.people)

if #alldata &gt;= 100 and not ndb.updateall then
  svo.echof(&quot;Are you really sure you want to re-check everybody in the database? You've got %d names - this'll take a while. If yes, do this again.&quot;, #alldata)
  svo.showprompt()
  ndb.updateall = true
  return
end

ndb.updateall = nil
ndb.fixed_set(ndb.db.people.might, -1)

svo.echof(&quot;Re-checking all %d known people in NameDB.&quot;, #alldata)
raiseEvent(&quot;NameDB got new data&quot;)</script>
                <command></command>
                <packageName></packageName>
                <regex>^ndb update all$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(ndb update unranked) Re-check all unranked players</name>
                <script>-- catches newbies who switch cities or suicide, contributed by Adet

local names = {}
local alldata = db:fetch(ndb.db.people, db:eq(ndb.db.people.xp_rank, -2))

if #alldata &gt;= 100 and not ndb.updateunranked then
  svo.echof(&quot;Are you really sure you want to check all unranked people? You've got %d names - this'll take a while. If yes, do this again.&quot;, #alldata)
  svo.showprompt()
  ndb.updateunranked = true
  return
end
ndb.updateunranked = nil

for _, person in pairs(alldata) do
  table.insert(names, person.name)
end

local temp_name_list = {}
for i = 1, #names do 
  temp_name_list[#temp_name_list+1] = {name = names[i], xp_rank = -1}
end

db:merge_unique(ndb.db.people, temp_name_list)
raiseEvent(&quot;NameDB got new data&quot;)</script>
                <command></command>
                <packageName></packageName>
                <regex>^ndb update unranked$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(ndb delete person) Delete one individual entry</name>
                <script>if matches[2] == &quot;all&quot; then return end -- handled by another alias
if matches[2] == &quot;unranked&quot; then return end -- handled by another alias

local name = matches[2]:title()

local exists = db:fetch(ndb.db.people, db:eq(ndb.db.people.name, name))

if not (exists and next(exists)) then svo.echof(&quot;%s doesn't exist in the database already.&quot;, name) svo.showprompt() return end

db:delete(ndb.db.people, db:eq(ndb.db.people.name, name))

raiseEvent(&quot;NameDB name deleted&quot;, name)

svo.echof(&quot;Deleted %s's entry from NameDB.&quot;, name)
svo.showprompt()</script>
                <command></command>
                <packageName></packageName>
                <regex>^ndb delete (\w+)$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(vshow highlightignore) See people on highlightignore</name>
                <script>local l = (next(svo.me.highlightignore) and svo.oneconcat(svo.me.highlightignore) or &quot;(none - use vconfig highlightignore &lt;person&gt; to add)&quot;)
svo.echof(&quot;People on the highlightignore (those, who shouldn't be highlighted by NameDB) list: %s&quot;, l)
svo.showprompt()</script>
                <command></command>
                <packageName></packageName>
                <regex>^vshow highlightignore$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Enemies lists</name>
                <script>if ndb.checkingenemies then killTimer(ndb.checkingenemies[1]) end

ndb.checkingenemies = {
  tempTimer(10+getNetworkLatency(), [[
    ndb.checkingenemies = nil
    disableTrigger&quot;City/House/Order enemies&quot;
  ]]),
  option = (matches[3] and matches[3]:trim() or nil)
}

enableTrigger&quot;City/House/Order enemies&quot;
send(matches[2]..&quot; enemies&quot;, false)</script>
                <command></command>
                <packageName></packageName>
                <regex>^(city|house|order) enemies( add)?$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>ndb alias cheatsheet</name>
                <script>local class = svo.me.class:title()

-- load help data in
if not ndb.help then
  local path = getMudletHomeDir()..&quot;/&quot;..class..&quot; svo/ndb-help.lua&quot;
  if not lfs.attributes(path) then
  -- not found? Lets try the dev version
    local svo_location = getMudletHomeDir() .. _sep .. &quot;svo_location&quot;
    local system_path -- location of the system's folder with a trailing slash
    local f,msg

    if lfs.attributes(svo_location) then
      f,msg = io.open(svo_location, &quot;r+&quot;)
      assert(f, msg)

      -- this should give us the folder it's in
      system_path = f:read(&quot;*l&quot;)

      if string.sub(system_path, -1) == &quot;/&quot; or string.sub(system_path, -1) == [[\]] then
        system_path = string.sub(system_path, 1, -2)
      end

      -- Got a valid path?
      if lfs.attributes(system_path) then
        path = system_path ..&quot;/ndb-help.lua&quot;
      else
        svo.echof(&quot;Didn't find the ndb-help.lua file anywhere - I can't show you the aliases!&quot;)
        return
      end
    else
      svo.echof(&quot;Didn't find the ndb-help.lua file anywhere - I can't show you the aliases!&quot;)
      return
    end
  end

  local f, m = io.open(path)
  local s = f:read(&quot;*a&quot;)

  local data = loadstring(&quot;return &quot;..s)()
  if not data then
    svo.echof(&quot;Couldn't load data from the ndb-help.lua file :/ maybe it is messed up.&quot;)
    return
  end

  ndb.help = data
end

local function gettooltip(entry)
  return table.concat(entry.definition, &quot;\n&quot;)
end

local function getdesc(entry)
  return table.concat(entry.definition, &quot;\n&quot;)
end

local function showshort()
	svo.echof(&quot;ndb alias cheatsheet:&quot;)

	for id, entry in pairs(ndb.help) do
		fg(&quot;DarkSlateGrey&quot;) echo&quot;  * &quot; setFgColor(unpack(svo.getDefaultColorNums)) echoLink(entry.term, 'ndb.showhelp('..id..')', gettooltip(entry), true) echo&quot;\n&quot;
	end
end

local function showlong()
	svo.echof(&quot;ndb alias cheatsheet (extended):&quot;)

	for id, entry in pairs(ndb.help) do
		fg(&quot;DarkSlateGrey&quot;) echo&quot;  * &quot; setFgColor(unpack(svo.getDefaultColorNums)) echoLink(entry.term, 'ndb.showhelp('..id..')', gettooltip(entry), true) echo&quot;\n&quot;
		echo&quot;      &quot; echo(getdesc(entry)) echo&quot;\n&quot;  echo&quot;\n&quot;
	end
end

if matches[2] then showlong() else showshort() end
svo.showprompt() echo'\n'</script>
                <command></command>
                <packageName></packageName>
                <regex>^ndb( long)?$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(qwm) Show marks</name>
                <script>ndb.checkqw(nil, &quot;show marks&quot;)</script>
                <command></command>
                <packageName></packageName>
                <regex>^qwm$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(qwic) Show Infamous (quick)</name>
                <script>ndb.checkqw(nil, &quot;show infamous&quot;)</script>
                <command></command>
                <packageName></packageName>
                <regex>^qwic$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(qwi) Show Infamous (update first)</name>
                <script>if not svo.conf.usehonors then
  svo.echof(&quot;You need to enable vconfig usehonors for Infamous info to show.&quot;)
  return
else
  ndb.checkingqwi = true
  ndb.checkqw(nil, &quot;update&quot;)
end

</script>
                <command></command>
                <packageName></packageName>
                <regex>^qwi$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>(ndb infamous) Shows known infamous people in the database</name>
                <script>ndb.showinfamous()</script>
                <command></command>
                <packageName></packageName>
                <regex>^ndb infamous$</regex>
            </Alias>
        </AliasGroup>
    </AliasPackage>
    <ActionPackage/>
    <ScriptPackage>
        <ScriptGroup isActive="yes" isFolder="yes">
            <name>NameDB</name>
            <packageName></packageName>
            <script>ndb = ndb or {}</script>
            <eventHandlerList/>
            <Script isActive="yes" isFolder="no">
                <name>ndb.init</name>
                <packageName></packageName>
                <script>ndb.schema = {
  people = {
    name          = &quot;&quot;,
    title         = &quot;&quot;,
    gender        = &quot;&quot;,
    class         = &quot;&quot;,
    city          = &quot;&quot;,
    city_rank     = 0,
    city_soldier  = -1, -- -1 default, 0 no, -2 yes
    guild         = &quot;&quot;,
    might         = -1, -- 0 is a possible might, -1 unknown
    importance    = 0,
    xp_rank       = -1, -- -1 default, -2 unranked
    level         = -1, -- -1 default (unknown)
    immortal      = 0,
    iff           = -1, -- -1 autodetected, 1 enemy, 2 ally
    cityenemy     = 0, -- 0 is not enemy, 1 is enemy
    orderenemy    = 0, -- 0 is not enemy, 1 is enemy
    houseenemy    = 0, -- 0 is not enemy, 1 is enemy
    order         = &quot;&quot;,
    notes         = &quot;&quot;,
    dragon        = 0,
    mark          = &quot;&quot;, -- contributed by Veldrin
    race          = &quot;&quot;,
    combat_rank   = -1, -- -1 default, 0 no rank, &gt; 0 yes
    combat_rating = -1, -- -1 default, 0 no rating, &gt; 0 yes
    birth_day     = 0, -- 0 default, &gt; 0 yes
    birth_month   = 0, -- 0 default, &gt; 0 yes
    birth_year    = 0, -- 0 default, &gt; 0 yes
    birth_hidden  = -1, -- -1 default, 0 not hidden, 1 hidden
    arms          = &quot;&quot;,
    divorces      = 0, -- 0 default,
    motto         = &quot;&quot;,
    warcry        = &quot;&quot;,
    infamous      = -1, -- -1 default, 0 not infamous, 1 nearly, 2-7 infamous 

    _unique     = {&quot;name&quot;},
    _violations = &quot;REPLACE&quot;
  },
}

function ndb.init()
  ndb.db = db:create(&quot;NameDB&quot;, ndb.schema)
  -- necessary on Windows, because its IO tends to... slow down with time.
  -- http://www.sqlite.org/pragma.html#pragma_synchronous
  db.__conn[&quot;namedb&quot;]:execute(&quot;pragma synchronous = OFF&quot;)

  -- automigration by db: doesn't work anymore because LuaSQL bugs out on the pragma statement
  -- so if there was any data at all in the db, see if any of it needs to be added

  local test = db:fetch(ndb.db.people)
  if next(test) then
    local _,someperson = next(test)
    
    if someperson.order == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;order&quot; TEXT NULL DEFAULT &quot;&quot;]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field for the persons order.\n&quot;)
    end

    if someperson.race == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;race&quot; TEXT NULL DEFAULT &quot;&quot;]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field for the persons race.\n&quot;)
    end

    if someperson.dragon == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;dragon&quot; REAL NULL DEFAULT 0]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field to see if a person is a dragon.\n&quot;)
    end

    if someperson.mark == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;mark&quot; TEXT NULL DEFAULT &quot;&quot;]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field to see if a person is a mark.\n&quot;)
    end

    if someperson.combat_rank == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;combat_rank&quot; REAL NULL DEFAULT -1]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field for the person combat rank.\n&quot;)
    end

    if someperson.combat_rating == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;combat_rating&quot; REAL NULL DEFAULT -1]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field for the persons combat rating.\n&quot;)
    end

    if someperson.city_soldier == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;city_soldier&quot; REAL NULL DEFAULT -1]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field to see if a person is a city soldier.\n&quot;)
    end

    if someperson.birth_day == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;birth_day&quot; REAL NULL DEFAULT 0]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field for the persons birth day.\n&quot;)
    end

    if someperson.birth_month == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;birth_month&quot; REAL NULL DEFAULT 0]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field for the persons birth month.\n&quot;)
    end

    if someperson.birth_year == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;birth_year&quot; REAL NULL DEFAULT 0]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field for the persons birth year.\n&quot;)
    end

    if someperson.birth_hidden == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;birth_hidden&quot; REAL NULL DEFAULT -1]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field to see if a person has a hidden birthdate.\n&quot;)
    end

    if someperson.arms == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;arms&quot; TEXT NULL DEFAULT &quot;&quot;]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field for the persons arms.\n&quot;)
    end

    if someperson.divorces == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;divorces&quot; REAL NULL DEFAULT 0]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field to see how many divorces a person has had.\n&quot;)
    end

    if someperson.infamous == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;infamous&quot; REAL NULL DEFAULT 0]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field to track Infamous people.\n&quot;)
    end

    if someperson.motto == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;motto&quot; TEXT NULL DEFAULT &quot;&quot;]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field for the persons motto.\n&quot;)
    end

    if someperson.warcry == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;warcry&quot; TEXT NULL DEFAULT &quot;&quot;]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field for the persons warcry.\n&quot;)
    end

    if someperson.level == nil then
      local conn = db.__conn.namedb
      local sql_add = [[ALTER TABLE people ADD COLUMN &quot;level&quot; REAL NULL DEFAULT 0]]
      conn:execute(sql_add)
      conn:commit()
      cecho(&quot;(namedb): upgraded your database to have a field to track a persons level.\n&quot;)
    end
  end

  -- shuffle Shallamese into Targossas
  local c = #(db:fetch(ndb.db.people, db:eq(ndb.db.people.city, &quot;Shallam&quot;)))
  if c ~= 0 then
    -- wait for ndb.fixed_set to be loaded
    tempTimer(0, [[ndb.fixed_set(ndb.db.people.city, &quot;Targossas&quot;, db:eq(ndb.db.people.city, &quot;Shallam&quot;)); svo.echof(&quot;Migrated ]]..c..[[ Shallamese to be called Targossians now.&quot;)]])
  end

   tempTimer(0, function()
     -- fix up knowns to go into rogue
     ndb.fixed_set(ndb.db.people.city, &quot;rogue&quot;, db:eq(ndb.db.people.city, &quot;(none)&quot;))
     ndb.fixed_set(ndb.db.people.city, &quot;rogue&quot;, db:eq(ndb.db.people.city, &quot;none&quot;))
     ndb.fixed_set(ndb.db.people.city, &quot;rogue&quot;, db:eq(ndb.db.people.city, &quot;&quot;))
   end)
end

ndb.init()</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>ndb.valid</name>
                <packageName></packageName>
                <script>ndb.valid = ndb.valid or {}

ndb.valid.cities = {
  &quot;Ashtan&quot;, &quot;Cyrene&quot;, &quot;Hashan&quot;, &quot;Eleusis&quot;, &quot;Mhaldor&quot;, &quot;Targossas&quot;
}
ndb.valid.classes = {
  &quot;alchemist&quot;, &quot;apostate&quot;, &quot;bard&quot;, &quot;blademaster&quot;, &quot;druid&quot;, &quot;infernal&quot;, &quot;jester&quot;, &quot;magi&quot;, &quot;monk&quot;, &quot;occultist&quot;, &quot;paladin&quot;, &quot;priest&quot;, &quot;runewarden&quot;, &quot;sentinel&quot;, &quot;serpent&quot;, &quot;shaman&quot;, &quot;sylvan&quot;
}
ndb.valid.houses = {
  &quot;Blacklotus&quot;, &quot;Occultists&quot;, &quot;Shadowsnakes&quot;, &quot;Merchants&quot;, &quot;Warlocks&quot;, &quot;Ashura&quot;, &quot;Spiritwalkers&quot;, &quot;Cij&quot;, &quot;Shield&quot;, &quot;Virtuosi&quot;, &quot;Outriders&quot;, &quot;Dawnblade&quot;, &quot;Harbingers&quot;, &quot;Luminai&quot;, &quot;Legates&quot;, &quot;Insidium&quot;, &quot;Scions&quot;, &quot;Heartwood&quot;
}
ndb.valid.races = {
  &quot;tsol'aa&quot;, &quot;dwarf&quot;, &quot;human&quot;, &quot;troll&quot;, &quot;atavian&quot;, &quot;rajamala&quot;, &quot;horkval&quot;, &quot;grook&quot;, &quot;xoran&quot;, &quot;siren&quot;, &quot;satyr&quot;, &quot;mhun&quot;,
}
ndb.valid.infamous = {
  [&quot;is rapidly approaching the ranks of the Infamous&quot;] = 1,
  [&quot;is one of the Infamous&quot;]                        = 2,
  [&quot;is one of the solidly Infamous&quot;]                = 3,
  [&quot;is one of the staggeringly Infamous&quot;]           = 4,
  [&quot;is one of the entrenched Infamous&quot;]             = 5,
  [&quot;is one of the near-permanent Infamous&quot;]         = 6,
  [&quot;is one of the inveterately Infamous&quot;]           = 7,
}
ndb.valid.shortinfamous = {
  &quot;nearly&quot;,
  &quot;Infamous&quot;,
  &quot;solidly Infamous&quot;,
  &quot;staggeringly Infamous&quot;,
  &quot;entrenched Infamous&quot;,
  &quot;near-permanent Infamous&quot;,
  &quot;inveterately Infamous&quot;
}

ndb.valid.cityranks = {
  Mhaldor = {
    Slave = 1,
    Troni = 2,
    Dynamis = 3,
    Dominion = 4,
    Archai = 5,
    Exsusiai = 6,
  },

  Cyrene = {
    Citizen = 1,
    Peer = 2,
    Noble = 3,
    Marquis = 4,
    Marquise = 4,
    Duke = 5,
    Duchess = 5,
    Lord = 6,
    Lady = 6,
  },

  Ashtan = {
    Plebeian = 1,
    Equite = 2,
    Centurion = 3,
    Patrician = 4,
    Matrician = 4,
    Consul = 5,
    Praetor = 6,
  },

  Eleusis = {
    Freeman = 1,
    Freewoman = 1,
    Ranger = 2,
    Tender = 3,
    Warden = 4,
    Watcher = 5,
    Elder = 6,
  },

  Hashan = {
    Peasant = 1,
    Commoner = 2,
    Burgher = 3,
    Esquire = 4,
    Peer = 5,
    Peeress = 5,
    Lord = 6,
    Lady = 6,
  },

  -- dead city, but some people in your namedb could be listed as Shallam still
  Shallam = {
    Villager = 1,
    Citizen = 2,
    Chieftain = 3,
    Satrap = 4,
    Ataman = 5,
    Emir = 6
  },

  Targossas = {
    Settler = 1,
    Sentry = 2,
    Devout = 3,
    Vigilant = 4,
    Paragon = 5,
    Vanguard = 6,
  },
}

-- make a reverse map as well, rank = name
for city, citydata in pairs(ndb.valid.cityranks) do
  for rank, rankn in pairs(citydata) do
    citydata[rankn] = rank
  end
end

ndb.valid.months = {
  &quot;Sarapin&quot;,
  &quot;Daedalan&quot;,
  &quot;Aeguary&quot;,
  &quot;Miraman&quot;,
  &quot;Scarlatan&quot;,
  &quot;Ero&quot;,
  &quot;Valnuary&quot;,
  &quot;Lupar&quot;,
  &quot;Phaestian&quot;,
  &quot;Chronos&quot;,
  &quot;Glacian&quot;,
  &quot;Mayan&quot;,
  Sarapin = 1,
  Daedalan = 2,
  Aeguary = 3,
  Miraman = 4,
  Scarlatan = 5,
  Ero = 6,
  Valnuary = 7,
  Lupar = 8,
  Phaestian = 9,
  Chronos = 10,
  Glacian = 11,
  Mayan = 12,
}

function ndb.isvalidcity(which)
  which = which:title()
  return table.contains(ndb.valid.cities, which) and true or false
end

function ndb.isvalidhouse(which)
  which = which:title()
  return table.contains(ndb.valid.houses, which) and true or false
end

function ndb.isvalidclass(which)
  which = which:lower()
  return table.contains(ndb.valid.classes, which) and true or false
end

function ndb.isvalidrace(which)
  which = which:lower()
  return table.contains(ndb.valid.races, which) and true or false
end</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>ndb.support</name>
                <packageName></packageName>
                <script></script>
                <eventHandlerList/>
                <Script isActive="yes" isFolder="no">
                    <name>ndb.finished_honors</name>
                    <packageName></packageName>
                    <script></script>
                    <eventHandlerList>
                        <string>NameDB finished honors</string>
                    </eventHandlerList>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>ndb.updatebyhonors</name>
                    <packageName></packageName>
                    <script>-- this just registers the handler, the script is supposed to be blank</script>
                    <eventHandlerList>
                        <string>NameDB got new data</string>
                    </eventHandlerList>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>ndb.datamining</name>
                    <packageName></packageName>
                    <script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
                    <eventHandlerList/>
                    <Script isActive="yes" isFolder="no">
                        <name>ndb.setfromclass</name>
                        <packageName></packageName>
                        <script>ndb.classhits = ndb.classhits or {}

function ndb.setfromclass(_, class, name)
  -- a name isn't always given if it is not available
  if not name then return end

  class = class:lower()

  if class == &quot;knight&quot; then return end

  ndb.classhits[name] = ndb.classhits[name] or {hits = 0, class = class}

  if ndb.classhits[name].class ~= class then
    ndb.classhits[name].hits = 0 -- reset on a hit from the same person on another class
  else
    ndb.classhits[name].hits = ndb.classhits[name].hits + 1

    if ndb.classhits[name].hits &gt;= svo.conf.autoclassset then
      if class == &quot;dragon&quot; then
        if not ndb.isdragon(name) then
          ndb.setdragon(name, true)
          svo.echof(&quot;Auto-set %s as a Dragon.&quot;, name)
        end
      else
        local oldclass = ndb.getclass(name)
        if not oldclass then return end -- if the name isn't known, don't add it - could be fake names from illusions

        if class ~= oldclass then
          ndb.setclass(name, class)
          svo.echof(&quot;Auto-set %s's class to %s.&quot;, name, class:title())
        end
      end

      ndb.classhits[name].hits = 0 -- reset, so we aren't querying the db on every hit
    end
  end
end</script>
                        <eventHandlerList>
                            <string>svo got hit by</string>
                        </eventHandlerList>
                    </Script>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>ndb.downloaded_file</name>
                    <packageName></packageName>
                    <script>-- credit to Veldrin for the original function

function ndb.downloaded_file(_, filename)
  -- is the file that downloaded ours?
  if not string.find(filename, &quot;namedb.json&quot;) then return end
  local f = io.open(filename)
  local s = f:read(&quot;*all&quot;)
  if f then f:close() end
  os.remove(filename)
  s = s:gsub(&quot;\&quot;&quot;, &quot;&quot;)
  local name = filename:match(&quot;(%w+)-namedb&quot;)
  local fullname = s:match([[fullname:(.+),city]])
  local level = s:match([[level:(%d+),class]])
  local city = s:match([[city:(.+),house]])
  local house = s:match([[house:(.+),level]])
  local class = s:match([[class:(.+),mob_kills]])
  local xp_rank = s:match([[xp_rank:(%d+),explorer_rank]])
  local dragon
  local temp_name_list

  -- sometimes players, unless you're logged in, aren't visible
  if s:find(&quot;I do not recognize that player.&quot;) then
    temp_name_list = {{
      name = name,
      xp_rank = -2,
    }}

  elseif level == nil then
    temp_name_list = {{
      name = name,
      immortal = 1
    }}
 
  else
    
    if tonumber(level) &gt; 98 then dragon = 1 else dragon = 0 end
    if tonumber(xp_rank) == 0 then xp_rank = -2 end -- unranked shows up as 0

    temp_name_list = {{
      name = name,
      class = class,
      dragon = dragon,
      title = fullname,
      level = level,
      immortal = 0,
      xp_rank = xp_rank and xp_rank or -1,
    }}
    if city ~= &quot;(hidden)&quot; then
        temp_name_list[1].city = (city ~= &quot;(none)&quot; and city or &quot;rogue&quot;)
    end
    -- house info isn't shown if you're logged in to the website for some people
    if not(house == &quot;(hidden)&quot; or house == &quot;(none)&quot;) then
      temp_name_list[1].guild = house
    end
  end

  db:merge_unique(ndb.db.people, temp_name_list)

  raiseEvent(&quot;NameDB finished honors&quot;)
end

function ndb.getinfo(person)
  downloadFile(getMudletHomeDir()..&quot;/&quot;..person..&quot;-namedb.json&quot;, &quot;http://api.achaea.com/characters/&quot;..person..&quot;.json&quot;)
end</script>
                    <eventHandlerList>
                        <string>sysDownloadDone</string>
                    </eventHandlerList>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>ndb.ui</name>
                    <packageName></packageName>
                    <script>function ndb.showhonorswindow(text)
  ndb.autochecklabel = ndb.autochecklabel or Geyser.Label:new({
    name = &quot;ndb.autochecklabel&quot;,
    x = &quot;-370px&quot;, y = &quot;-35px&quot;,
    width = &quot;350px&quot;, height = &quot;25px&quot;,
  })

  ndb.autochecklabel:setStyleSheet([[
    margin: 0px;
    padding: 2px;

    background: rgba(0, 0, 51, 75%);
    border: none;
    border-radius: 4px;

    qproperty-alignment: 'AlignLeft | AlignVCenter';
    qproperty-wordWrap: true;
    font-family: 'Ubuntu','Calibri',serif;
  ]])

  ndb.autochecklabel:show()
  ndb.autochecklabel:echo([[&lt;p style=&quot;color: grey; font-size: 15px;&quot;&gt;]]..text..[[&lt;/p&gt;]])
end

function ndb.hidehonorswindow()
  if ndb.autochecklabel then ndb.autochecklabel:hide() end
end</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>ndb.configs</name>
                    <packageName></packageName>
                    <script>function ndb.setuporders()
  local r = db:fetch_sql(ndb.db.people, [[SELECT DISTINCT &quot;order&quot; FROM 'people';]])
  if not r then return end

  table.sort(r, function(a,b) return a.order &lt; b.order end)

  for i = 1, #r do
    if r[i].order ~= &quot;&quot; then
      local order = r[i].order

      svo.config.setoption(&quot;highlight&quot;..order:lower(), {
        type = &quot;boolean&quot;,
        onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s highlight %s's Order members.&quot;, svo.getDefaultColor(), order) end,
        ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s highlight %s's Order members.&quot;, svo.getDefaultColor(), order) end,
      })
      svo.config.setoption(&quot;bold&quot;..order:lower(), {
        type = &quot;boolean&quot;,
        onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s bold %s's Order members.&quot;, svo.getDefaultColor(), order) end,
        ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s bold %s's Order members.&quot;, svo.getDefaultColor(), order) end,
      })
      svo.config.setoption(&quot;underline&quot;..order:lower(), {
        type = &quot;boolean&quot;,
        onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s underline %s's Order members.&quot;, svo.getDefaultColor(), order) end,
        ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s underline %s's Order members.&quot;, svo.getDefaultColor(), order) end,
      })
      svo.config.setoption(&quot;italicize&quot;..order:lower(), {
        type = &quot;boolean&quot;,
        onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s italicize %s's Order members.&quot;, svo.getDefaultColor(), order) end,
        ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s italicize %s's Order members.&quot;, svo.getDefaultColor(), order) end,
      })

      svo.config.setoption(order:lower()..&quot;color&quot;, {
        type = &quot;string&quot;,
        check = function (what)
          if color_table[what] then return true end
        end,
        onset = function ()
          ndb.loadhighlights()
          local r,g,b = unpack(color_table[svo.conf[order:lower()..&quot;color&quot;]])
          svo.echof(&quot;Highlighting %s Order members in &lt;%s,%s,%s&gt;%s%s now.&quot;, order, r,g,b, svo.conf[order:lower()..&quot;color&quot;], svo.getDefaultColor())
        end,
      })
    end
  end
end

function ndb.configs()
  if svo.conf.autocheck == nil then svo.conf.autocheck = true end
  if svo.conf.ndbpause == nil then svo.conf.ndbpause = false end
  if svo.conf.usehonors == nil then svo.conf.usehonors = false end

  svo.config.setoption(&quot;usehonors&quot;, {
    type = &quot;boolean&quot;,
    vconfig2string = true,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s make use of honors when checking new people, which'll allow NameDB to capture more information.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s make use of honors when checking new people.&quot;, svo.getDefaultColor()) end
  })

  svo.config.setoption(&quot;autocheck&quot;, {
    type = &quot;boolean&quot;,
    vconfig2string = true,
    onenabled = function () svo.echof(&quot;&lt;0,250,0&gt;Will%s automatically, and quietly, honors new people we come across.&quot;, svo.getDefaultColor()) ndb.updatebyhonors() end,
    ondisabled = function () svo.echof(&quot;&lt;250,0,0&gt;Won't%s automatically honors new people. Use 'ndb honorsnew' to clear the new names backlog manually.&quot;, svo.getDefaultColor()) ndb.cancelhonors(true) end,
    onshow = function (defaultcolour)
      fg(&quot;gold&quot;)
      echoLink(&quot;NameDB:&quot;, &quot;&quot;, &quot;svo NameDB&quot;, true)
      fg(defaultcolour) echo(&quot; &quot;)
      fg(&quot;a_cyan&quot;) echoLink(svo.conf.autocheck and &quot;Auto-checking&quot; or &quot;Not auto-checking&quot;, &quot;svo.config.set('autocheck', &quot;..(svo.conf.autocheck and &quot;false&quot; or &quot;true&quot;)..&quot;, true)&quot;, &quot;Click to &quot;..(svo.conf.autocheck and &quot;disable&quot; or &quot;enable&quot;)..&quot; automatic name checks on new people that we see&quot;, true)
      fg(defaultcolour)
      echo(&quot; new people, highlighting names is &quot;)
      fg(defaultcolour)
      fg(&quot;a_cyan&quot;) echoLink(not svo.conf.ndbpaused and &quot;on&quot; or &quot;off&quot;, &quot;svo.config.set('ndbpaused', &quot;..(svo.conf.ndbpaused and &quot;false&quot; or &quot;true&quot;)..&quot;, true)&quot;, &quot;Click to &quot;..(svo.conf.ndbpaused and &quot;start&quot; or &quot;stop&quot;)..&quot; highlighting names&quot;, true)
      fg(defaultcolour)
      echo(&quot;, &quot;)
      fg(&quot;a_cyan&quot;) echoLink(svo.conf.usehonors and &quot;will&quot; or &quot;won't&quot;, &quot;svo.config.set('usehonors', &quot;..(svo.conf.usehonors and &quot;false&quot; or &quot;true&quot;)..&quot;, true)&quot;, &quot;Click to &quot;..(not svo.conf.usehonors and &quot;enable&quot; or &quot;disable&quot;)..&quot; using honors to check names&quot;, true)
      fg(defaultcolour)
      echo(&quot; use honors.\n&quot;)
    end
  })

  svo.config.setoption(&quot;ndbpaused&quot;, {
    type = &quot;boolean&quot;,
    onenabled = function () ndb.loadhighlights() svo.echof(&quot;Name highlighting &lt;250,0,0&gt;stopped%s.&quot;, svo.getDefaultColor()) end,
    ondisabled = function () ndb.loadhighlights() svo.echof(&quot;Name highlighting &lt;0,250,0&gt;resumed%s.&quot;, svo.getDefaultColor()) end
  })

  svo.conf.autoclassset = svo.conf.autoclassset or 10
  svo.config.setoption(&quot;autoclassset&quot;, {
    type = &quot;number&quot;,
    vconfig2string = true,
    onshow = function (defaultcolour)
      fg(&quot;gold&quot;)
      echoLink(&quot;NameDB:&quot;, &quot;&quot;, &quot;svo NameDB&quot;, true)
      fg(defaultcolour) echo(&quot; Capture a persons class after &quot;)
      fg(&quot;a_cyan&quot;) echoLink(tostring(svo.conf.autoclassset), &quot;printCmdLine('vconfig autoclassset ')&quot;, &quot;Click to set the amount of consecutive attacks a person must do from a particular class before it's recorded in NameDB. This is for anti-illusion purposes, so illusions can't easily make NameDB mess with their known class&quot;, true)
      fg(defaultcolour)
      echo(&quot; consecutive attacks.\n&quot;)
    end,
    onset = function ()
      svo.echof(&quot;Will record/change a persons class after %d class-specific attacks from them.&quot;, svo.conf.autoclassset)
    end,
  })

  svo.config.setoption(&quot;politics&quot;, {
    type = &quot;custom&quot;,
    onmenu = function () ndb.showpolitics(true) end,
  })

  local function setupwatchfor()
    svo.config.setoption(&quot;highlightwatchfor&quot;, {
      type = &quot;boolean&quot;,
      onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s highlight names on the watchfor list.&quot;, svo.getDefaultColor()) end,
      ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s highlight names on the watchfor list.&quot;, svo.getDefaultColor()) end,
    })
    svo.config.setoption(&quot;boldwatchfor&quot;, {
      type = &quot;boolean&quot;,
      onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s bold names on the watchfor list.&quot;, svo.getDefaultColor()) end,
      ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s bold names on the watchfor list.&quot;, svo.getDefaultColor()) end,
    })
    svo.config.setoption(&quot;underlinewatchfor&quot;, {
      type = &quot;boolean&quot;,
      onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s underline names on the watchfor list.&quot;, svo.getDefaultColor()) end,
      ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s underline names on the watchfor list.&quot;, svo.getDefaultColor()) end,
    })
    svo.config.setoption(&quot;italicizewatchfor&quot;, {
      type = &quot;boolean&quot;,
      onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s italicize names on the watchfor list.&quot;, svo.getDefaultColor()) end,
      ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s italicize names on the watchfor list.&quot;, svo.getDefaultColor()) end,
    })

    svo.config.setoption(&quot;watchforcolor&quot;, {
      type = &quot;string&quot;,
      check = function (what)
        if color_table[what] then return true end
      end,
      onset = function ()
        ndb.loadhighlights()
        local r,g,b = unpack(color_table[svo.conf.watchforcolor])
        svo.echof(&quot;Highlighting watchfor names in &lt;%s,%s,%s&gt;%s%s now.&quot;, r,g,b, svo.conf.watchforcolor, svo.getDefaultColor())
      end,
    })
  end

  local function setupcities()
    for _, city in ipairs(ndb.valid.cities) do
      svo.config.setoption(&quot;highlight&quot;..city:lower(), {
        type = &quot;boolean&quot;,
        onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s highlight citizens of %s.&quot;, svo.getDefaultColor(), city) end,
        ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s highlight citizens of %s.&quot;, svo.getDefaultColor(), city) end,
      })
      svo.config.setoption(&quot;bold&quot;..city:lower(), {
        type = &quot;boolean&quot;,
        onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s bold the names of %s citizens.&quot;, svo.getDefaultColor(), city) end,
        ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s bold the names of %s citizens.&quot;, svo.getDefaultColor(), city) end,
      })
      svo.config.setoption(&quot;underline&quot;..city:lower(), {
        type = &quot;boolean&quot;,
        onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s underline the names of %s citizens.&quot;, svo.getDefaultColor(), city) end,
        ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s underline the names of %s citizens.&quot;, svo.getDefaultColor(), city) end,
      })
      svo.config.setoption(&quot;italicize&quot;..city:lower(), {
        type = &quot;boolean&quot;,
        onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s italicize the names of %s citizens.&quot;, svo.getDefaultColor(), city) end,
        ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s italicize the names of %s citizens.&quot;, svo.getDefaultColor(), city) end,
      })

      svo.config.setoption(city:lower()..&quot;color&quot;, {
        type = &quot;string&quot;,
        check = function (what)
          if color_table[what] then return true end
        end,
        onset = function ()
          ndb.loadhighlights()
          local r,g,b = unpack(color_table[svo.conf[city:lower()..&quot;color&quot;]])
          svo.echof(&quot;Highlighting %s citizens in &lt;%s,%s,%s&gt;%s%s now.&quot;, city, r,g,b, svo.conf[city:lower()..&quot;color&quot;], svo.getDefaultColor())
        end,
      })
    end
  end

  local function setuprogues()
    svo.config.setoption(&quot;highlightrogues&quot;, {
      type = &quot;boolean&quot;,
      onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s highlight rogues.&quot;, svo.getDefaultColor()) end,
      ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s highlight rogues.&quot;, svo.getDefaultColor()) end,
    })
    svo.config.setoption(&quot;boldrogues&quot;, {
      type = &quot;boolean&quot;,
      onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s bold the names of rogues.&quot;, svo.getDefaultColor()) end,
      ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s bold the names of rogues.&quot;, svo.getDefaultColor()) end,
    })
    svo.config.setoption(&quot;underlinerogues&quot;, {
      type = &quot;boolean&quot;,
      onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s underline the names of rogues.&quot;, svo.getDefaultColor()) end,
      ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s underline the names of rogues.&quot;, svo.getDefaultColor()) end,
    })
    svo.config.setoption(&quot;italicizerogues&quot;, {
      type = &quot;boolean&quot;,
      onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s italicize the names of rogues.&quot;, svo.getDefaultColor()) end,
      ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s italicize the names of rogues.&quot;, svo.getDefaultColor()) end,
    })

    svo.config.setoption(&quot;roguescolor&quot;, {
      type = &quot;string&quot;,
      check = function (what)
        if color_table[what] then return true end
      end,
      onset = function ()
        ndb.loadhighlights()
        local r,g,b = unpack(color_table[svo.conf[&quot;roguescolor&quot;]])
        svo.echof(&quot;Highlighting rogues in &lt;%s,%s,%s&gt;%s%s now.&quot;, r,g,b, svo.conf[&quot;roguescolor&quot;], svo.getDefaultColor())
      end,
    })
  end

  local function setupenemies()
    for _, org in ipairs({&quot;city&quot;, &quot;house&quot;, &quot;order&quot;}) do
      svo.config.setoption(&quot;highlight&quot;..org:lower(), {
        type = &quot;boolean&quot;,
        onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s highlight enemies of your of %s.&quot;, svo.getDefaultColor(), org) end,
        ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s highlight enemies of your of %s.&quot;, svo.getDefaultColor(), org) end,
      })
      svo.config.setoption(&quot;bold&quot;..org:lower(), {
        type = &quot;boolean&quot;,
        onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s bold the names of your %s enemies.&quot;, svo.getDefaultColor(), org) end,
        ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s bold the names of your %s enemies.&quot;, svo.getDefaultColor(), org) end,
      })
      svo.config.setoption(&quot;underline&quot;..org:lower(), {
        type = &quot;boolean&quot;,
        onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s underline the names of your %s enemies.&quot;, svo.getDefaultColor(), org) end,
        ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s underline the names of your %s enemies.&quot;, svo.getDefaultColor(), org) end,
      })
      svo.config.setoption(&quot;italicize&quot;..org:lower(), {
        type = &quot;boolean&quot;,
        onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s italicize the names of your %s enemies.&quot;, svo.getDefaultColor(), org) end,
        ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s italicize the names of your %s enemies.&quot;, svo.getDefaultColor(), org) end,
      })

      svo.config.setoption(org:lower()..&quot;color&quot;, {
        type = &quot;string&quot;,
        check = function (what)
          if color_table[what] then return true end
        end,
        onset = function ()
          ndb.loadhighlights()
          local r,g,b = unpack(color_table[svo.conf[org:lower()..&quot;color&quot;]])
          svo.echof(&quot;Highlighting your %s enemies in &lt;%s,%s,%s&gt;%s%s now.&quot;, org, r,g,b, svo.conf[org:lower()..&quot;color&quot;], svo.getDefaultColor())
        end,
      })
    end
  end
  
  local function setupdivines()
    svo.config.setoption(&quot;highlightdivine&quot;, {
      type = &quot;boolean&quot;,
      onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s highlight Divines.&quot;, svo.getDefaultColor()) end,
      ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s highlight Divines.&quot;, svo.getDefaultColor()) end,
    })
    svo.config.setoption(&quot;bolddivine&quot;, {
      type = &quot;boolean&quot;,
      onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s bold Divines.&quot;, svo.getDefaultColor()) end,
      ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s bold Divines.&quot;, svo.getDefaultColor()) end,
    })
    svo.config.setoption(&quot;underlinedivine&quot;, {
      type = &quot;boolean&quot;,
      onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s underline Divines.&quot;, svo.getDefaultColor()) end,
      ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s underline Divines.&quot;, svo.getDefaultColor()) end,
    })
    svo.config.setoption(&quot;italicizedivine&quot;, {
      type = &quot;boolean&quot;,
      onenabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;0,250,0&gt;Will%s italicize Divines.&quot;, svo.getDefaultColor()) end,
      ondisabled = function () ndb.loadhighlights() svo.echof(&quot;&lt;250,0,0&gt;Won't%s italicize Divines.&quot;, svo.getDefaultColor()) end,
    })

    svo.config.setoption(&quot;divinecolor&quot;, {
      type = &quot;string&quot;,
      check = function (what)
        if color_table[what] then return true end
      end,
      onset = function ()
        ndb.loadhighlights()
        local r,g,b = unpack(color_table[svo.conf.divinecolor])
        svo.echof(&quot;Highlighting Divines in &lt;%s,%s,%s&gt;%s%s now.&quot;, r,g,b, svo.conf.divinecolor, svo.getDefaultColor())
      end,
    })
  end

  local function addhighlightignore()
    svo.me.highlightignore = svo.me.highlightignore or {}

    svo.config.setoption(&quot;highlightignore&quot;, {
      type = &quot;string&quot;,
      check = function(what)
        if what:find(&quot;^%w+$&quot;) then return true end
      end,
      onset = function ()
        local name = string.title(svo.conf.highlightignore)
        -- we want nil, not false so 'or' doesn't help
        if svo.me.highlightignore[name] then svo.me.highlightignore[name] = nil else svo.me.highlightignore[name] = true end

        if svo.me.highlightignore[name] then
          svo.echof(&quot;Added &lt;0,255,0&gt;%s%s to the highlightignore list - so we won't highlight them.&quot;, name, svo.getDefaultColor())
        else
          svo.echof(&quot;Removed %s from the highlightignore list.&quot;, name)
        end
        raiseEvent(&quot;NameDB highlightignore name changed&quot;, name)
      end
    })
  end

  setupcities()
  setuprogues()
  setupwatchfor()
  setupenemies()
  setupdivines()
  ndb.setuporders()
  addhighlightignore()
end

-- improve: add background colors
--   rogues as a section
function ndb.showpolitics(noprompt)
  local echo, setFgColor, setUnderline, setFgColor, echoLink = echo, setFgColor, setUnderline, setFgColor, echoLink
  svo.echof(&quot;Adjust city stances and setup highlights (currently highlighting %s names):&quot;, table.size(ndb.highlightIDs))
  svo.echofn(&quot;(click on underlined to change, &quot;)
    setFgColor(unpack(svo.getDefaultColorNums))
    setUnderline(true) echoLink(&quot;view color list&quot;, &quot;showColors()&quot;, &quot;Click here to view the list of possible colors you can choose&quot;, true) setUnderline(false)
    echo(&quot;):\n\n&quot;)

  local function showcities()
    svo.echof(&quot;City politics:&quot;)

    -- cities
    for _, city in ipairs(ndb.valid.cities) do
      local status = ndb.conf.citypolitics[city]
      local extraspaces = 0
      setFgColor(unpack(svo.getDefaultColorNums))
      echo(&quot;  &quot;)
      echo(string.format(&quot;%-9s is &quot;, city))

      local nextstatus
      if status == &quot;ally&quot; then fg(&quot;a_green&quot;); nextstatus = &quot;enemy&quot;; status = &quot;an ally&quot;; extraspaces = 7
      elseif status == &quot;enemy&quot; then fg(&quot;a_red&quot;); nextstatus = &quot;neutral&quot;; status = &quot;an enemy&quot;; extraspaces = 8
      else fg(&quot;a_darkwhite&quot;); nextstatus = &quot;ally&quot;; extraspaces = 7 end

      if svo.conf.org ~= city then
        setUnderline(true) echoLink(tostring(status), &quot;ndb.conf.citypolitics.&quot;..city..&quot; = '&quot;..nextstatus..&quot;'; ndb.showpolitics()&quot;, 'Click to set '..city..&quot;s status to &quot;..nextstatus, true) setUnderline(false)
      else
        setFgColor(unpack(svo.getDefaultColorNums)) echo(&quot;your home&quot;); extraspaces = 9
      end

      setFgColor(unpack(svo.getDefaultColorNums))
      echo(&quot;,&quot;)
      echo((&quot; &quot;):rep(10-extraspaces))

      setUnderline(true)
      echoLink(svo.conf[&quot;highlight&quot;..city:lower()] and &quot;highlighting&quot; or &quot;not highlighting&quot;, 
        'svo.config.set(&quot;highlight'..city:lower()..'&quot;, '..(svo.conf[&quot;highlight&quot;..city:lower()] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
        'Click to '..(svo.conf[&quot;highlight&quot;..city:lower()] and &quot;stop&quot; or &quot;start&quot;).. ' highlighting citizens of '..city, 
      true)
      setUnderline(false)

      if not svo.conf[&quot;highlight&quot;..city:lower()] then
        echo(&quot;  its citizens in any color,&quot;)
        echo((&quot; &quot;):rep(2))
      else
        echo((&quot; &quot;):rep(5))
        echo(&quot; its citizens in &quot;)
        setUnderline(true)
        setFgColor(unpack(color_table[svo.conf[city:lower()..&quot;color&quot;] or &quot;a_darkwhite&quot;]))
        echoLink(svo.conf[city:lower()..&quot;color&quot;] or &quot;a_darkwhite&quot;, 
          &quot;printCmdLine'vconfig &quot;..city:lower()..&quot;color '&quot;, 
          'Click to set the color of '..ndb.getpluralcity(city, 2)..' citizens', 
        true)
        setUnderline(false)
        setFgColor(unpack(svo.getDefaultColorNums))
        echo(&quot;, &quot;)
        echo((&quot; &quot;):rep(10-#(svo.conf[city:lower()..&quot;color&quot;] or &quot;a_darkwhite&quot;)))
      end

      echo(&quot;(&quot;)

      setUnderline(true)
      echoLink(svo.conf[&quot;bold&quot;..city:lower()] and &quot;bold&quot; or &quot;no bld&quot;, 
        'svo.config.set(&quot;bold'..city:lower()..'&quot;, '..(svo.conf[&quot;bold&quot;..city:lower()] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
        'Click to '..(svo.conf[&quot;bold&quot;..city:lower()] and &quot;stop&quot; or &quot;start&quot;).. ' bolding citizens of '..city, 
      true)
      setUnderline(false)
      echo(&quot;, &quot;)

      setUnderline(true)
      echoLink(svo.conf[&quot;underline&quot;..city:lower()] and &quot;undl&quot; or &quot;no undl&quot;, 
        'svo.config.set(&quot;underline'..city:lower()..'&quot;, '..(svo.conf[&quot;underline&quot;..city:lower()] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
        'Click to '..(svo.conf[&quot;underline&quot;..city:lower()] and &quot;stop&quot; or &quot;start&quot;).. ' underlining citizens of '..city, 
      true)
      setUnderline(false)
      echo(&quot;, &quot;)

      setUnderline(true)
      echoLink(svo.conf[&quot;italicize&quot;..city:lower()] and &quot;ital&quot; or &quot;no ital&quot;, 
        'svo.config.set(&quot;italicize'..city:lower()..'&quot;, '..(svo.conf[&quot;italicize&quot;..city:lower()] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
        'Click to '..(svo.conf[&quot;italicize&quot;..city:lower()] and &quot;stop&quot; or &quot;start&quot;).. ' italicizing citizens of '..city, 
      true)
      setUnderline(false)

      echo(&quot;)&quot;)

      echo('\n')
    end

    -- rogues
    setFgColor(unpack(svo.getDefaultColorNums))
    echo(&quot;  Rogues are neutral,     &quot;)

    setUnderline(true)
    echoLink(svo.conf[&quot;highlightrogues&quot;] and &quot;highlighting&quot; or &quot;not highlighting&quot;, 
      'svo.config.set(&quot;highlightrogues&quot;, '..(svo.conf[&quot;highlightrogues&quot;] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
      'Click to '..(svo.conf[&quot;highlightrogues&quot;] and &quot;stop&quot; or &quot;start&quot;).. ' highlighting rogues', 
    true)
    setUnderline(false)

    if not svo.conf[&quot;highlightrogues&quot;] then
      echo(&quot;  them in any color,&quot;)
      echo((&quot; &quot;):rep(10))
    else
      echo((&quot; &quot;):rep(5))
      echo(&quot; them in &quot;)
      setUnderline(true)
      setFgColor(unpack(color_table[svo.conf[&quot;roguescolor&quot;] or &quot;a_darkwhite&quot;]))
      echoLink(svo.conf[&quot;roguescolor&quot;] or &quot;a_darkwhite&quot;, 
        &quot;printCmdLine'vconfig rogues&quot;..&quot;color '&quot;, 
        'Click to set the color of rogues', 
      true)
      setUnderline(false)
      setFgColor(unpack(svo.getDefaultColorNums))
      echo(&quot;, &quot;)
      echo((&quot; &quot;):rep(18-#(svo.conf[&quot;roguescolor&quot;] or &quot;a_darkwhite&quot;)))
    end

    echo(&quot;(&quot;)

    setUnderline(true)
    echoLink(svo.conf[&quot;boldrogues&quot;] and &quot;bold&quot; or &quot;no bld&quot;, 
      'svo.config.set(&quot;boldrogues&quot;, '..(svo.conf[&quot;boldrogues&quot;] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
      'Click to '..(svo.conf[&quot;boldrogues&quot;] and &quot;stop&quot; or &quot;start&quot;).. ' bolding rogues', 
    true)
    setUnderline(false)
    echo(&quot;, &quot;)

    setUnderline(true)
    echoLink(svo.conf[&quot;underlinerogues&quot;] and &quot;undl&quot; or &quot;no undl&quot;, 
      'svo.config.set(&quot;underlinerogues&quot;, '..(svo.conf[&quot;underlinerogues&quot;] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
      'Click to '..(svo.conf[&quot;underlinerogues&quot;] and &quot;stop&quot; or &quot;start&quot;).. ' underlining rogues', 
    true)
    setUnderline(false)
    echo(&quot;, &quot;)

    setUnderline(true)
    echoLink(svo.conf[&quot;italicizerogues&quot;] and &quot;ital&quot; or &quot;no ital&quot;, 
      'svo.config.set(&quot;italicizerogues&quot;, '..(svo.conf[&quot;italicizerogues&quot;] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
      'Click to '..(svo.conf[&quot;italicizerogues&quot;] and &quot;stop&quot; or &quot;start&quot;).. ' italicizing rogues', 
    true)
    setUnderline(false)

    echo(&quot;)&quot;)

    echo('\n')
  end

  local function showwatchfor()
    svo.echof(&quot;Watchfor list:&quot;)
    setFgColor(unpack(svo.getDefaultColorNums))
    echo(&quot;  &quot;)
    setUnderline(true)
    echoLink(svo.conf[&quot;highlightwatchfor&quot;] and &quot;Highlighting&quot; or &quot;Not highlighting&quot;, 
      'svo.config.set(&quot;highlightwatchfor&quot;, '..(svo.conf[&quot;highlightwatchfor&quot;] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
      'Click to '..(svo.conf[&quot;highlightwatchfor&quot;] and &quot;stop&quot; or &quot;start&quot;).. ' highlighting names on the watchfor list',
    true)
    setUnderline(false)

    if not svo.conf[&quot;highlightwatchfor&quot;] then
      echo(&quot; names on the watchfor list. &quot;)
      echo((&quot; &quot;):rep(25))
    else
      echo(&quot; names on the watchfor list in &quot;)
      setUnderline(true)
      setFgColor(unpack(color_table[svo.conf[&quot;watchforcolor&quot;] or &quot;a_darkwhite&quot;]))
      echoLink(svo.conf[&quot;watchforcolor&quot;] or &quot;a_darkwhite&quot;, 
        &quot;printCmdLine'vconfig watchfor&quot;..&quot;color '&quot;, 
        'Click to set the color of names on the watchfor list', 
      true)
      setUnderline(false)
      setFgColor(unpack(svo.getDefaultColorNums))
      echo(&quot;, &quot;)
      echo((&quot; &quot;):rep(25-#(svo.conf[&quot;watchforcolor&quot;] or &quot;a_darkwhite&quot;)))
    end

    echo(&quot;(&quot;)

    setUnderline(true)
    echoLink(svo.conf[&quot;boldwatchfor&quot;] and &quot;bold&quot; or &quot;no bld&quot;, 
      'svo.config.set(&quot;boldwatchfor&quot;, '..(svo.conf[&quot;boldwatchfor&quot;] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
      'Click to '..(svo.conf[&quot;boldwatchfor&quot;] and &quot;stop&quot; or &quot;start&quot;).. ' bolding names on watchfor list', 
    true)
    setUnderline(false)
    echo(&quot;, &quot;)

    setUnderline(true)
    echoLink(svo.conf[&quot;underlinewatchfor&quot;] and &quot;undl&quot; or &quot;no undl&quot;, 
      'svo.config.set(&quot;underlinewatchfor&quot;, '..(svo.conf[&quot;underlinewatchfor&quot;] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
      'Click to '..(svo.conf[&quot;underlinewatchfor&quot;] and &quot;stop&quot; or &quot;start&quot;).. ' underlining names on watchfor list', 
    true)
    setUnderline(false)
    echo(&quot;, &quot;)

    setUnderline(true)
    echoLink(svo.conf[&quot;italicizewatchfor&quot;] and &quot;ital&quot; or &quot;no ital&quot;, 
      'svo.config.set(&quot;italicizewatchfor&quot;, '..(svo.conf[&quot;italicizewatchfor&quot;] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
      'Click to '..(svo.conf[&quot;italicizewatchfor&quot;] and &quot;stop&quot; or &quot;start&quot;).. ' italicizing names on watchfor list', 
    true)
    setUnderline(false)

    echo(&quot;)&quot;)
    echo(&quot;\n&quot;)
  end

  local function showdivines()
    svo.echof(&quot;Divine list:&quot;)
    setFgColor(unpack(svo.getDefaultColorNums))
    echo(&quot;  &quot;)
    setUnderline(true)
    echoLink(svo.conf[&quot;highlightdivine&quot;] and &quot;Highlighting&quot; or &quot;Not highlighting&quot;, 
      'svo.config.set(&quot;highlightdivine&quot;, '..(svo.conf[&quot;highlightdivine&quot;] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
      'Click to '..(svo.conf[&quot;highlightdivine&quot;] and &quot;stop&quot; or &quot;start&quot;).. ' highlighting Divines',
    true)
    setUnderline(false)

    if not svo.conf[&quot;highlightdivine&quot;] then
      echo(&quot; Divines. &quot;)
      echo((&quot; &quot;):rep(44))
    else
      echo(&quot; Divines in &quot;)
      setUnderline(true)
      setFgColor(unpack(color_table[svo.conf[&quot;divinecolor&quot;] or &quot;a_darkwhite&quot;]))
      echoLink(svo.conf[&quot;divinecolor&quot;] or &quot;a_darkwhite&quot;, 
        &quot;printCmdLine'vconfig divine&quot;..&quot;color '&quot;, 
        'Click to set the color of Divine names', 
      true)
      setUnderline(false)
      setFgColor(unpack(svo.getDefaultColorNums))
      echo(&quot;, &quot;)
      echo((&quot; &quot;):rep(44-#(svo.conf[&quot;divinecolor&quot;] or &quot;a_darkwhite&quot;)))
    end

    echo(&quot;(&quot;)

    setUnderline(true)
    echoLink(svo.conf[&quot;bolddivine&quot;] and &quot;bold&quot; or &quot;no bld&quot;, 
      'svo.config.set(&quot;bolddivine&quot;, '..(svo.conf[&quot;bolddivine&quot;] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
      'Click to '..(svo.conf[&quot;bolddivine&quot;] and &quot;stop&quot; or &quot;start&quot;).. ' bolding Divines', 
    true)
    setUnderline(false)
    echo(&quot;, &quot;)

    setUnderline(true)
    echoLink(svo.conf[&quot;underlinedivine&quot;] and &quot;undl&quot; or &quot;no undl&quot;, 
      'svo.config.set(&quot;underlinedivine&quot;, '..(svo.conf[&quot;underlinedivine&quot;] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
      'Click to '..(svo.conf[&quot;underlinedivine&quot;] and &quot;stop&quot; or &quot;start&quot;).. ' underlining Divines', 
    true)
    setUnderline(false)
    echo(&quot;, &quot;)

    setUnderline(true)
    echoLink(svo.conf[&quot;italicizedivine&quot;] and &quot;ital&quot; or &quot;no ital&quot;, 
      'svo.config.set(&quot;italicizedivine&quot;, '..(svo.conf[&quot;italicizedivine&quot;] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
      'Click to '..(svo.conf[&quot;italicizedivine&quot;] and &quot;stop&quot; or &quot;start&quot;).. ' italicizing Divines', 
    true)
    setUnderline(false)

    echo(&quot;)&quot;)
    echo(&quot;\n&quot;)
  end

  local function showenemies()
    svo.echof(&quot;House, City and Order enemies:&quot;)

    for _, org in ipairs({&quot;house&quot;, &quot;city&quot;, &quot;order&quot;}) do
      setFgColor(unpack(svo.getDefaultColorNums))
      echo(&quot;  &quot;)
      setUnderline(true)
      echoLink(svo.conf[&quot;highlight&quot;..org] and &quot;Highlighting&quot; or &quot;Not highlighting&quot;, 
        'svo.config.set(&quot;highlight'..org..'&quot;, '..(svo.conf[&quot;highlight&quot;..org] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
        'Click to '..(svo.conf[&quot;highlight&quot;..org] and &quot;stop&quot; or &quot;start&quot;).. ' highlighting names of your '..org..' enemies',
      true)
      setUnderline(false)

      if not svo.conf[&quot;highlight&quot;..org] then
        echo(&quot; names of your &quot;..org..&quot; enemies. &quot;)
        echo((&quot; &quot;):rep(29-#org))
      else
        echo(&quot;     names of your &quot;..org.. &quot; enemies in &quot;)
        setUnderline(true)
        setFgColor(unpack(color_table[svo.conf[org..&quot;color&quot;] or &quot;a_darkwhite&quot;]))
        echoLink(svo.conf[org..&quot;color&quot;] or &quot;a_darkwhite&quot;, 
          &quot;printCmdLine'vconfig &quot;..org..&quot;color '&quot;, 
          'Click to set the color of names on '..org..' enemies list', 
        true)
        setUnderline(false)
        setFgColor(unpack(svo.getDefaultColorNums))
        echo(&quot;, &quot;)
        echo((&quot; &quot;):rep(25-#org-#(svo.conf[org..&quot;color&quot;] or &quot;a_darkwhite&quot;)))
      end
      
      echo(&quot;(&quot;)

      setUnderline(true)
      echoLink(svo.conf[&quot;bold&quot;..org] and &quot;bold&quot; or &quot;no bld&quot;, 
        'svo.config.set(&quot;bold'..org..'&quot;, '..(svo.conf[&quot;bold&quot;..org] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
        'Click to '..(svo.conf[&quot;bold&quot;..org] and &quot;stop&quot; or &quot;start&quot;).. ' bolding names of your '..org..' enemies', 
      true)
      setUnderline(false)
      echo(&quot;, &quot;)

      setUnderline(true)
      echoLink(svo.conf[&quot;underline&quot;..org] and &quot;undl&quot; or &quot;no undl&quot;, 
        'svo.config.set(&quot;underline'..org..'&quot;, '..(svo.conf[&quot;underline&quot;..org] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
        'Click to '..(svo.conf[&quot;underline&quot;..org] and &quot;stop&quot; or &quot;start&quot;).. ' underlining names of your '..org..' enemies', 
      true)
      setUnderline(false)
      echo(&quot;, &quot;)

      setUnderline(true)
      echoLink(svo.conf[&quot;italicize&quot;..org] and &quot;ital&quot; or &quot;no ital&quot;, 
        'svo.config.set(&quot;italicize'..org..'&quot;, '..(svo.conf[&quot;italicize&quot;..org] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
        'Click to '..(svo.conf[&quot;italicize&quot;..org] and &quot;stop&quot; or &quot;start&quot;).. ' italicizing names of your '..org..' enemies', 
      true)
      setUnderline(false)

      echo(&quot;)&quot;)
      echo(&quot;\n&quot;)
    end
  end

  local function showordermembers()
    local r = db:fetch_sql(ndb.db.people, [[SELECT DISTINCT &quot;order&quot; FROM 'people';]])
    if not r then return end

    table.sort(r, function(a,b) return a.order &lt; b.order end)

    local shownsomething
    svo.echof(&quot;Order members:&quot;)
    for i = 1, #r do
      if r[i].order ~= &quot;&quot; then
        shownsomething = true
        local order = r[i].order

        setFgColor(unpack(svo.getDefaultColorNums))
        echo(&quot;  &quot;)
        setUnderline(true)
        echoLink(svo.conf[&quot;highlight&quot;..order:lower()] and &quot;Highlighting&quot; or &quot;Not highlighting&quot;, 
          'svo.config.set(&quot;highlight'..order:lower()..'&quot;, '..(svo.conf[&quot;highlight&quot;..order:lower()] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
          'Click to '..(svo.conf[&quot;highlight&quot;..order:lower()] and &quot;stop&quot; or &quot;start&quot;).. ' highlighting names of '..order:lower()..'\'s members',
        true)
        setUnderline(false)

        if not svo.conf[&quot;highlight&quot;..order:lower()] then
          echo(&quot; names of &quot;..order..&quot;'s Order members. &quot;)
          echo((&quot; &quot;):rep(26-#order))
        else
          echo(&quot;     names of &quot;..order.. &quot;'s Order members in &quot;)
          setUnderline(true)
          setFgColor(unpack(color_table[svo.conf[order:lower()..&quot;color&quot;] or &quot;a_darkwhite&quot;]))
          echoLink(svo.conf[order:lower()..&quot;color&quot;] or &quot;a_darkwhite&quot;, 
            &quot;printCmdLine'vconfig &quot;..order:lower()..&quot;color '&quot;, 
            'Click to set the color of '..order:lower()..'\'s Order members', 
          true)
          setUnderline(false)
          setFgColor(unpack(svo.getDefaultColorNums))
          echo(&quot;, &quot;)
          echo((&quot; &quot;):rep(22-#order-#(svo.conf[order:lower()..&quot;color&quot;] or &quot;a_darkwhite&quot;)))
        end
        
        echo(&quot;(&quot;)

        setUnderline(true)
        echoLink(svo.conf[&quot;bold&quot;..order:lower()] and &quot;bold&quot; or &quot;no bld&quot;, 
          'svo.config.set(&quot;bold'..order:lower()..'&quot;, '..(svo.conf[&quot;bold&quot;..order:lower()] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
          'Click to '..(svo.conf[&quot;bold&quot;..order:lower()] and &quot;stop&quot; or &quot;start&quot;).. ' bolding names '..order:lower()..'\'s Order members', 
        true)
        setUnderline(false)
        echo(&quot;, &quot;)

        setUnderline(true)
        echoLink(svo.conf[&quot;underline&quot;..order:lower()] and &quot;undl&quot; or &quot;no undl&quot;, 
          'svo.config.set(&quot;underline'..order:lower()..'&quot;, '..(svo.conf[&quot;underline&quot;..order:lower()] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
          'Click to '..(svo.conf[&quot;underline&quot;..order:lower()] and &quot;stop&quot; or &quot;start&quot;).. ' underlining names '..order:lower()..'\'s Order members', 
        true)
        setUnderline(false)
        echo(&quot;, &quot;)

        setUnderline(true)
        echoLink(svo.conf[&quot;italicize&quot;..order:lower()] and &quot;ital&quot; or &quot;no ital&quot;, 
          'svo.config.set(&quot;italicize'..order:lower()..'&quot;, '..(svo.conf[&quot;italicize&quot;..order:lower()] and &quot;false&quot; or &quot;true&quot;)..', true); ndb.showpolitics()', 
          'Click to '..(svo.conf[&quot;italicize&quot;..order:lower()] and &quot;stop&quot; or &quot;start&quot;).. ' italicizing names '..order:lower()..'\'s Order members',
        true)
        setUnderline(false)

        echo(&quot;)&quot;)
        echo(&quot;\n&quot;)
      end
    end

    if not shownsomething then
      setFgColor(unpack(svo.getDefaultColorNums))
      echo(&quot;  (no members of Orders are known)&quot;)
      resetFormat()
      echo(&quot;\n&quot;)
    end
  end

  -- watchfor &gt; divine &gt; city &gt; order &gt; house &gt; citizens
  showwatchfor()
  echo(&quot;\n&quot;)
  showdivines()
  echo(&quot;\n&quot;)
  showenemies()
  echo(&quot;\n&quot;)
  showordermembers()
  echo(&quot;\n&quot;)
  showcities()

  if not noprompt then svo.showprompt() end
end</script>
                    <eventHandlerList/>
                    <Script isActive="yes" isFolder="no">
                        <name>ndb.onshow</name>
                        <packageName></packageName>
                        <script>function ndb.onshow()
    local c = table.size(svo.me.highlightignore)

    svo.echofn(&quot;# of people on the highlightignore: %d &quot;, c)

    setFgColor(unpack(svo.getDefaultColorNums))
    setUnderline(true)
    echoLink(&quot;(view)&quot;, 'echo&quot;\\n&quot; expandAlias&quot;vshow highlightignore&quot;', 'Click here open the highlightignore list menu', true)
    echo&quot;\n&quot;
end</script>
                        <eventHandlerList>
                            <string>svo onshow</string>
                        </eventHandlerList>
                    </Script>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>ndb.loadsettings</name>
                    <packageName></packageName>
                    <script>function ndb.loadsettings()
  ndb.conf = ndb.conf or {}
  ndb.conf.citypolitics = ndb.conf.citypolitics or {}

  local conf_path = getMudletHomeDir() .. &quot;/svo/namedb/citypolitics&quot;

  if lfs.attributes(conf_path) then
    table.load(conf_path, ndb.conf.citypolitics)
  end

  -- setup defaults
  if next(ndb.conf.citypolitics) then return end

  -- include own city in table in case of org switch
  if svo.conf.org == &quot;Shallam&quot; then svo.config.set(&quot;org&quot;, &quot;Targossas&quot;) end

  if svo.conf.org == &quot;Targossas&quot; then
    ndb.conf.citypolitics = {
      Ashtan = &quot;enemy&quot;, Hashan = &quot;enemy&quot;, Eleusis = &quot;neutral&quot;, Cyrene = &quot;ally&quot;, Mhaldor = &quot;enemy&quot;, Targossas = &quot;ally&quot;
    }
  elseif svo.conf.org == &quot;Mhaldor&quot;  then
    ndb.conf.citypolitics = {
      Ashtan = &quot;enemy&quot;, Hashan = &quot;enemy&quot;, Eleusis = &quot;enemy&quot;, Cyrene = &quot;enemy&quot;, Targossas = &quot;enemy&quot;, Mhaldor = &quot;ally&quot;
    }
  elseif svo.conf.org == &quot;Ashtan&quot;  then
    ndb.conf.citypolitics = {
      Mhaldor = &quot;enemy&quot;, Hashan = &quot;neutral&quot;, Eleusis = &quot;enemy&quot;, Cyrene = &quot;enemy&quot;, Targossas = &quot;enemy&quot;, Ashtan = &quot;ally&quot;
    }
  elseif svo.conf.org == &quot;Hashan&quot;  then
    ndb.conf.citypolitics = {
      Mhaldor = &quot;enemy&quot;, Ashtan = &quot;neutral&quot;, Eleusis = &quot;neutral&quot;, Cyrene = &quot;neutral&quot;, Targossas = &quot;enemy&quot;, Hashan = &quot;ally&quot;
    }
  elseif svo.conf.org == &quot;Cyrene&quot;  then
    ndb.conf.citypolitics = {
      Mhaldor = &quot;neutral&quot;, Ashtan = &quot;neutral&quot;, Eleusis = &quot;neutral&quot;, Hashan = &quot;neutral&quot;, Targossas = &quot;ally&quot;, Cyrene = &quot;ally&quot;
    }
  elseif svo.conf.org == &quot;Eleusis&quot;  then
    ndb.conf.citypolitics = {
      Mhaldor = &quot;enemy&quot;, Ashtan = &quot;enemy&quot;, Cyrene = &quot;neutral&quot;, Hashan = &quot;neutral&quot;, Targossas = &quot;neutral&quot;, Eleusis = &quot;ally&quot;
    }
  else
    ndb.conf.citypolitics = {
      Mhaldor = &quot;neutral&quot;, Ashtan = &quot;neutral&quot;, Cyrene = &quot;neutral&quot;, Hashan = &quot;neutral&quot;, Targossas = &quot;neutral&quot;, Eleusis = &quot;neutral&quot;
    }
  end
end</script>
                    <eventHandlerList>
                        <string>svo system loaded</string>
                    </eventHandlerList>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>ndb.fixes</name>
                    <packageName></packageName>
                    <script>function ndb.fixed_set(field, value, query)
   local db_name = field.database
   local s_name = field.sheet

   local conn = db.__conn[db_name]

   local sql_update = [[UPDATE OR %s %s SET &quot;%s&quot; = %s]]
   if query then
       sql_update = sql_update .. [[ WHERE %s]]
   end

   local sql = sql_update:format(db.__schema[db_name][s_name].options._violations, s_name, field.name, db:_coerce(field, value), query)

   db:echo_sql(sql)
   assert(conn:execute(sql))
   if db.__autocommit[db_name] then
      conn:commit()
   end
end</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>ndb.close</name>
                    <packageName></packageName>
                    <script>function ndb.close()
  db:close()
  ioprint(&quot;ndb.close sysExitEvent&quot;)
end</script>
                    <eventHandlerList>
                        <string>sysExitEvent</string>
                    </eventHandlerList>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>ndb.showqwi</name>
                    <packageName></packageName>
                    <script>function ndb.showqwi()
  if not ndb.checkingqwi then return end
  ndb.checkingqwi = nil

  ndb.checkqw(nil, &quot;show infamous&quot;)
end</script>
                    <eventHandlerList>
                        <string>NameDB finished all honors</string>
                    </eventHandlerList>
                </Script>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>ndb.highlighter</name>
                <packageName></packageName>
                <script></script>
                <eventHandlerList/>
                <Script isActive="yes" isFolder="no">
                    <name>ndb.addhighlightname</name>
                    <packageName></packageName>
                    <script>function ndb.addhighlightname(_, name)
  if not name then return end -- no name is passed on a suicided person

  local person = ndb.getname(name)

  if not person then return end -- in case a person was deleted
  ndb.singlehighlight(name,
      person.city or &quot;&quot;, 
      person.order or &quot;&quot;, 
      person.cityenemy or 0,
      person.orderenemy or 0, 
      person.houseenemy or 0, 
      svo.me.watchfor[person.name],
      person.immortal or 0)
end</script>
                    <eventHandlerList>
                        <string>NameDB finished honors</string>
                        <string>svo watchfor name changed</string>
                        <string>NameDB highlightignore name changed</string>
                        <string>NameDB set name changed</string>
                        <string>NameDB saw list name</string>
                        <string>NameDB name deleted</string>
                    </eventHandlerList>
                </Script>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>ndb.aliases</name>
                <packageName></packageName>
                <script>function ndb.showwhois(whom)
  whom = whom:lower():title()
  local data = ndb.getname(whom)

  if not data then svo.echof(&quot;I'm afraid we don't know person named %s.&quot;, matches[2]:title()) svo.showprompt() return end

  cecho(&quot;\n&lt;a_darkblue&gt;--&lt;purple&gt;(svo) &lt;a_grey&gt;&quot;..data.name..&quot;'s (&quot;..data.gender:sub(1,1)..&quot;) NameDB profile&lt;a_darkblue&gt;&quot; .. (&quot;-&quot;):rep(55-#data.name) .. &quot;\n&quot;)

  local function getclass()
    return (data.class == '' and 'unknown' or data.class)
  end

  local function getxprank()
    return (data.xp_rank == -2 and 'unranked' or (data.xp_rank == -1 and 'unknown' or data.xp_rank))
  end

  local function getmight()
    return (data.might == -1 and 'unranked' or data.might)
  end

  local function getlevel()
    return ((data.level == -1 or data.level == 0 or data.level == nil) and 'unknown' or data.level)
  end

  local function getcombatrank()
    return (data.combat_rank &gt; 0
       and (&quot;%d (rank) %d (score)&quot;):format(data.combat_rank, data.combat_rating)
       or (data.combat_rank == 0 and 'unranked' or 'unknown'))
  end

  local function getdragon()
    return (data.dragon == 1 and 'yep' or 'nope')
  end

  local function getrace()
    return (data.race == '' and 'unknown' or data.race)
  end

  local function getbirthday()
    return ((data.birth_day ~= 0
       and (&quot;%d %s(%d) %d&quot;):format(data.birth_day, ndb.valid.months[data.birth_month], data.birth_month, data.birth_year)
       or '') .. (data.birth_hidden == 1 and ' (h)' or ''))

  end

  local function getimportance()
    return (data.importance == 0 and 'unset' or data.importance)
  end

  local function getinfamous()
    return (data.infamous == -1 and 'unknown' or (data.infamous == 0 and 'none' or ndb.valid.shortinfamous[data.infamous]))
  end

  if data.immortal == 0 then
    cecho(&quot;&lt;a_darkcyan&gt;  Orgs:\n&quot;)
    cecho(string.format(&quot;&lt;a_darkgrey&gt;    House:  %-24s City:        %s (cr%s)%s\n&quot;,
      (data.guild == '' and 'unknown' or data.guild),
      (data.city == '' and 'unknown' or data.city),
      (data.city_rank == 0 and '?' or data.city_rank),
      (data.city_soldier == 0 and '' or ' (S)')
    ))

    cecho(string.format(&quot;&lt;a_darkgrey&gt;    Order:  %-24s Mark:        %s\n&quot;,
      (data.order == '' and 'unknown' or data.order),
      (data.mark == '' and 'no' or data.mark)
    ))

    cecho(&quot;\n&lt;a_darkcyan&gt;  Personal:\n&quot;)
    cecho(string.format(&quot;&lt;a_darkgrey&gt;    Class:  %-24s Infamy:      %s\n&quot;,
      getclass(),
      getinfamous()
    ))
    cecho(string.format(&quot;&lt;a_darkgrey&gt;    Level:  %-24s XP rank:     %s\n&quot;,
      getlevel(),
      getxprank()
    ))
    cecho(string.format(&quot;&lt;a_darkgrey&gt;    Might:  %-24s Combat:      %s\n&quot;,
      getmight(),
      getcombatrank()
    ))
    cecho(string.format(&quot;&lt;a_darkgrey&gt;    Dragon: %-24s Race:        %s\n&quot;,
      getdragon(),
      getrace()
    ))
    cecho(string.format(&quot;&lt;a_darkgrey&gt;    Birth:  %-24s Importance:  %s\n&quot;,
      getbirthday(),
      getimportance()
    ))
    
    cecho(&quot;\n&lt;a_darkcyan&gt;  Status to you:\n&quot;)
    cecho(string.format(&quot;&lt;a_darkgrey&gt;    City enemy:  %-19s House enemy: %s\n&quot;,
      (data.cityenemy == 0 and 'nope' or 'yep'),
      (data.houseenemy == 0 and 'nope' or 'yep')
    ))

    cecho(string.format(&quot;&lt;a_darkgrey&gt;    Order enemy: %-19s \n&quot;,
      data.orderenemy == 0 and 'nope' or 'yep'
    ))

    local currenstatus
    if data.iff == -1 then
      if ndb.isenemy(data.name) then currenstatus = &quot;enemy (auto)&quot;
      else currenstatus = &quot;ally (auto)&quot; end
    end

    cecho(string.format(&quot;&lt;a_darkgrey&gt;    Actual status to you: %s\n&quot;, 
      (data.iff == -1 and currenstatus or (data.iff == 1 and &quot;enemy (manual)&quot; or &quot;ally (manual)&quot;))
    ))
  else
    cecho(&quot;\n&lt;a_darkcyan&gt;    They are an Immortal.\n&quot;)
  end

  cecho(&quot;\n&lt;a_darkcyan&gt;  Notes (&quot;)
  setUnderline(true)
  fg(&quot;a_darkcyan&quot;)
  echoLink(&quot;edit&quot;, 'printCmdLine&quot;ndb set '..whom:title()..' notes '..data.notes:gsub(&quot;\n&quot;, [[\\n]])..'&quot;', 'Click to edit the notes you have on '..whom:title()..' - you can use \\n for a linebreak, and &lt;color&gt; to color text', true)
  resetFormat()
  cecho(&quot;&lt;a_darkcyan&gt;):\n&quot;)
  cecho(string.format(&quot;    &lt;a_blue&gt;- &lt;a_grey&gt;&quot;..((data.notes and data.notes ~= &quot;&quot;) and data.notes:gsub(&quot;\n&quot;, &quot;\n    &lt;a_blue&gt;-&lt;reset&gt; &quot;) or &quot;none yet&quot;)..&quot;\n&quot;))
  deselect() fg(&quot;a_darkblue&quot;) echo(string.rep(&quot;-&quot;, 80)) resetFormat() echo'\n'
  svo.showprompt()
end

function ndb.exportmenu()
  svo.echof(&quot;Exporting works in 3 steps:\n&quot;)

  setFgColor(unpack(svo.getDefaultColorNums))
  echo(&quot;a) select what data about people you'd like to export:\n&quot;)
  for key, _ in pairs(ndb.schema.people) do
    echo(&quot;  &quot;)

    if key == &quot;name&quot; then
      echoLink(&quot;[X] name&quot;, [[svo.echof(&quot;The name has to stay, otherwise what'll be there to import?&quot;)]], &quot;If you'd just like to share the list of names known, you can tick everything else off and leave this on&quot;, true)
    else
      echoLink(&quot;[&quot;..(ndb.exportdata.fields[key] and 'X' or ' ')..'] '..key, 
        [[ndb.exportdata.fields.]]..key..[[ = ]]..tostring(not ndb.exportdata.fields[key])..[[;ndb.exportmenu()]],
        'Click to '..(not ndb.exportdata.fields[key] and 'add' or 'remove') .. ' '..key .. ' for export', true)
    end
    echo(&quot;\n&quot;)
  end

  echo(&quot;\n&quot;)
  echo(&quot;b) select which people you'd like to export:\n&quot;)
  for key, _ in pairs(ndb.exportdata.people) do
    setFgColor(unpack(svo.getDefaultColorNums))
    echo(&quot;  &quot;)

    echoLink(&quot;[&quot;..(ndb.exportdata.people[key] and 'X' or ' ')..'] '..key, 
      [[ndb.exportdata.people.]]..key..[[ = ]]..tostring(not ndb.exportdata.people[key])..[[;ndb.exportmenu()]],
      (ndb.exportdata.people[key] and 'Click to export '..key or 'Click not to export '..key), true)

    echo(&quot;\n&quot;)
  end

  echo(&quot;\n&quot;)
  echo(&quot;d) select a folder to export to: &quot;)
  setUnderline(true)
  echoLink((not ndb.exportdata.location and &quot;&lt;folder&gt;&quot; or ndb.exportdata.location), [[
    ndb.exportdata.location = invokeFileDialog(false, &quot;Where do you want to save the file? Select it and click Open&quot;)
    if ndb.exportdata.location == &quot;&quot; then ndb.exportdata.location = false end
    ndb.exportmenu()]],
    '', true)
  setUnderline(false)
  echo(&quot;\n&quot;)

  echo(&quot;\n&quot;)
  svo.echofn(&quot;All set? &quot;)

  setUnderline(true)
  setFgColor(unpack(svo.getDefaultColorNums))
  echoLink(&quot;Export!&quot;, (not ndb.exportdata.location and 'svo.echof(&quot;Pick a folder to export to, silly.&quot;)' or 'ndb.doexport()'), 'Click to export', true)
  setUnderline(false)
end

function ndb.importmenu()
  svo.echof(&quot;Import NameDB data:&quot;)

  setFgColor(unpack(svo.getDefaultColorNums))
  echo(&quot;\n&quot;)
  if not ndb.importdata.location then echo(&quot;a) select a file to import: &quot;) else echo(&quot;a) file to import: &quot;) end
  setUnderline(true)
  echoLink((not ndb.importdata.location and &quot;&lt;file&gt;&quot; or ndb.importdata.location), [[
    ndb.importdata.location = invokeFileDialog(true, &quot;Pick the file you'd like to import and select Open&quot;)
    if ndb.importdata.location == &quot;&quot; then ndb.importdata.location = false end
    if ndb.importdata.location then ndb.getimportfields() end
    ndb.importmenu()]],
    '', true)
  setUnderline(false)
  echo(&quot;\n&quot;)

  echo(&quot;\n&quot;)
  if not ndb.importdata.data then
    echo(&quot;b) select which fields to import once you've picked a file&quot;)
  else
    echo(&quot;b) select which fields to import:\n&quot;)
    for key, _ in pairs(ndb.importdata.fields) do
      echo(&quot;  &quot;)

      if key == &quot;name&quot; then
        echoLink(&quot;[X] name&quot;, [[svo.echof(&quot;The name has to stay, otherwise how will the import data make sense?&quot;)]], &quot;The persons name - this has to stay&quot;, true)
      else
        echoLink(&quot;[&quot;..(ndb.importdata.fields[key] and 'X' or ' ')..'] '..key, 
          [[ndb.importdata.fields.]]..key..[[ = ]]..tostring(not ndb.importdata.fields[key])..[[;ndb.importmenu()]],
          'Click to '..(not ndb.importdata.fields[key] and 'add' or 'remove') .. ' '..key .. ' for import', true)
      end
      echo(&quot;\n&quot;)
    end
  end
  echo(&quot;\n&quot;)

  echo(&quot;\n&quot;)
  svo.echofn(&quot;All set? &quot;)

  setUnderline(true)
  setFgColor(unpack(svo.getDefaultColorNums))
  echoLink(&quot;Import!&quot;, (not ndb.importdata.data and 'svo.echof(&quot;Pick a file to import first!&quot;)' or 'ndb.doimport()'), 'Click to import', true)
  setUnderline(false)
  echo(&quot;\n&quot;)
end

function ndb.checkqw(suffix, how)
  if ndb.qwtimer then killTimer(ndb.qwtimer) end

  enableTrigger(&quot;NameDB qw&quot;)
  ndb.qwtimer = tempTimer(3, function() disableTrigger(&quot;NameDB qw&quot;); ndb.qwtimer = nil end)
  ndb.qwtype = how

  send(&quot;qwc&quot;, false)
end</script>
                <eventHandlerList/>
            </Script>
            <ScriptGroup isActive="yes" isFolder="yes">
                <name>Data Input</name>
                <packageName></packageName>
                <script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
                <eventHandlerList/>
                <Script isActive="yes" isFolder="no">
                    <name>Names from Semla Feb 10th 2010</name>
                    <packageName></packageName>
                    <script>if true then return end

--

local temp_name_list = {}

for key,value in pairs(citizens:split(&quot;|&quot;)) do
	temp_name_list[key] = {name = value, xp_rank = -1}
end

db:merge_unique(ndb.db.people, temp_name_list)

raiseEvent(&quot;NameDB got new data&quot;)</script>
                    <eventHandlerList/>
                </Script>
            </ScriptGroup>
            <ScriptGroup isActive="yes" isFolder="yes">
                <name>Third-party</name>
                <packageName></packageName>
                <script></script>
                <eventHandlerList/>
                <Script isActive="yes" isFolder="no">
                    <name>Pluralization</name>
                    <packageName></packageName>
                    <script>--
-- MySQL Workbench Doctrine Export Plugin
-- Version: 0.3.6
-- Authors: Johannes Mueller, Karsten Wutzke
-- Copyright (c) 2008-2009
--
-- http://code.google.com/p/mysql-workbench-doctrine-plugin/
--
-- This file is free software: you can redistribute it and/or
-- modify it under the terms of the GNU Lesser General Public
-- License as published by the Free Software Foundation, either
-- version 3 of the License, or (at your option) any later version.
--
-- This library is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
-- Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public
-- License along with this library.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
--

function string.endswith(s, suffix)
    return s:sub(#s - #suffix + 1) == suffix
end

function isPlural(s)
    -- is plural if string ends with an &quot;s&quot; but not with &quot;ss&quot;
    return string.endswith(s, &quot;s&quot;) and not string.endswith(s, &quot;ss&quot;) and #s &gt; 1
end

function isSingular(s)
    -- is singular if not plural
    return not isPlural(s)
end

local t = {
    &quot;bison&quot;, &quot;magi&quot;, &quot;buffalo&quot;, &quot;deer&quot;, &quot;fish&quot;, &quot;sheep&quot;, &quot;salmon&quot;, &quot;trout&quot;, &quot;swine&quot;, &quot;plankton&quot;, &quot;squid&quot;
}
local irregularPlurals = {}
for _,v in ipairs(t) do irregularPlurals[v] = true end

function isIrregular(s)
    return irregularPlurals[s] and true or false
end

function string.singularize(s)

    -- is plural?
    if ( isPlural(s) ) then
        -- strip &quot;s&quot;
        s = string.sub(s, 1, #s - 1)

        -- we can't just strip the s without looking at the remaining English plural endings
        -- see http://en.wikipedia.org/wiki/English_plural

        -- if the table name ends with &quot;e&quot; (&quot;coache&quot;, &quot;hashe&quot;, &quot;addresse&quot;, &quot;buzze&quot;, &quot;heroe&quot;, ...)
        if (    string.endswith(s, &quot;che&quot;)
             or string.endswith(s, &quot;she&quot;)
             or string.endswith(s, &quot;sse&quot;)
             or string.endswith(s, &quot;zze&quot;)
             or string.endswith(s, &quot;oe&quot;) ) then

            -- strip an &quot;e&quot;, too
            s = string.sub(s, 1, #s - 1)

        -- if table name ends with &quot;ie&quot;
        elseif ( string.endswith(s, &quot;ie&quot;) ) then
            -- replace &quot;ie&quot; by a &quot;y&quot; (&quot;countrie&quot; -&gt; &quot;country&quot;, &quot;hobbie&quot; -&gt; &quot;hobby&quot;, ...)
            s = string.sub(s, 1, #s - 2) .. &quot;y&quot;

        elseif ( string.endswith(s, &quot;ve&quot;) ) then
            -- replace &quot;ve&quot; by an &quot;f&quot; (&quot;calve&quot; -&gt; &quot;calf&quot;, &quot;leave&quot; -&gt; &quot;leaf&quot;, ...)
            s = string.sub(s, 1, #s - 2) .. &quot;f&quot;

            -- does *not* work for certain words (&quot;knive&quot; -&gt; &quot;knif&quot;, &quot;stave&quot; -&gt; &quot;staf&quot;, ...): TODO (hard)
        else
            -- do nothing (&quot;game&quot;, &quot;referee&quot;, &quot;monkey&quot;, ...)

            -- note: table names like &quot;Caches&quot; can't be handled correctly because of the &quot;che&quot; rule above,
            -- that word however basically stems from French and might be considered a special case anyway
            -- also collective names like &quot;Personnel&quot;, &quot;Cast&quot; (caution: SQL keyword!) can't be singularized
        end
    end

    return s
end

function string.pluralize(s)

    -- is singular?
    if ( isSingular(s) and not isIrregular(s) ) then

        -- we can't just append the s without looking at the English singular endings
        -- see https://en.wikipedia.org/wiki/English_plural

        -- if the table name ends with &quot;ch&quot;, &quot;sh&quot;, &quot;ss&quot; or &quot;zz&quot; (&quot;coach&quot;, &quot;hash&quot;, &quot;address&quot;, &quot;buzz&quot;, &quot;hero&quot;, ...)
        if (    string.endswith(s, &quot;ch&quot;)
             or string.endswith(s, &quot;sh&quot;)
             or string.endswith(s, &quot;ss&quot;)
             or string.endswith(s, &quot;zz&quot;)
             or string.endswith(s, &quot;o&quot;) ) then

            -- append &quot;es&quot;
            s = s .. &quot;es&quot;

        -- if table name ends with &quot;y&quot;
        elseif ( string.endswith(s, &quot;y&quot;) ) then
            -- replace &quot;y&quot; with &quot;ies&quot; (&quot;country&quot; -&gt; &quot;countries&quot;, &quot;hobby&quot; -&gt; &quot;hobbies&quot;, ...)
            s = string.sub(s, 1, #s - 1) .. &quot;ies&quot;

        elseif ( string.endswith(s, &quot;f&quot;) ) then
            -- replace &quot;f&quot; by an &quot;ves&quot; (&quot;leaf&quot; -&gt; &quot;leaves&quot;, &quot;half&quot; -&gt; &quot;halves&quot;, ...)
            s = string.sub(s, 1, #s - 1) .. &quot;ves&quot;
        else
            -- append &quot;s&quot; (&quot;games&quot;, &quot;referees&quot;, &quot;monkeys&quot;, ...)
            s = s .. &quot;s&quot;
        end
    end

    return s
end</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>Ordinal</name>
                    <packageName></packageName>
                    <script>function string.ordinalSuffix (n)
  n = math.mod (n, 100)
  local d = math.mod (n, 10)
  if d == 1 and n ~= 11 then
    return &quot;st&quot;
  elseif d == 2 and n ~= 12 then
    return &quot;nd&quot;
  elseif d == 3 and n ~= 13 then
    return &quot;rd&quot;
  else
    return &quot;th&quot;
  end
end</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>Stats</name>
                    <packageName></packageName>
                    <script>-- Small stats library                      --
----------------------------------------------
-- Version History --
-- 1.0 First written.

-- Tables supplied as arguments are not changed.


-- Table to hold statistical functions
stats={}

-- Get the mean value of a table
function stats.mean( t )
  local sum = 0
  local count= 0

  for k,v in pairs(t) do
    if type(v) == 'number' then
      sum = sum + v
      count = count + 1
    end
  end

  return (sum / count)
end

-- Get the mode of a table.  Returns a table of values.
-- Works on anything (not just numbers).
function stats.mode( t )
  local counts={}

  for k, v in pairs( t ) do
    if counts[v] == nil then
      counts[v] = 1
    else
      counts[v] = counts[v] + 1
    end
  end

  local biggestCount = 0

  for k, v  in pairs( counts ) do
    if v &gt; biggestCount then
      biggestCount = v
    end
  end

  local temp={}

  for k,v in pairs( counts ) do
    if v == biggestCount then
      table.insert( temp, k )
    end
  end

  return temp
end

-- Get the median of a table.
function stats.median( t )
  local temp={}

  -- deep copy table so that when we sort it, the original is unchanged
  -- also weed out any non numbers
  for k,v in pairs(t) do
    if type(v) == 'number' then
      table.insert( temp, v )
    end
  end

  table.sort( temp )

  -- If we have an even number of table elements or odd.
  if math.fmod(#temp,2) == 0 then
    -- return mean value of middle two elements
    return ( temp[#temp/2] + temp[(#temp/2)+1] ) / 2
  else
    -- return middle element
    return temp[math.ceil(#temp/2)]
  end
end


-- Get the standard deviation of a table
function stats.standardDeviation( t )
  local m
  local vm
  local sum = 0
  local count = 0
  local result

  m = stats.mean( t )

  for k,v in pairs(t) do
    if type(v) == 'number' then
      vm = v - m
      sum = sum + (vm * vm)
      count = count + 1
    end
  end

  result = math.sqrt(sum / (count-1))

  return result
end

-- Get the max and min for a table
function stats.maxmin( t )
  local max = -math.huge
  local min = math.huge

  for k,v in pairs( t ) do
    if type(v) == 'number' then
      max = math.max( max, v )
      min = math.min( min, v )
    end
  end

  return max, min
end</script>
                    <eventHandlerList/>
                </Script>
                <Script isActive="yes" isFolder="no">
                    <name>Seconds to human</name>
                    <packageName></packageName>
                    <script>-- credit: http://www.gammon.com.au/forum/?id=12494&amp;reply=6#reply6
function seconds2human(input)
  local seconds = input
  local hours = math.floor(seconds/3600) -- only returns whole numbers
  seconds = seconds%3600 -- returns remainder of previous division
  local minutes = math.floor(seconds/60) -- only whole numbers again
  seconds = seconds%60 -- final remainder

  return hours, minutes, seconds
end</script>
                    <eventHandlerList/>
                </Script>
            </ScriptGroup>
            <Script isActive="yes" isFolder="no">
                <name>ndb main code</name>
                <packageName></packageName>
                <script>-- Svof (c) 2011-2018 by Vadim Peretokin

-- Svof is licensed under a
-- Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.

-- You should have received a copy of the license along with this
-- work. If not, see &lt;http://creativecommons.org/licenses/by-nc-sa/4.0/&gt;.

-- load after Svof has loaded to have svo.pl
tempTimer(0, function()

local me = svo.me
local firstload = not ndb.ismhaldorian

svo.pl.dir.makepath(getMudletHomeDir() .. &quot;/svo/namedb&quot;)

-- load the highlightignore list
function ndb.loadhighlightignore()
  local conf_path = getMudletHomeDir() .. &quot;/svo/config/highlightignore&quot;

  if lfs.attributes(conf_path) then
    local t = {}
    local ok, msg = pcall(table.load, conf_path, t)
    if ok then
	    me.highlightignore = me.highlightignore or {} -- make sure it's initialized
	    svo.update(me.highlightignore, t)
	else
		os.remove(conf_path)
		tempTimer(10, function()
		  svo.echof(&quot;Your NameDB highlights ignored file got corrupted for some reason - I've deleted it so the system can load other stuff OK. You'll need to re-do all the names to ignore highlighting, though. (%q)&quot;, msg)
		end)
	end
  end
end
if firstload then ndb.loadhighlightignore() end
svo.signals.saveconfig:connect(function () me.highlightignore = me.highlightignore or {}; svo.tablesave(getMudletHomeDir() .. &quot;/svo/config/highlightignore&quot;, me.highlightignore) end, 'save highlightignore list')


-- save the ndb.conf.citypolitics list

svo.signals.saveconfig:connect(function () ndb.conf.citypolitics = ndb.conf.citypolitics or {}; svo.tablesave(getMudletHomeDir() .. &quot;/svo/namedb/citypolitics&quot;, ndb.conf.citypolitics) end, 'save citypolitics list')

svo.signals.saveconfig:connect(function ()
	-- this can error out if the connection is closed
  pcall(function() db.__conn['namedb']:execute('VACUUM') end)
end, 'vacuum namedb database')

--ndb.API
function ndb.ismhaldorian(name)
  return #(db:fetch(ndb.db.people, {db:eq(ndb.db.people.city, 'Mhaldor'), db:eq(ndb.db.people.name, name)})) ~= 0
end

function ndb.iscyrenian(name)
  return #(db:fetch(ndb.db.people, {db:eq(ndb.db.people.city, 'Cyrene'), db:eq(ndb.db.people.name, name)})) ~= 0
end

function ndb.isshallamese(name)
  return #(db:fetch(ndb.db.people, {db:OR(db:eq(ndb.db.people.city, 'Shallam'), db:eq(ndb.db.people.city, 'Targossas')), db:eq(ndb.db.people.name, name)})) ~= 0
end

function ndb.istargossian(name)
  return #(db:fetch(ndb.db.people, {db:eq(ndb.db.people.city, 'Targossas'), db:eq(ndb.db.people.name, name)})) ~= 0
end

function ndb.iseleusian(name)
  return #(db:fetch(ndb.db.people, {db:eq(ndb.db.people.city, 'Eleusis'), db:eq(ndb.db.people.name, name)})) ~= 0
end

function ndb.isashtani(name)
  return #(db:fetch(ndb.db.people, {db:eq(ndb.db.people.city, 'Ashtan'), db:eq(ndb.db.people.name, name)})) ~= 0
end

function ndb.ishashani(name)
  return #(db:fetch(ndb.db.people, {db:eq(ndb.db.people.city, 'Hashan'), db:eq(ndb.db.people.name, name)})) ~= 0
end

function ndb.isclass(name, class)
  name, class = name:title(), class:lower()
  return #(db:fetch(ndb.db.people, {db:eq(ndb.db.people.class, class), db:eq(ndb.db.people.name, name)})) ~= 0
end

function ndb.getclass(name)
  name = name:title()
  local r = db:fetch(ndb.db.people, db:eq(ndb.db.people.name, name))
  if not next(r) then return nil, &quot;name not known&quot; end

  return r[1].class:lower()
end

function ndb.setclass(name, class)
  class = class:lower()
  svo.assert(ndb.isvalidclass(class), &quot;ndb.setclass: invalid class given&quot;)

  ndb.fixed_set(ndb.db.people.class, class, db:eq(ndb.db.people.name, name))
end

function ndb.getcity(name)
  name = name:title()
  local r = db:fetch(ndb.db.people, db:eq(ndb.db.people.name, name))
  if not next(r) then return nil, &quot;name not known&quot; end

  return r[1].city
end

function ndb.getnotes(name)
  name = name:title()
  local r = db:fetch(ndb.db.people, db:eq(ndb.db.people.name, name))
  if not next(r) then return nil, &quot;name not known&quot; end

  return r[1].notes
end

function ndb.getxprank(name)
  name = name:title()
  local r = db:fetch(ndb.db.people, db:eq(ndb.db.people.name, name))
  if not next(r) then return nil, &quot;name not known&quot; end

  return r[1].xp_rank
end

function ndb.ismark(name)
  name = name:title()
  local r = db:fetch(ndb.db.people, db:eq(ndb.db.people.name, name))
  if not next(r) then return nil, &quot;name not known&quot; end

  if r[1].mark == &quot;&quot; then return false
  else return r[1].mark end
end

function ndb.setmark(name, type)
  if type == false then type = &quot;&quot; end

  ndb.fixed_set(ndb.db.people.mark, type, db:eq(ndb.db.people.name, name))
end

function ndb.isinfamous(name)
  name = name:title()
  local r = db:fetch(ndb.db.people, db:eq(ndb.db.people.name, name))
  if not next(r) then return nil, &quot;name not known&quot; end

  if r[1].infamous == &quot;&quot; then return false
  else return r[1].infamous end
end

function ndb.setinfamous(name, infamy)
  ndb.fixed_set(ndb.db.people.infamous, infamy, db:eq(ndb.db.people.name, name))
end

function ndb.isdragon(name)
  svo.assert(name, &quot;ndb.isdragon() requires a name&quot;)

  name = name:title()
  local r = db:fetch(ndb.db.people, db:eq(ndb.db.people.name, name))
  if not next(r) then return nil, &quot;name not known&quot; end

  return (r[1].dragon == 1 and true or false)
end

function ndb.getcityrank(name)
  svo.assert(name, &quot;ndb.getcityrank() requires a name&quot;)

  name = name:title()
  local r = db:fetch(ndb.db.people, db:eq(ndb.db.people.name, name))
  if not next(r) then return nil, &quot;name not known&quot; end

  return ndb.valid.cityranks[r[1].city][r[1].city_rank]
end

function ndb.setdragon(name, status)
  status = svo.toboolean(status) and 1 or 0

  ndb.fixed_set(ndb.db.people.dragon, status, db:eq(ndb.db.people.name, name))
end

function ndb.isimmortal(name)
  name = name:title()
  local r = db:fetch(ndb.db.people, db:eq(ndb.db.people.name, name))
  if not next(r) then return nil, &quot;name not known&quot; end

  return (r[1].immortal == 1 and true or false)
end

function ndb.exists(name)
  return #(db:fetch(ndb.db.people, db:eq(ndb.db.people.name, name))) ~= 0
end

function ndb.isperson(name)
  return #(db:fetch(ndb.db.people, db:eq(ndb.db.people.name, name))) ~= 0
end

-- returns true only if a certain enemy
function ndb.isenemy(name)
  local p = ndb.getname(name)
  if not p then return false end

  local city = p.city

  -- -1 autodetected, 1 enemy, 2 ally
  if p.iff == 1 or
       (p.iff ~= 2 and
         ((city and city ~= &quot;&quot; and ndb.conf.citypolitics[city] == 'enemy') or
         (p.cityenemy == 1 or p.orderenemy == 1 or p.houseenemy == 1))) then
    return true else return false
  end
end

-- returns true only if someone is an enemy via iff or is a city enemy. They could be a house enemy, and not be considered an enemy by this
function ndb.iscityenemy(name)
  local p = ndb.getname(name)
  if not p then return false end

  local city = p.city

  -- -1 autodetected, 1 enemy, 2 ally
  if p.iff == 1 or
       (p.iff ~= 2 and
         ((city and city ~= &quot;&quot; and ndb.conf.citypolitics[city] == 'enemy') or
         (p.cityenemy == 1))) then
    return true else return false
  end
end

-- given a title, returns all info about a person
function ndb.getnamebytitle (title)
  return db:fetch(ndb.db.people, db:in_(ndb.db.people.name, string.split(title, &quot; &quot;)))
end

-- given a line, returns the first name it finds, if any
function ndb.findname(line)
  for w in string.gmatch(line, &quot;(%u%l+)&quot;) do
    if #w &gt;= 3 then
      if ndb.isperson(w) then return w end
    end
  end
end

-- given a line, returns all names found on it
function ndb.findnames(line)
  local l = {}
  for w in string.gmatch(line, &quot;(%u%l+)&quot;) do
    if #w &gt;= 3 then
      if ndb.isperson(w) then l[#l+1] = w end
    end
  end

  if l[1] then return l end
end

-- given a name, returns all info about a person
function ndb.getname (name)
  return db:fetch(ndb.db.people, db:eq(ndb.db.people.name, string.title(name)))[1]
end

local singular_city = {
  [&quot;&quot;] = 'Rogue',
  Mhaldor = 'Mhaldorian',
  Ashtan = 'Ashtani',
  Hashan = 'Hashani',
  Eleusis = 'Eleusian',
  Shallam = 'Shallamese',
  Targossas = 'Targossian',
  Cyrene = 'Cyrenian'
}

local plural_city = {
  [&quot;&quot;] = 'Rogues',
  Mhaldor = 'Mhaldorians',
  Ashtan = 'Ashtani',
  Hashan = 'Hashani',
  Eleusis = 'Eleusians',
  Shallam = 'Shallamese',
  Targossas = 'Targossians',
  Cyrene = 'Cyrenians'
}

local plural_class = {
  Apostate    = 'Apostates',
  Bard        = 'Bards',
  Blademaster = 'Blademasters',
  Dragon      = 'Dragons',
  Druid       = 'Druids',
  Infernal    = 'Infernals',
  Jester      = 'Jesters',
  Magi        = 'Magi',
  Monk        = 'Monks',
  Occultist   = 'Occultists',
  Paladin     = 'Paladins',
  Priest      = 'Priests',
  Runewarden  = 'Runewardens',
  Sentinel    = 'Sentinels',
  Serpent     = 'Serpents',
  Shaman      = 'Shamans',
  Sylvan      = 'Sylvans',
}

function ndb.getpluralclass(class, count)
  if count &lt;= 1 then
    return class
  else
    return plural_class[class]
  end
end

function ndb.getpluralcity(city, count)
  if count &lt;= 1 then
    return singular_city[city]
  else
    return plural_city[city]
  end
end

local function getcolor(name)
  local person = ndb.getname(name)

  if not person then return &quot;&quot; end -- in case the person doesn't exist

  local city, order, conf, color = person.city, person.order, svo.conf

  -- order of priority: watchfor &gt; divine &gt; city &gt; order &gt; house &gt; citizens.
  if (city == &quot;&quot; or city == 'rogue') then city = &quot;&quot; else city = city:lower() end -- known rogues are returned as &quot;&quot;

  -- color first
  if conf.highlightwatchfor and svo.me.watchfor[name] then
    color     = conf.watchforcolor or 'a_darkwhite'

  elseif conf.highlightdivine and person.immortal == 1 then
    color     = conf.divinecolor or 'a_darkwhite'

  elseif conf.highlightcity and person.cityenemy == 1 then
    color     = conf.citycolor or 'a_darkwhite'

  elseif conf.highlightorder and person.orderenemy == 1 then
    color     = conf.ordercolor or 'a_darkwhite'

  elseif conf.highlighthouse and person.houseenemy == 1 then
    color     = conf.housecolor or 'a_darkwhite'

  elseif order and conf['highlight'..order] then
    color     = conf[order..'color'] or 'a_darkwhite'

  elseif city == &quot;&quot; and conf.highlightrogues then
    color     = conf.roguescolor or 'a_darkwhite'

  elseif city ~= &quot;&quot; and conf['highlight'..city] then
    color     = conf[city..'color'] or 'a_darkwhite'
  end

  return color
end

function ndb.getcolor(name)
  svo.assert(type(name) == 'string', &quot;ndb.getcolor: name to get a color of is required&quot;)

  local color = getcolor(name)

  return ((color and color ~= &quot;&quot;) and '&lt;'..color..'&gt;' or &quot;&quot;)
end

function ndb.getcolorn(name)
  svo.assert(type(name) == 'string', &quot;ndb.getcolorn: name to get a color of is required&quot;)

  local color = getcolor(name)

  return ((color and color ~= &quot;&quot;) and ('&lt;'..color..'&gt;'..name..'&lt;reset&gt;') or name)
end

function ndb.getcolorp(name)
  svo.assert(type(name) == 'string', &quot;ndb.getcolorp: name to get a color of is required&quot;)

  local color = getcolor(name)

  return color
end

for _, format in ipairs{'bold', 'underline', 'italicize'} do
  ndb['should'..format] = function(name)
    svo.assert(type(name) == 'string', &quot;ndb.should&quot;..format..&quot;: name to get a color of is required&quot;)

    local person = ndb.getname(name)

    if not person then return false end -- in case the person doesn't exist

    local city, order, conf = person.city, person.order, svo.conf

    return (conf[format..'watchfor'] and svo.me.watchfor[name])    or
           (conf[format..'city'] and person.cityenemy == 1)        or
           (conf[format..'order'] and person.orderenemy == 1)      or
           (conf[format..'house'] and person.houseenemy == 1)      or
           (conf[format..'divine'] and person.immortal == 1)       or
           (order and conf[format..order])                         or
           ((city == &quot;&quot; or city == 'rogue') and conf[format..'rogues']) or
           (city and conf[format..city])                           or false
  end
end

function ndb.addname(name)
  local temp_name_list = {}

  if type(name) == 'table' then
    for i = 1, #name do
      temp_name_list[#temp_name_list+1] = {name = name[i]:title()}
    end
  else
    temp_name_list = {{name = name:title()}}
  end

  db:merge_unique(ndb.db.people, temp_name_list)

  raiseEvent(&quot;NameDB got new data&quot;)
end

function ndb.setiff(name, status)
  name = name:lower():title()

  local category = 'iff'
  local towhat

  -- -1 autodetected, 1 enemy, 2 ally
  status = status:lower()
  if status == 'enemy' then
    towhat = 1
  elseif status == 'ally' then
    towhat = 2
  else
    towhat = -1
  end

  local temp_name_list = {{
    name = name,
    [category] = towhat
  }}

  db:merge_unique(ndb.db.people, temp_name_list)
end

-- ndb.support

function ndb.tablemerge(t, other)
   for other_key, other_items in pairs(other) do
      if not t[other_key] then
         t[other_key] = other_items
      else
         local group = t[other_key]
         for item_key, item_value in pairs(other_items) do
            group[item_key] = item_value
         end
      end
   end
   return t
end

-- given a string and a table of possible answers, returns the first possible answer, if any
function ndb.findfromtable(input, valid)
  local sfind = string.find

  for i = 1, #valid do
    if sfind(input, valid[i], 1, true) then return valid[i] end
  end
end

function ndb.showinfamous()
  local infamous = {}
  for _, person in pairs(db:fetch(ndb.db.people, db:gte(ndb.db.people.infamous, 1))) do
    local infamy = ndb.isinfamous(person.name)

    if infamy and infamy &gt;= 1 then
      infamous[infamy] = infamous[infamy] or {}
      infamous[infamy][#infamous[infamy]+1] = person.name
    end
  end

  svo.echof(&quot;Infamous names known in NameDB:&quot;)
  if not next(infamous) then svo.echof(&quot;(none found)&quot;) end
  for cat, people in pairs(infamous) do
    table.sort(people)
    echo(string.format(&quot;  %s: %s\n&quot;, ndb.valid.shortinfamous[cat], svo.concatand(people)))
  end
  svo.showprompt()
end

function ndb.showhelp(entry)
  svo.echof(&quot;&lt;0,250,0&gt;&quot;..ndb.help[entry].term..&quot;&lt;47,79,79&gt;: &quot;..svo.getDefaultColor()..table.concat(ndb.help[entry].definition, &quot;\n&quot;))
  svo.showprompt() echo'\n'
end

function ndb.honors(name, type)
  if ndb.honorsid then svo.echof(&quot;ndb.honors() for %s called, when already honours'ing %s - not going to do this.&quot;, name:title(), ndb.honorsname:title()) return end
  name = string.title(name)

  enableTrigger('Honors')

  if ndb.honorsid then killTimer(ndb.honorsid) end
  ndb.honorsid = tempTimer(2+getNetworkLatency(), function()
    disableTrigger('Honors')
    svo.echof(&quot;Honors on %s didn't happen - re-checking...&quot;, name)
    ndb.honorsid, ndb.gaghonours = nil, nil
    ndb.honors(name, type)
  end)

  ndb.honorsname = name
  send(&quot;honorsb &quot; .. name, false) -- needs to full so it sees the clan listing

  if type == 'quiet' then ndb.gaghonours = true end
end

function ndb.cancelhonors(quietly)
  ndb.manualcheck = nil
  ndb.checkingqwi = nil

  if (ndb.honorslist and next(ndb.honorslist)) or ndb.honorsid then
    ndb.honorslist = {}
    if ndb.honorsid then killTimer(ndb.honorsid) disableTrigger('Honors') end; ndb.honorsid = nil
    if not quietly then svo.echof(&quot;Cancelled honors-checking people.&quot;) end
  else
    if not quietly then svo.echof(&quot;Not checking anyone atm already.&quot;) end
  end
  if not quietly then svo.showprompt() end

  ndb.hidehonorswindow()
end

function ndb.getrankincity(city, name)
  city, name = city:title(), name:title()

  if ndb.valid.cityranks[city] then return ndb.valid.cityranks[city][name] end
end

-- update all info that we should be able to glean from honors.
-- might: if it's at -1, then it's default known
-- rank: -1 default unknown, -2 unranked
function ndb.updatebyhonors()
  -- took might check off, as the website doesn't show it
  if not svo.conf.usehonors then return end -- Achaea disallowed use of website scraping, can only honors on a 2s eq

  local data = db:fetch(ndb.db.people, db:AND(db:not_eq(ndb.db.people.immortal, 1), db:eq(ndb.db.people.xp_rank, -1)))

  ndb.honorslist = (function ()
    local t = {}
    for _,j in ipairs(data) do
      -- sanity check for weird names
      if j.name:find(&quot;^%u%l+$&quot;) then t[j.name] = true
      else db:delete(ndb.db.people, db:eq(ndb.db.people.name, j.name)) end
    end return t end)()

    if svo.conf.paused or not next(ndb.honorslist) then return end

    if not svo.conf.autocheck and not ndb.manualcheck then
      if table.size(ndb.honorslist) &gt; 1 then
        echo'\n'
        if table.size(ndb.honorslist) &lt;= 10 then
          svo.echofn(&quot;Got new names (%s), use '&quot;, svo.oneconcat(ndb.honorslist))
          setFgColor(unpack(svo.getDefaultColorNums))
          setUnderline(true)
          echoLink(&quot;ndb honorsnew&quot;, 'ndb.manualcheck = true; ndb.updatebyhonors()', 'Click to do ndb honorsnew', true)
          setUnderline(false)
          echo(&quot;' to check them.\n&quot;)
        else
          svo.echofn(&quot;Got %d new names, use '&quot;, table.size(ndb.honorslist))
          setFgColor(unpack(svo.getDefaultColorNums))
          setUnderline(true)
          echoLink(&quot;ndb honorsnew&quot;, 'ndb.manualcheck = true; ndb.updatebyhonors()', 'Click to do ndb honorsnew', true)
          setUnderline(false)
          echo(&quot;' to check them.\n&quot;)
        end
      end

      return
    end

    -- don't show anymore - checking isn't so intrusive anymore
    -- if table.size(ndb.honorslist) &lt;= 10 then
    --   echo'\n' svo.echof(&quot;Have new names (%s) - going to check them.&quot;, svo.oneconcat(ndb.honorslist))
    -- else
    --   echo'\n' svo.echof(&quot;Have %s new names - going to check them.&quot;, table.size(ndb.honorslist))
    -- end

  if not ndb.honorsid then ndb.honors_next() end
end

function ndb.doexport()
  if not ndb.exportdata.location then return nil, &quot;no export location&quot; end

  local alldata = db:fetch(ndb.db.people)

  if not alldata or not next(alldata) then svo.echof(&quot;Your NameDB is empty! Check 'qw', 'citizens' to start filling it up. There's nothing to export otherwise...&quot;) return end

  for i = 1, #alldata do
    local p = alldata[i]

    -- see if we need to prune the result first
    if not ndb.exportdata.people.all then
      alldata[i] = nil

    else
      -- prune fields we don't need
      for key,value in pairs(ndb.exportdata.fields) do
        if key ~= 'name' and not value then p[key] = nil end
      end

      -- prune internal fields starting with underscores
      local removekeys = {}
      for key, _ in pairs(p) do
        if key:sub(1,1) == '_' then
          removekeys[#removekeys+1] = key
        end
      end

      for _ = 1, #removekeys do p[removekeys[i]] = nil end
    end
  end

  -- build the final table that we'll svo.tablesave()
  local exportable = {
    meta = { author = gmcp.Char.Status.name, date = os.date(&quot;%A %d, %b '%y&quot;), fields =  ndb.exportdata.fields },
    data = alldata
  }

  local location = string.format(&quot;%s/%s's namedb, %s&quot;, ndb.exportdata.location, gmcp.Char.Status.name,os.date(&quot;%A %d, %b '%y&quot;))
  svo.tablesave(location, exportable)
  echo'\n' svo.echof(&quot;Data exported okay, it's in %s.&quot;, location)
end

-- reads selected files for fields available within it to import
function ndb.getimportfields()

  if not ndb.importdata.location or not io.exists(ndb.importdata.location) then ndb.importdata.location = nil; return end

  ndb.importdata.data = {}
  table.load(ndb.importdata.location, ndb.importdata.data)
  if not ndb.importdata.data then svo.echof(&quot;Couldn't read the file - maybe it's corrupted? Try another.&quot;) return end

  for k,_ in pairs(ndb.importdata.data.meta.fields) do if ndb.schema.people[k] then ndb.importdata.fields[k] = true end end
end

function ndb.doimport()
  if not ndb.importdata.data then return nil, &quot;no data loaded in ndb.importdata.data&quot; end

  -- copy data over for importing with only the fields we need
  local temp_name_list = {}

  -- data.data as the original data is stored in .data of the new field that's imported.
  for i = 1, #ndb.importdata.data.data do
    local p = ndb.importdata.data.data[i]

    temp_name_list[#temp_name_list + 1] = {
      name = p.name,
    }

    for k,v in pairs(p) do
      if ndb.importdata.fields[k] then
        temp_name_list[#temp_name_list][k] = v
      end
    end
  end

  db:merge_unique(ndb.db.people, temp_name_list)
  svo.echof(&quot;Imported %d name%s okay.&quot;, #temp_name_list, (#temp_name_list == 1 and '' or 's'))

  local c = #(db:fetch(ndb.db.people, db:eq(ndb.db.people.city, 'Shallam')))
  if c ~= 0 then
    ndb.fixed_set(ndb.db.people.city, 'Targossas', db:eq(ndb.db.people.city, 'Shallam'))
    svo.echof(&quot;Migrated &quot;..c..&quot; Shallamese to be called Targossians now.&quot;)
  end

  raiseEvent(&quot;NameDB got new data&quot;)
  ndb.importdata.data = nil
end

function ndb.loadhighlights()
  ndb.highlightIDs = ndb.highlightIDs or {}
  collectgarbage('stop')

  ndb.cleartriggers()

  if svo.conf.ndbpaused then return end

  local highlight, watchfor = ndb.singlehighlight, svo.me.watchfor

  local dbnames = db:fetch(ndb.db.people)

  for i = 1, #dbnames do
    highlight(dbnames[i].name,
      dbnames[i].city or &quot;&quot;,
      dbnames[i].order or &quot;&quot;,
      dbnames[i].cityenemy or 0,
      dbnames[i].orderenemy or 0,
      dbnames[i].houseenemy or 0,
      watchfor[dbnames[i].name],
      dbnames[i].immortal or 0
    )
  end

  collectgarbage()
end

function ndb.singlehighlight(name, city, order, cityenemy, orderenemy, houseenemy, watchfor, immortal)
  if ndb.highlightIDs and ndb.highlightIDs[name] then
    killTrigger(ndb.highlightIDs[name])
  end

  if name == svo.me.name or svo.me.highlightignore[name] or svo.conf.ndbpaused then return end

  local color, bold, underline, italicize
  local conf = svo.conf

  -- order of priority: watchfor &gt; divine &gt; city &gt; order &gt; house &gt; citizens.

  city = city:lower()
  if order == &quot;&quot; then order = false else order = order:lower() end

  -- color first
  if conf.highlightwatchfor and watchfor then
    color     = conf.watchforcolor or 'a_darkwhite'

  elseif conf.highlightdivine and immortal == 1 then
    color     = conf.divinecolor or 'a_darkwhite'

  elseif conf.highlightcity and cityenemy == 1 then
    color     = conf.citycolor or 'a_darkwhite'

  elseif conf.highlightorder and orderenemy == 1 then
    color     = conf.ordercolor or 'a_darkwhite'

  elseif conf.highlighthouse and houseenemy == 1 then
    color     = conf.housecolor or 'a_darkwhite'

  elseif order and conf['highlight'..order] then
    color     = conf[order..'color'] or 'a_darkwhite'

  elseif (city == &quot;&quot; or city == 'rogue') and conf.highlightrogues then
    color     = conf.roguescolor or 'a_darkwhite'

  elseif city and conf['highlight'..city] then
    color     = conf[city..'color'] or 'a_darkwhite'
  end

  -- rest of things
  bold      = (conf.boldwatchfor and watchfor)            or
                (conf.boldcity and cityenemy == 1)        or
                (conf.boldorder and orderenemy == 1)      or
                (conf.boldhouse and houseenemy == 1)      or
                (conf.bolddivine and immortal == 1)       or
                (order and conf['bold'..order])           or
                ((city == &quot;&quot; or city == 'rogue') and conf.boldrogues) or
                (city and conf['bold'..city])

  underline = (conf.underlinewatchfor and watchfor)       or
                (conf.underlinecity and cityenemy == 1)   or
                (conf.underlineorder and orderenemy == 1) or
                (conf.underlinehouse and houseenemy == 1) or
                (conf.underlinedivine and immortal == 1)  or
                (order and conf['underline'..order])      or
                ((city == &quot;&quot; or city == 'rogue') and conf.underlinerogues) or
                (city and conf['underline'..city])

  italicize = (conf.italicizewatchfor and watchfor)       or
                (conf.italicizecity and cityenemy == 1)   or
                (conf.italicizeorder and orderenemy == 1) or
                (conf.italicizehouse and houseenemy == 1) or
                (conf.italicizedivine and immortal == 1)  or
                (order and conf['italicize'..order])      or
                ((city == &quot;&quot; or city == 'rogue') and conf.italicizerogues) or
                (city and conf['italicize'..city])

  if not (color or bold or underline or italicize) then return end

  ndb.highlightIDs = ndb.highlightIDs or {}
  ndb.highlightIDs[name] = tempTrigger(name, ([[ndb.highlight(&quot;%s&quot;, %s, %s, %s, %s)]]):format(name,
    (color     and '&quot;'..color..'&quot;' or 'false'),
    (bold      and 'true' or 'false'),
    (underline and 'true' or 'false'),
    (italicize and 'true' or 'false')
  ))
end

function ndb.cleartriggers()
  if not ndb.highlightIDs or not next(ndb.highlightIDs) then return end

  local killTrigger = killTrigger
  for _,v in pairs(ndb.highlightIDs) do
    killTrigger(v)
  end

  ndb.highlightIDs = {}
end

function ndb.highlight(who, color, bold, underline, italicize)
  -- c counts the appearance of the substring of the word in the line, k counts the character position
  local c, k = 1, 1
  while k &gt; 0 do
    k = line:find(who, k)
    if k == nil then return; end
    c = c + 1

    if k == line:find(&quot;%f[%a]&quot;..who..&quot;%f[%A]&quot;, k) then
      if selectString(who, c-1) &gt; -1 then
        if color     then fg(color) end
        if bold      then setBold(true) end
        if underline then setUnderline(true) end
        if italicize then setItalics(true) end
        resetFormat()
      else return end
    end

--    k = k + #who
    k = k + 1 -- this is a quicker optimization
  end
end

function ndb.finished_honors(event, name, type)
  if svo.conf.paused or not ndb.honorslist then return end
  local type = ndb.gaghonours and 'quiet' or 'manual'

  local name = next(ndb.honorslist or {})
  if not name then
    if type ~= 'manual' then
      echo'\n'
      svo.echof(&quot;Done checking all new names.&quot;)
      svo.showprompt()
      raiseEvent(&quot;NameDB finished all honors&quot;)
    end

    ndb.manualcheck = nil
    ndb.hidehonorswindow()
    return
  end
end

function ndb.honors_next(argument)
  if not svo.conf.autocheck and not ndb.manualcheck then return end
  if svo.conf.usehonors and not svo.bals.equilibrium then return end
  if not svo.conf.usehonors and argument then return end -- argument is passed if this comes from a balance,
                                                         -- which is for usehonors only - with it off, autohonors will start many honors processes

  local name = next(ndb.honorslist or {})
  if not name then return end

  if svo.conf.usehonors then
    ndb.honors(name, 'quiet')
  else
    --ndb.getinfo(name) -- Achaea disallowed use of website scraping
    return
  end

  ndb.honorslist[name] = nil
  local left = table.size(ndb.honorslist)

  local timeleft = {}
  if svo.conf.usehonors then
    -- honors takes 2s eq
    local leftseconds = left * 2

    local h,m,s = seconds2human(leftseconds)
    if h &gt; 0 then
      timeleft[#timeleft+1] = h..'h'
    end
    if h &gt; 0 and m &gt; 0 then
      timeleft[#timeleft+1] = &quot;, &quot;
    end
    if m &gt; 0 then
      timeleft[#timeleft+1] = m..'m'
    end
    if m &gt; 0 and s &gt; 0 then
      timeleft[#timeleft+1] = &quot;, &quot;
    end
    if s &gt; 0 then
      timeleft[#timeleft+1] = s..'s'
    end
  end

  ndb.showhonorswindow(string.format(&quot;Checking %s, %s name%s%s left to check...\n&quot;, name, left, (left == 1 and '' or 's'), (next(timeleft) and '('..table.concat(timeleft)..')' or '')))
end
svo.signals[&quot;svo got balance&quot;]:connect(ndb.honors_next, 'run honors_next on balance')
local luanotify = {}
luanotify.signal = require(&quot;notify.signal&quot;)
svo.signals[&quot;namedb finished honors&quot;] = luanotify.signal.new()
svo.signals[&quot;namedb finished honors&quot;]:connect(ndb.honors_next, 'run honors_next once finished with one')

-- sk.togglehonors = function()
--   if svo.conf.usehonors then
--     svo.signals[&quot;namedb finished honors&quot;]:block(ndb.honors_next)

-- end
-- svo.signals[&quot;svo config changed&quot;]:connect(sk.togglehonors)


if firstload then ndb.configs() end
ndb.loadhighlights()

end)</script>
                <eventHandlerList/>
            </Script>
        </ScriptGroup>
    </ScriptPackage>
    <KeyPackage/>
    <HelpPackage>
        <helpURL></helpURL>
    </HelpPackage>
</MudletPackage>
