<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.0">
    <TriggerPackage/>
    <TimerPackage/>
    <AliasPackage>
        <AliasGroup isActive="yes" isFolder="yes">
            <name>svo Enchanter</name>
            <script>-------------------------------------------------
--           Originally made by Jenny          --
--        Updated/Corrected by Jukilian        --
-------------------------------------------------
</script>
            <command></command>
            <packageName></packageName>
            <regex></regex>
            <Alias isActive="yes" isFolder="no">
                <name>enchant</name>
                <script>svo.parse_enchant_arguments(matches[2])</script>
                <command></command>
                <packageName></packageName>
                <regex>^enchant (.+)$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>repeat the last order</name>
                <script>svo.reenchant()</script>
                <command></command>
                <packageName></packageName>
                <regex>^reenchant$</regex>
            </Alias>
        </AliasGroup>
    </AliasPackage>
    <ActionPackage/>
    <ScriptPackage>
        <ScriptGroup isActive="yes" isFolder="yes">
            <name>svo Enchanter</name>
            <packageName></packageName>
            <script>-------------------------------------------------
--           Originally made by Jenny          --
--        Updated/Corrected by Jukilian        --
--            Rewritten by Keneanung           --
-------------------------------------------------
</script>
            <eventHandlerList/>
            <Script isActive="yes" isFolder="no">
                <name>script</name>
                <packageName></packageName>
                <script>local ourobori_data = {
  [18864] = { &quot;ouroboros60684&quot;,  &quot;ouroboros203598&quot; },
  [21191] = { &quot;ouroboros34462&quot;,  &quot;ouroboros49014&quot;  },
  [21192] = { &quot;ouroboros191596&quot;, &quot;ouroboros191631&quot; },
  [47270] = { &quot;ouroboros36673&quot;,  &quot;ouroboros36838&quot;  },
  [47271] = { &quot;ouroboros23502&quot;,  &quot;ouroboros57255&quot;  },
  [47272] = { &quot;ouroboros1263&quot;,   &quot;ouroboros30460&quot;  },
  [47301] = { &quot;ouroboros205397&quot;, &quot;ouroros219350&quot;   },
  [11016] = { &quot;ouroboros71982&quot;,  &quot;ouroboros94567&quot;  },
  [11014] = { &quot;ouroboros54000&quot;,  &quot;ouroboros27606&quot;  },
  [11018] = { &quot;ouroboros48748&quot;,  &quot;ouroboros69603&quot;  },
  [11017] = { &quot;ouroboros105971&quot;, &quot;ouroboros106382&quot; },
  [12518] = { &quot;ouroboros77138&quot;, &quot;ouroboros159812&quot;  },
  [42336] = { &quot;ouroboros133228&quot;, &quot;ouroboros204600&quot; }
}

-- Keep track if we are already ennchating
local enchanting = false
-- Queue of items we want to create. The item we are currently making is not in here.
local enchantmentQueue = {}
-- Queue of actions we need to do for the current enchantment
local enchantmentActions = {}
-- Flag for checking the IDs of the ourobori in the current room
local checking_ourobori = false
-- Keeps track if we need to put up selfishness again after enchanting
local hadSelfishness = false
-- Keeps track if we need to put up riding again after enchanting
local hadRiding = false
-- The string command of the last order in case we want to repeat it
local lastOrder = &quot;&quot;

-- The ouroboros we work with
local ouroboros1, ouroboros2

-- Hard coded list of known enchantments. Structure of each item:
--[[
  fullname:    Name that is used in the begin command
  type:        Type of Enchantment. Possible values: &quot;creation&quot; and &quot;enchantment&quot;
  nameToGet:   (creation only) name that will be used when getting the item from the ouroboros
  ingredients: Name - value table. Name is the ingredient that goes into the ouroboros, value is the number for one item
  otherItems:  Other items needed, that go not into the ouroboros. Currently the number of kola nuts and if a coin is needed
  actions:     Ordered list of actions to create the item
--]]
local enchantments = {

  purity = {
    fullname    = &quot;necklace of purity&quot;,
    type        = &quot;creation&quot;,
    nameToGet   = &quot;necklace&quot;,
    ingredients = {
      ice      = 4,
      goldbar  = 1,
      dust     = 1,
    },
    otherItems = {},
    actions     = {
      &quot;bang drum&quot;,
      &quot;ring bell&quot;,
      &quot;burn the polygon&quot;,
      &quot;burn the polygon&quot;,
      &quot;burn the polygon&quot;,
      &quot;wave arms&quot;,
      &quot;play horn&quot;,
      &quot;play horn&quot;,
      &quot;play horn&quot;,
      &quot;play horn&quot;,
      &quot;burn incense&quot;,
      &quot;light candle&quot;,
      &quot;square the circle&quot;,
      &quot;square the circle&quot;,
      &quot;square the circle&quot;
    }
  },

  pestilence = {
    fullname     = &quot;ring of pestilence&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;ring&quot;,
    ingredients  = {
      goldbar   = 1,
      silverbar = 2,
      staghorn  = 1,
    },
    otherItems = {
      gold = true
    },
    actions      = {
      &quot;strum lute&quot;,
      &quot;flipcoin&quot;,
      &quot;bang drum&quot;,
      &quot;wave arms&quot;,
      &quot;square the circle&quot;,
      &quot;wave feather&quot;,
      &quot;burn incense&quot;,
      &quot;point sword&quot;,
      &quot;burn the polygon&quot;,
      &quot;burn the polygon&quot;,
      &quot;burn the polygon&quot;,
      &quot;play horn&quot;,
      &quot;play horn&quot;,
      &quot;play horn&quot;,
      &quot;ring bell&quot;,
      &quot;ring bell&quot;,
      &quot;ring bell&quot;,
      &quot;bang drum&quot;,
      &quot;square the circle&quot;,
      &quot;strum lute&quot;
    }
  },

  negation = {
    fullname     = &quot;gem of negation&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;ring&quot;,
    ingredients  = {
      goldbar   = 1,
    },
    otherItems = {
      kola = 1
    },
    actions      = {
      &quot;ring bell&quot;,
      &quot;ring bell&quot;,
      &quot;ring bell&quot;,
      &quot;light candle&quot;,
      &quot;crush kola&quot;,
      &quot;burn the polygon&quot;,
      &quot;point sword&quot;,
      &quot;chant zool ekilthia requi oben&quot;
    }
  },

  dreamcatcher = {
    fullname     = &quot;dreamcatcher&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;dreamcatcher&quot;,
    ingredients  = {
      goldbar   = 2,
      silverbar = 2,
      staghorn  = 1,
    },
    otherItems = {},
    actions      = {
      &quot;wave arms&quot;,
      &quot;burn incense&quot;,
      &quot;square the circle&quot;,
      &quot;light candle&quot;,
      &quot;strum lute&quot;,
      &quot;strum lute&quot;,
      &quot;strum lute&quot;,
      &quot;ring bell&quot;,
      &quot;ring bell&quot;,
      &quot;ring bell&quot;,
      &quot;point sword&quot;,
      &quot;point sword&quot;,
      &quot;strum lute&quot;,
      &quot;strum lute&quot;,
      &quot;strum lute&quot;
    }
  },

  bauble = {
    fullname     = &quot;bauble&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;bauble&quot;,
    ingredients  = {
      dust      = 1,
    },
    otherItems = {
      kola = 1
    },
    actions      = {
      &quot;crush kola&quot;,
      &quot;burn the polygon&quot;,
      &quot;clap hands&quot;,
      &quot;square the circle&quot;,
      &quot;chant disei stalla rapwah cosoth tu&quot;
    }
  },

  fresist = {
    fullname     = &quot;fire resistance&quot;,
    type         = &quot;enchantment&quot;,
    ingredients  = {
      ice       = 1,
      silverbar = 2,
    },
    otherItems = {},
    actions      = {
      &quot;ring bell&quot;,
      &quot;ring bell&quot;,
      &quot;light candle&quot;,
      &quot;light candle&quot;,
      &quot;play horn&quot;,
      &quot;play horn&quot;,
      &quot;light candle&quot;,
      &quot;light candle&quot;,
      &quot;bang drum&quot;,
      &quot;bang drum&quot;,
      &quot;clap hands&quot;,
      &quot;clap hands&quot;,
      &quot;strum lute&quot;,
      &quot;strum lute&quot;,
      &quot;clap hands&quot;,
      &quot;clap hands&quot;,
      &quot;bang drum&quot;,
      &quot;bang drum&quot;,
      &quot;light candle&quot;,
      &quot;light candle&quot;
    }
  },

  concealment = {
    fullname     = &quot;orb of concealment&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;concealment&quot;,
    ingredients  = {
      goldbar   = 1,
      silverbar = 5,
    },
    otherItems = {
      gold = true
    },
    actions      = {
      &quot;wave feather&quot;,
      &quot;wave arms&quot;,
      &quot;flipcoin&quot;,
      &quot;play horn&quot;,
      &quot;point sword&quot;,
      &quot;clap hands&quot;,
      &quot;spin around thrice&quot;,
      &quot;chant aisyalam&quot;,
      &quot;spin around thrice&quot;,
      &quot;clap hands&quot;,
      &quot;point sword&quot;,
      &quot;play horn&quot;,
      &quot;flipcoin&quot;,
      &quot;wave arms&quot;,
      &quot;wave feather&quot;
    }
  },

  icewall = {
    fullname     = &quot;icewall&quot;,
    type         = &quot;enchantment&quot;,
    ingredients  = {
      ice       = 1,
      dust      = 1,
    },
    otherItems = {},
    actions      = {
      &quot;chant incula cela ecta&quot;,
      &quot;play horn&quot;,
      &quot;play horn&quot;,
      &quot;play horn&quot;,
      &quot;bang drum&quot;,
      &quot;bang drum&quot;,
      &quot;square the circle&quot;,
      &quot;point sword&quot;,
      &quot;spin around thrice&quot;,
      &quot;burn the polygon&quot;
    }
  },

  comprehension = {
    fullname     = &quot;necklace of comprehension&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;necklace&quot;,
    ingredients  = {
      ice       = 2,
      silverbar = 4,
      staghorn  = 3,
      goldbar   = 3,
    },
    otherItems = {
      kola = 1,
    },
    actions      = {
      &quot;play horn&quot;,
      &quot;play horn&quot;,
      &quot;play horn&quot;,
      &quot;burn incense&quot;,
      &quot;wave feather&quot;,
      &quot;ring bell&quot;,
      &quot;roll dice&quot;,
      &quot;roll dice&quot;,
      &quot;spin around thrice&quot;,
      &quot;burn incense&quot;,
      &quot;crush kola&quot;
    }
  },

  whirlwind = {
    fullname     = &quot;whirlwind of vastar&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;whirlwind&quot;,
    ingredients  = {
      silverbar = 1,
      staghorn  = 1,
      dust      = 1,
    },
    otherItems = {},
    actions      = {
      &quot;spin around thrice&quot;,
      &quot;spin around thrice&quot;,
      &quot;spin around thrice&quot;,
      &quot;spin around thrice&quot;,
      &quot;wave feather&quot;,
      &quot;burn incense&quot;,
      &quot;spin around thrice&quot;,
      &quot;spin around thrice&quot;,
      &quot;spin around thrice&quot;,
      &quot;spin around thrice&quot;
    }
  },

  magic = {
    fullname     = &quot;magical resistance&quot;,
    type         = &quot;enchantment&quot;,
    ingredients  = {
      silverbar = 2,
      staghorn  = 5,
      goldbar   = 1,
    },
    otherItems = {
      gold = true
    },
    actions      = {
      &quot;burn the polygon&quot;,
      &quot;burn the polygon&quot;,
      &quot;strum lute&quot;,
      &quot;strum lute&quot;,
      &quot;wave feather&quot;,
      &quot;wave feather&quot;,
      &quot;strum lute&quot;,
      &quot;strum lute&quot;,
      &quot;burn incense&quot;,
      &quot;burn incense&quot;,
      &quot;flipcoin&quot;,
      &quot;flipcoin&quot;,
      &quot;square the circle&quot;,
      &quot;square the circle&quot;,
      &quot;flipcoin&quot;,
      &quot;flipcoin&quot;,
      &quot;burn incense&quot;,
      &quot;burn incense&quot;,
      &quot;strum lute&quot;,
      &quot;strum lute&quot;
    }
  },

  brooch = {
    fullname     = &quot;brooch of thoth&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;brooch&quot;,
    ingredients  = {
      silverbar = 2,
      staghorn  = 1,
      dust      = 2,
      ice       = 1,
    },
    otherItems = {},
    actions      = {
      &quot;chant mortis troy tenkla&quot;,
      &quot;chant mortis troy tenklu&quot;,
      &quot;chant mortis troy tenkli&quot;,
      &quot;clap hands&quot;,
      &quot;clap hands&quot;,
      &quot;clap hands&quot;
    }
  },

  firewall = {
    fullname     = &quot;firewall&quot;,
    type         = &quot;enchantment&quot;,
    ingredients  = {
      silverbar = 3,
      staghorn  = 3,
      dust      = 1,
    },
    otherItems = {},
    actions      = {
      &quot;chant firth ilith rhedo een&quot;,
      &quot;burn the polygon&quot;,
      &quot;spin around thrice&quot;,
      &quot;point sword&quot;,
      &quot;square the circle&quot;,
      &quot;bang drum&quot;,
      &quot;bang drum&quot;,
      &quot;play horn&quot;,
      &quot;play horn&quot;,
      &quot;play horn&quot;
    }
  },

  electric = {
    fullname     = &quot;electrical resistance&quot;,
    type         = &quot;enchantment&quot;,
    ingredients  = {
      goldbar   = 5,
    },
    otherItems = {
      gold = true,
      kola = 2
    },
    actions      = {
      &quot;light candle&quot;,
      &quot;light candle&quot;,
      &quot;burn incense&quot;,
      &quot;burn incense&quot;,
      &quot;flipcoin&quot;,
      &quot;flipcoin&quot;,
      &quot;burn incense&quot;,
      &quot;burn incense&quot;,
      &quot;burn the polygon&quot;,
      &quot;burn the polygon&quot;,
      &quot;play horn&quot;,
      &quot;play horn&quot;,
      &quot;crush kola&quot;,
      &quot;crush kola&quot;,
      &quot;play horn&quot;,
      &quot;play horn&quot;,
      &quot;burn the polygon&quot;,
      &quot;burn the polygon&quot;,
      &quot;burn the polygon&quot;,
      &quot;burn the polygon&quot;
    }
  },

  cold = {
    fullname     = &quot;cold resistance&quot;,
    type         = &quot;enchantment&quot;,
    ingredients  = {
      goldbar   = 2,
      horn      = 2,
      dust      = 2,
    },
    otherItems = {
      gold = true
    },
    actions      = {
      &quot;bang drum&quot;,
      &quot;bang drum&quot;,
      &quot;burn the polygon&quot;,
      &quot;burn the polygon&quot;,
      &quot;flipcoin&quot;,
      &quot;flipcoin&quot;,
      &quot;burn the polygon&quot;,
      &quot;burn the polygon&quot;,
      &quot;light candle&quot;,
      &quot;light candle&quot;,
      &quot;point sword&quot;,
      &quot;point sword&quot;,
      &quot;roll dice&quot;,
      &quot;roll dice&quot;,
      &quot;point sword&quot;,
      &quot;point sword&quot;,
      &quot;light candle&quot;,
      &quot;light candle&quot;,
      &quot;burn the polygon&quot;,
      &quot;burn the polygon&quot;
    }
  },

  orb = {
    fullname     = &quot;orb sigil&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;orbsigil&quot;,
    ingredients  = {
      dust      = 1,
    },
    otherItems = {},
    actions      = {
      &quot;chant solip preena het epi re enla&quot;,
      &quot;chant solip preena het epi re enla&quot;,
      &quot;chant solip preena het epi re enla&quot;,
      &quot;ring bell&quot;
    }
  },

  cube = {
    fullname     = &quot;cube sigil&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;cube&quot;,
    ingredients  = {
      silverbar = 2,
    },
    otherItems = {},
    actions      = {
      &quot;chant dara acti me prishna eni not&quot;,
      &quot;chant dara acti me prishna eni not&quot;,
      &quot;chant dara acti me prishna eni not&quot;,
      &quot;ring bell&quot;
    }
  },

  mushroom = {
    fullname     = &quot;mushroom sigil&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;mushroom&quot;,
    ingredients  = {
      ice       = 1,
    },
    otherItems = {},
    actions      = {
      &quot;chant mil usra shal hract reed oom oon mez&quot;,
      &quot;chant mil usra shal hract reed oom oon mez&quot;,
      &quot;chant mil usra shal hract reed oom oon mez&quot;,
      &quot;ring bell&quot;
    }
  },

  monolith = {
    fullname     = &quot;monolith sigil&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;monolith&quot;,
    ingredients  = {
      silverbar = 1,
      goldbar   = 1
    },
    otherItems = {},
    actions      = {
      &quot;chant me ol nok oloth lilo ib te het&quot;,
      &quot;chant me ol nok oloth lilo ib te het&quot;,
      &quot;chant me ol nok oloth lilo ib te het&quot;,
      &quot;ring bell&quot;
    }
  },

  knife = {
    fullname     = &quot;knife sigil&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;knife&quot;,
    ingredients  = {
      silverbar = 1,
    },
    otherItems = {},
    actions      = {
      &quot;chant keef nitash idca feef enla&quot;,
      &quot;chant keef nitash idca feef enla&quot;,
      &quot;chant keef nitash idca feef enla&quot;,
      &quot;ring bell&quot;
    }
  },

  key = {
    fullname     = &quot;key sigil&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;key&quot;,
    ingredients  = {
      goldbar   = 1
    },
    otherItems = {},
    actions      = {
      &quot;chant krolop escit yall&quot;,
      &quot;chant krolop escit yall&quot;,
      &quot;chant krolop escit yall&quot;,
      &quot;ring bell&quot;
    }
  },

  flame = {
    fullname     = &quot;flame sigil&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;flame&quot;,
    ingredients  = {
      silverbar = 1,
    },
    otherItems = {},
    actions      = {
      &quot;chant flet lhar abe minlo eec&quot;,
      &quot;chant flet lhar abe minlo eec&quot;,
      &quot;chant flet lhar abe minlo eec&quot;,
      &quot;ring bell&quot;
    }
  },

  fist = {
    fullname     = &quot;fist sigil&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;fist&quot;,
    ingredients  = {
      silverbar = 1,
      staghorn  = 2,
    },
    otherItems = {},
    actions      = {
      &quot;chant fartak ishla spooz tran&quot;,
      &quot;chant fartak ishla spooz tran&quot;,
      &quot;chant fartak ishla spooz tran&quot;,
      &quot;ring bell&quot;
    }
  },

  hearing = {
    fullname     = &quot;hearing&quot;,
    type         = &quot;enchantment&quot;,
    ingredients  = {
      silverbar = 3,
      horn      = 4,
    },
    otherItems = {
      kola = 1
    },
    actions      = {
      &quot;bang drum&quot;,
      &quot;clap hands&quot;,
      &quot;play horn&quot;,
      &quot;strum lute&quot;,
      &quot;clap hands&quot;,
      &quot;play horn&quot;,
      &quot;bang drum&quot;,
      &quot;strum lute&quot;,
      &quot;strum lute&quot;,
      &quot;play horn&quot;,
      &quot;clap hands&quot;,
      &quot;bang drum&quot;,
      &quot;bang drum&quot;,
      &quot;crush kola&quot;,
      &quot;ring bell&quot;
    }
  },

  eye = {
    fullname     = &quot;eye sigil&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;eye&quot;,
    ingredients  = {
      obsidian  = 1,
    },
    otherItems = {},
    actions      = {
      &quot;square the circle&quot;,
      &quot;ring bell&quot;,
    }
  },

  worrystone = {
    fullname     = &quot;worrystone&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;worrystone&quot;,
    ingredients  = {
      ice       = 1,
      goldbar   = 1,
      silverbar = 1,
      horn      = 1,
      dust      = 1,
    },
    otherItems = {
      gold = true
    },
    actions      = {
      &quot;roll dice&quot;,
      &quot;roll dice&quot;,
      &quot;roll dice&quot;,
      &quot;roll dice&quot;,
      &quot;roll dice&quot;,
      &quot;flipcoin&quot;,
      &quot;flipcoin&quot;,
      &quot;flipcoin&quot;,
      &quot;flipcoin&quot;,
      &quot;flipcoin&quot;,
      &quot;spin around thrice&quot;,
      &quot;wave feather&quot;,
      &quot;square the circle&quot;
    }
  },

  meteor = {
    fullname     = &quot;meteor&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;meteor&quot;,
    ingredients  = {
      dust      = 1,
      arrow     = 1,
    },
    otherItems = {},
    actions      = {
      &quot;wave arms&quot;,
      &quot;wave feather&quot;,
      &quot;chant minlo ecta tu ecta oloth rhedo&quot;,
      &quot;bang drum&quot;
    }
  },

  waterwalking = {
    fullname     = &quot;walk on water&quot;,
    type         = &quot;enchantment&quot;,
    ingredients  = {
      silverbar = 1,
      goldbar   = 2,
      ice       = 1,
    },
    otherItems = {
      kola = 1
    },
    actions      = {
      &quot;square the circle&quot;,
      &quot;wave arms&quot;,
      &quot;wave arms&quot;,
      &quot;wave arms&quot;,
      &quot;point sword&quot;,
      &quot;point sword&quot;,
      &quot;strum lute&quot;,
      &quot;bang drum&quot;,
      &quot;bang drum&quot;,
      &quot;bang drum&quot;,
      &quot;bang drum&quot;,
      &quot;roll dice&quot;,
      &quot;crush kola&quot;
    }
  },

  scabbard = {
    fullname     = &quot;stasis&quot;,
    type         = &quot;enchantment&quot;,
    ingredients  = {
      silverbar = 2,
      goldbar   = 3,
      ice       = 3,
      dust      = 3,
      horn      = 3,
    },
    otherItems = {
      kola = 1
    },
    actions      = {
      &quot;wave feather&quot;,
      &quot;wave feather&quot;,
      &quot;roll dice&quot;,
      &quot;roll dice&quot;,
      &quot;roll dice&quot;,
      &quot;wave arms&quot;,
      &quot;wave arms&quot;,
      &quot;crush kola&quot;,
      &quot;chant drabbacs statorium&quot;,
      &quot;strum lute&quot;,
      &quot;wave feather&quot;,
      &quot;wave feather&quot;,
      &quot;square the circle&quot;,
      &quot;square the circle&quot;,
      &quot;square the circle&quot;,
      &quot;wave feather&quot;
    }
  },

  stasis = {
    fullname     = &quot;bag of stasis&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;bag&quot;,
    ingredients  = {
      ice       = 3,
      goldbar   = 4,
      silverbar = 1,
      dust      = 2,
      horn      = 3,
    },
    otherItems = {
      kola = 2
    },
    actions      = {
      &quot;wave feather&quot;,
      &quot;wave feather&quot;,
      &quot;bang drum&quot;,
      &quot;spin around thrice&quot;,
      &quot;light candle&quot;,
      &quot;ring bell&quot;,
      &quot;chant stasis statorium&quot;,
      &quot;spin around thrice&quot;,
      &quot;clap hands&quot;,
      &quot;clap hands&quot;,
      &quot;square the circle&quot;,
      &quot;square the circle&quot;,
      &quot;square the circle&quot;,
      &quot;wave feather&quot;,
      &quot;roll dice&quot;,
      &quot;roll dice&quot;,
      &quot;roll dice&quot;,
      &quot;roll dice&quot;,
      &quot;roll dice&quot;,
      &quot;roll dice&quot;,
      &quot;crush kola&quot;,
      &quot;crush kola&quot;
    }
  },

  firelash = {
    fullname     = &quot;firelash&quot;,
    type         = &quot;enchantment&quot;,
    ingredients  = {
      silverbar = 1,
      goldbar   = 1,
      dust      = 2,
    },
    otherItems = {},
    actions      = {
      &quot;bang drum&quot;,
      &quot;clap hands&quot;,
      &quot;burn incense&quot;,
      &quot;point sword&quot;,
      &quot;light candle&quot;,
      &quot;chant fo icti re eschle lok ast suh hrat&quot;,
      &quot;ring bell&quot;,
      &quot;spin around thrice&quot;,
      &quot;burn the polygon&quot;,
      &quot;roll dice&quot;,
      &quot;roll dice&quot;,
      &quot;roll dice&quot;
    }
  },

  star = {
    fullname     = &quot;star sigil&quot;,
    type         = &quot;creation&quot;,
    nameToGet    = &quot;star&quot;,
    ingredients  = {
      silverbar = 1,
      goldbar   = 2,
    },
    otherItems = {},
    actions      = {
      &quot;strum lute&quot;,
      &quot;ring bell&quot;
    }
  },
}

-- Starts the check for oroboros
local function getOIDs()
  checking_ourobori = true

  svo.echof( &quot;Don't know the ourobori IDs for this room, so going to check...&quot; )
  sendGMCP( &quot;Char.Items.Room&quot; )
  send(&quot;\n&quot;)
end

-- Repeats the last order
local function reenchant()
  enchant(enchanting[1], enchanting[2])
end

local function addToActionQueue(command, balanceful)
  enchantmentActions[#enchantmentActions + 1] = {
    command = command,
    balanceful = (balanceful or false) }
end

-- Queues the actions needed for the next item in the queue
local function enchantNextItem()
  local queueItem = enchantmentQueue[1]
  -- No first item anymore? We are done!
  if not queueItem then
    return false
  end
  -- remove the item from queue
  table.remove(enchantmentQueue, 1)
  -- get the descriptive object for the enchantment
  local what = enchantments[queueItem.what]

  -- determine, how many items we want to create
  local amount
  if what.type == &quot;creation&quot; then
    amount = tonumber(queueItem.arg) or 1
  else
    amount = 1
  end

  -- retrieve ingredients and put them into the ouroboros
  for name, per in pairs(what.ingredients) do
    local totalAmount = per * amount
    if name == &quot;arrow&quot; then
      addToActionQueue(&quot;outq &quot; .. totalAmount .. &quot; &quot; .. name, true)
      -- lets handle arrows differently. Since 'arrow' also applies to meteors, we will need special encoding
      if totalAmount == 1 then
        addToActionQueue(&quot;put @an arrow@ in &quot; .. ouroboros1, false)
		else
        addToActionQueue(string.format(&quot;put group @a group of %d arrows@ in %s&quot;, totalAmount, ouroboros1), false)
		end
    else
      addToActionQueue(&quot;outr &quot; .. totalAmount .. &quot; &quot; .. name, false)
      addToActionQueue(&quot;put &quot; .. (totalAmount &gt; 1 and &quot;group &quot; or &quot;&quot;) .. name .. &quot; in &quot; .. ouroboros1, false)
    end
  end

  -- retrieve other items needed
  local kola = what.otherItems.kola
  if kola then
      addToActionQueue(&quot;outr &quot; .. kola .. &quot; kola&quot;, false)
  end

  local gold = what.otherItems.gold
  if gold then
      svo.conf.enchantgetgold:gsub(&quot;([^$]+)&quot;, addToActionQueue)
  end

  -- start enchantment
  if what.type == &quot;enchantment&quot; then
      addToActionQueue(&quot;put &quot; .. queueItem.arg .. &quot; in &quot; .. ouroboros2, false)
      addToActionQueue(&quot;begin enchantment of &quot; .. queueItem.arg .. &quot; with &quot; .. what.fullname, false)
  else
      addToActionQueue(&quot;begin creation of &quot; .. amount .. &quot; &quot; .. what.fullname, false)
  end

  --queue actions
  for _, action in ipairs(what.actions) do
      addToActionQueue(action, true)
  end

  -- end the ritual
  addToActionQueue(&quot;end ritual&quot;, false)
  if what.type == &quot;creation&quot; then
      addToActionQueue(&quot;get &quot; .. (amount &gt; 1 and (amount .. &quot; &quot;) or &quot;&quot;) .. what.nameToGet .. &quot; from &quot; ..ouroboros2, amount &gt; 1)
  else
      addToActionQueue(&quot;get &quot; .. queueItem.arg .. &quot; from &quot; .. ouroboros2, false)
  end
  if gold then
      svo.conf.enchantputgold:gsub(&quot;([^$]+)&quot;, addToActionQueue)
  end
  return true
end

-- Full order done. Clean up and tell the user.
local function endEnchanting()
  enchanting = false
  svo.removebalanceful(&quot;enchantment step&quot;)
  svo.defs.keepup(&quot;selfishness&quot;, hadSelfishness, svo.defs.mode, false)
  svo.defs.keepup(&quot;riding&quot;, hadRiding, svo.defs.mode, false)
  svo.echof(&quot;Enchantment order done!&quot;)
  return hadSelfishness and hadRiding
end

-- Run the next step(s) in queue
local function enchantmentStep()

  local step
  -- run all steps that don't need balance at once. Needs a little less time, less spam and doesn't break svo.addbalanceful.
  repeat
    -- enchantmentActions empty? Try to fill it from the queue
    -- if there's nothing, we're done.
    if #enchantmentActions == 0 and not enchantNextItem() then
      return endEnchanting()
    end
    step = enchantmentActions[1]
    table.remove(enchantmentActions, 1)
    -- replace special stuff for meteors enchantment
    local command = step.command:gsub(&quot;@(.+)@&quot;, function(what)
        for _, item in ipairs(svo.me.inventory) do
          if what == item.name then
            return item.id
          end
        end
      end)
    svo.sendc(command)
  until step.balanceful
  return true
end

-- Start the enchanting process. Some common setup first.
local function startEnchanting()
  --skip this in case we are already enchanting
  if not enchanting then
    enchanting = true
    svo.echof(&quot;Starting enchantment order&quot;)
    ouroboros1 = ourobori_data[gmcp.Room.Info.num][1]
    ouroboros2 = ourobori_data[gmcp.Room.Info.num][2]
    hadSelfishness = svo.defc.selfishness or false
    if hadSelfishness then
      svo.defs.keepup(&quot;selfishness&quot;, false, svo.defs.mode, false)
    end
    hadRiding = svo.defc.riding or false
    if hadRiding then
      svo.defs.keepup(&quot;riding&quot;, false, svo.defs.mode, false)
    end
    svo.addbalanceful(&quot;enchantment step&quot;, enchantmentStep)
    svo.donext()
  end
end

-- exported via the svo namespace below. Parses gmcp.Char.Items.List for ourorboros
local function check_ourobori()
  if not checking_ourobori or gmcp.Char.Items.List.location ~= &quot;room&quot; then return end

  for _, item in ipairs(gmcp.Char.Items.List.items) do
    if item.name == 'a beguiling ouroboros' then
      ourobori_data[gmcp.Room.Info.num] = ourobori_data[gmcp.Room.Info.num] or {}
      table.insert(ourobori_data[gmcp.Room.Info.num], &quot;ouroboros&quot;..item.id)
    end
  end

  checking_ourobori = false

  if not ourobori_data[gmcp.Room.Info.num] then
    svo.echof(&quot;Hey, I don't think there are actually are any ourobori here :|&quot;)
    enchantmentQueue = {}
  else
    startEnchanting()
  end
end

-- gets howMany unworn items with the same short desc as what for enchanting
local function getSameItems(howMany, what)
  howMany = tonumber(howMany)

  -- lets get the short desc first
  local shortDesc
  for _, item in ipairs(svo.me.inventory) do
    if (not item.attrib or not item.attrib:find(&quot;w&quot;)) and item.id == what then
      shortDesc = item.name
      break
    end
  end

  if not shortDesc then
    svo.echof(&quot;You don't seem to have '&quot; .. what .. &quot;' in your inventory. Skipping.&quot;)
    return {}
  end

  -- Now gather howMany items with the same name
  local counter = 0
  local result = {}
  for _, item in ipairs(svo.me.inventory) do
    if not (item.attrib and (item.attrib:find(&quot;w&quot;) or item.attrib:find(&quot;E&quot;))) and item.name == shortDesc then
      item.attrib = (item.attrib or &quot;&quot;) ..  &quot;E&quot; -- lets add a pseudo attribute to mark it as &quot;used&quot;
      counter = counter + 1
      result[counter] = item.id
      if counter == howMany then
        break
      end
    end
  end

  return result

end

-- Add an enchantment to the queue
--   enchantment: The name of a known enchantment
--   number: How many items to create or which item id should be enchanted (depends on enchantment type)
local function enchant( enchantment, number, exampleItem )
  if not enchantment then
    svo.echof(&quot;What do you want to echant? (Hint: 'enchant (number) (with what)[, (number) (with what)]*')&quot;)
    return
  end
  if not number then
    svo.echof(&quot;Which item do you want to enchant or how many items do you want to create? (Hint: 'enchant (number) (with what)[, (number) (with what)]*')&quot;)
    return
  end

  local enchantmentObject = enchantments[enchantment]

  if not enchantmentObject then
    svo.echof(&quot;Echantment '&quot; .. enchantment .. &quot;' unknown. See 'enchant list' for known enchantments.&quot;)
  else

    if enchantmentObject.type == &quot;creation&quot; then
      local step = svo.conf.haveenchantmentmedallion and 5 or 1
      for i=step,tonumber(number),step do
        enchantmentQueue[#enchantmentQueue + 1] = { what = enchantment, arg = step }
        number = number - step
      end
      if tonumber(number) &gt; 0 then
        enchantmentQueue[#enchantmentQueue + 1] = { what = enchantment, arg = number }
      end
    else
      if exampleItem == &quot;&quot; then
        enchantmentQueue[#enchantmentQueue + 1] = { what = enchantment, arg = number }
      else
        local itemList = getSameItems(number, exampleItem)
        for _, item in ipairs(itemList) do
          enchantmentQueue[#enchantmentQueue + 1] = { what = enchantment, arg = item }
        end
      end
    end

    if not ourobori_data[ gmcp.Room.Info.num ] then
      getOIDs()
    else
      startEnchanting()
    end
  end
end

-- Calculate the object cost of an enchantment
--   what: name of a known enchantment
--   num: How many items should be created (only matters for created items)
--   _: only needed for enchant
--   costCollection: table where costs get added. This is useful if the function is called multiple times in a row, because costs get added up here
-- returns the calculated cost in a table
local function getEnchantCost(what, num, exampleItem, costCollection)
  local enchantObject = enchantments[what]
  costCollection = type(costCollection) == &quot;table&quot; and costCollection or {}
  if not enchantObject then return end
  local factor
  if enchantObject.type == &quot;creation&quot; then
    factor = tonumber(num) or 1
  else
    if exampleItem ~= &quot;&quot; then
      factor = num
    else
      factor = 1
    end
  end
  for item, amount in pairs(enchantObject.ingredients) do
    costCollection[item] = factor * amount + (costCollection[item] or 0)
  end
  local kola = enchantObject.otherItems.kola
  if kola then
    costCollection[&quot;kola&quot;] = factor * kola + (costCollection[&quot;kola&quot;] or 0)
  end
  return costCollection
end

-- Prints the costs calculated by getEnchantCost
local function printEnchantCosts(cost)
  local echo = cecho
  echo(&quot;Your order uses the following commodities:\n&quot;)
  for item, amount in pairs(cost) do
    echo(&quot;  &lt;gold&gt;&quot; .. item .. &quot;&lt;reset&gt; - &lt;SlateGrey&gt;&quot; .. amount .. &quot;&lt;reset&gt;\n&quot;)
  end
end

-- Parses the argument(s) given to the enchant alias
local function parseEnchantArguments(arg)

  -- if a list was requested, print it
  if arg == &quot;list&quot; then
    cecho(&quot;&lt;white&gt;              Sigils:\n&quot; )
    cecho(&quot;&lt;SlateGrey&gt;          'eye' - Eye Sigil\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;          'key' - Key Sigil\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;          'orb' - Orb Sigil\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;         'cube' - Cube Sigil\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;         'fist' - Fist Sigil\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;         'star' - Star Sigil\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;        'flame' - Flame Sigil\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;        'knife' - Knife Sigil\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;     'monolith' - Monolith Sigil\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;     'mushroom' - Mushroom Sigil\n&quot;)

    cecho(&quot;\n&lt;white&gt;          Resistance:\n&quot; )
    cecho(&quot;&lt;SlateGrey&gt;         'cold' - Cold Resist\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;        'magic' - Magic Resist\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;      'fresist' - Fire Resist\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;     'electric' - Electric Resist\n&quot;)

    cecho(&quot;\n&lt;white&gt;   Item Enchantments:\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;       'meteor' - Meteor Arrow\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;      'augment' - Augment Armour or Weapon\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;      'icewall' - Icewall\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;     'firelash' - Firelash\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;     'firewall' - Firewall\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;     'scabbard' - Scabbard of Stasis\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt; 'waterwalking' - Waterwalking\n&quot;)

    cecho(&quot;\n&lt;white&gt;       Item Creation:\n&quot; )
    cecho(&quot;&lt;SlateGrey&gt;       'bauble' - Scented Bauble\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;       'brooch' - Brooch of Thoth\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;       'purity' - Necklace of Purity\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;       'stasis' - Bag of Stasis\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;      'hearing' - Earring of Hearing\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;     'negation' - Gem of Negation\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;    'whirlwind' - Whirlwind of Vastar\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;   'pestilence' - Ring of Pestilence\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;   'worrystone' - Worrystone\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;  'concealment' - Orb of Concealment\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt; 'dreamcatcher' - Dreamcatcher\n&quot;)
    cecho(&quot;&lt;SlateGrey&gt;'comprehension' - Necklace of Comprehension\n&quot;)
  elseif string.starts(arg, &quot;cancel&quot;) then
    enchantmentQueue = {}
    if arg == &quot;cancel force&quot; then
      enchantmentActions = {}
    end
  else
    local functionToUse
    local getCosts = false

    -- Differ between cost calculation and real enchantment
    if string.starts(arg, &quot;cost&quot;) then
      functionToUse = getEnchantCost
      arg = arg:sub(5)
      getCosts = true
    else
      functionToUse = enchant
      lastOrder = arg
    end

    -- split the arguments and feed them to the function
    local arguments = arg:split(&quot;,&quot;)
    local output = {}
    for _, argument in ipairs(arguments) do
      argument = argument:trim()
      local num, exampleItem, enchantment = argument:match(&quot;^(%w+) ?(%w-) (%w+)$&quot;)
      functionToUse(enchantment, num, exampleItem, output)
    end
    -- print costs, if requested
    if getCosts then
      printEnchantCosts(output)
    end
  end

end

-- repeat the last order
local function reenchant()
  parseEnchantArguments(lastOrder)
end

-- initialise the script by adding some publishing some functions in the svo namespace as well as adding in some functions
function initialiseEnchantScript()
  svo.check_ourobori = check_ourobori
  svo.parse_enchant_arguments = parseEnchantArguments
  svo.reenchant = reenchant
  svo.get_enchant_cost = getEnchantCost
  svo.config.setoption(&quot;haveenchantmentmedallion&quot;,
  {
    vconfig2string = true,
    type = &quot;boolean&quot;,
    onenabled = function ()
      svo.echof(&quot;&lt;0,250,0&gt;Will%s use the Medallion of Enchantment for item creation.&quot;, svo.getDefaultColor())
    end,
    ondisabled = function ()
      svo.echof(&quot;&lt;250,0,0&gt;Won't%s use the Medallion of Enchantment for item creation.&quot;, svo.getDefaultColor())
    end,
    onshow = function (defaultcolour)
      fg(&quot;gold&quot;)
      echoLink(&quot;enchanter:&quot;, &quot;&quot;, &quot;svo enchanting script&quot;, true)
      fg(defaultcolour)
      echo(&quot; Using the Medallion of Enchantment for item creation is &quot;)
      fg(&quot;a_cyan&quot;) echoLink(svo.conf.haveenchantmentmedallion and &quot;enabled&quot; or &quot;disabled&quot;, &quot;svo.config.set('haveenchantmentmedallion', &quot;..(svo.conf.haveenchantmentmedallion and &quot;false&quot; or &quot;true&quot;)..&quot;, true)&quot;, &quot;Click to &quot;..(svo.conf.haveenchantmentmedallion and &quot;disable&quot; or &quot;enable&quot;)..&quot; the use of the Medallion of Enchantment&quot;, true) fg(defaultcolour)
      echo(&quot;.\n&quot;)
  end})

  svo.conf.enchantgetgold = svo.conf.enchantgetgold or &quot;get 1 gold from pack&quot;
  svo.config.setoption(&quot;enchantgetgold&quot;, {
    type = &quot;string&quot;,
    vconfig2string = true,
    onshow = function (defaultcolour)
      fg(&quot;gold&quot;)
      echoLink(&quot;enchanter:&quot;, &quot;&quot;, &quot;svo enchanting script&quot;, true)
      fg(defaultcolour) echo(&quot; Will use &quot;)
      fg(&quot;a_cyan&quot;) echoLink((svo.conf.enchantgetgold or &quot;get 1 gold from pack&quot;), &quot;printCmdLine 'vconfig enchantgetgold '&quot;, &quot;Click to set the command to use for retrieving a gold coin&quot;, true)
      fg(defaultcolour) echo(&quot; for getting gold coins to flip; putting it away with&quot;)
      fg(&quot;a_cyan&quot;) echoLink(&quot; &quot;..(svo.conf.enchantputgold or &quot;put 1 gold in pack&quot;), &quot;printCmdLine'vconfig enchantputgold '&quot;, &quot;Click to set the command to use for putting the gold coin away&quot;, true)
      fg(defaultcolour) echo(&quot;.\n&quot;)
    end,
    onset = function ()
      svo.echof(&quot;Okay, will get a gold coin with '%s'.&quot;, svo.conf.enchantgetgold)
    end
  })

  svo.conf.enchantputgold = svo.conf.enchantputgold or &quot;put 1 gold in pack&quot;
  svo.config.setoption(&quot;enchantputgold&quot;, {
    type = &quot;string&quot;,
    onset = function ()
      svo.echof(&quot;Okay, will put gold coins away with '%s'.&quot;, svo.conf.enchantputgold)
    end
  })
end

registerAnonymousEventHandler(&quot;gmcp.Char.Items.List&quot;, &quot;svo.check_ourobori&quot;)
registerAnonymousEventHandler(&quot;svo system loaded&quot;, &quot;initialiseEnchantScript&quot;)
</script>
                <eventHandlerList/>
            </Script>
        </ScriptGroup>
    </ScriptPackage>
    <KeyPackage/>
    <HelpPackage>
        <helpURL></helpURL>
    </HelpPackage>
</MudletPackage>
